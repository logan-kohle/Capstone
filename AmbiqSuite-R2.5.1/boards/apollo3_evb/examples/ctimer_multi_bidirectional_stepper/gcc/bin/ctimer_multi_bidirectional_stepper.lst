
bin/ctimer_multi_bidirectional_stepper.axf:     file format elf32-littlearm


Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 10 00 10 e1 d1 00 00 49 d2 00 00 75 c3 00 00     ........I...u...
    c010:	4b d2 00 00 4b d2 00 00 4b d2 00 00 00 00 00 00     K...K...K.......
	...
    c02c:	4d d2 00 00 4d d2 00 00 00 00 00 00 4d d2 00 00     M...M.......M...
    c03c:	4d d2 00 00 4d d2 00 00 4d d2 00 00 4d d2 00 00     M...M...M...M...
    c04c:	4d d2 00 00 4d d2 00 00 4d d2 00 00 4d d2 00 00     M...M...M...M...
    c05c:	4d d2 00 00 4d d2 00 00 4d d2 00 00 4d d2 00 00     M...M...M...M...
    c06c:	4d d2 00 00 4d d2 00 00 4d d2 00 00 4d d2 00 00     M...M...M...M...
    c07c:	4d d2 00 00 4d d2 00 00 4d d2 00 00 4d d2 00 00     M...M...M...M...
    c08c:	4d d2 00 00 4d d2 00 00 4d d2 00 00 4d d2 00 00     M...M...M...M...
    c09c:	4d d2 00 00 4d d2 00 00 4d d2 00 00 4d d2 00 00     M...M...M...M...
    c0ac:	4d d2 00 00 4d d2 00 00 4d d2 00 00 4d d2 00 00     M...M...M...M...
    c0bc:	4d d2 00 00                                         M...

0000c0c0 <__Patchable>:
	...

0000c100 <__aeabi_d2f>:
    c100:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c104:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c108:	bf24      	itt	cs
    c10a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c10e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c112:	d90d      	bls.n	c130 <__aeabi_d2f+0x30>
    c114:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c118:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c11c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c120:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c124:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c128:	bf08      	it	eq
    c12a:	f020 0001 	biceq.w	r0, r0, #1
    c12e:	4770      	bx	lr
    c130:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c134:	d121      	bne.n	c17a <__aeabi_d2f+0x7a>
    c136:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c13a:	bfbc      	itt	lt
    c13c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c140:	4770      	bxlt	lr
    c142:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c146:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c14a:	f1c2 0218 	rsb	r2, r2, #24
    c14e:	f1c2 0c20 	rsb	ip, r2, #32
    c152:	fa10 f30c 	lsls.w	r3, r0, ip
    c156:	fa20 f002 	lsr.w	r0, r0, r2
    c15a:	bf18      	it	ne
    c15c:	f040 0001 	orrne.w	r0, r0, #1
    c160:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c164:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c168:	fa03 fc0c 	lsl.w	ip, r3, ip
    c16c:	ea40 000c 	orr.w	r0, r0, ip
    c170:	fa23 f302 	lsr.w	r3, r3, r2
    c174:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c178:	e7cc      	b.n	c114 <__aeabi_d2f+0x14>
    c17a:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c17e:	d107      	bne.n	c190 <__aeabi_d2f+0x90>
    c180:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c184:	bf1e      	ittt	ne
    c186:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c18a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c18e:	4770      	bxne	lr
    c190:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c194:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c198:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c19c:	4770      	bx	lr
    c19e:	bf00      	nop

0000c1a0 <initialize_trigger_counter>:
// Stepper Pattern helper functions.
//
//*****************************************************************************
void
initialize_trigger_counter(void)
{
    c1a0:	b500      	push	{lr}
    c1a2:	b083      	sub	sp, #12
    //
    // Set up timer A6.
    //
    am_hal_ctimer_clear(6, AM_HAL_CTIMER_TIMERA);
    c1a4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c1a8:	2006      	movs	r0, #6
    c1aa:	f001 fb49 	bl	d840 <am_hal_ctimer_clear>
    am_hal_ctimer_config_single(6, AM_HAL_CTIMER_TIMERA,
    c1ae:	22d4      	movs	r2, #212	; 0xd4
    c1b0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c1b4:	2006      	movs	r0, #6
    c1b6:	f001 faad 	bl	d714 <am_hal_ctimer_config_single>
                              (AM_HAL_CTIMER_FN_PWM_REPEAT    |
                               AM_HAL_CTIMER_LFRC_512HZ));

    am_hal_ctimer_config_trigger(6, AM_HAL_CTIMER_TIMERA, 1 << CTIMER_AUX6_TMRA6EN23_Pos);
    c1ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    c1be:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c1c2:	2006      	movs	r0, #6
    c1c4:	f001 faf4 	bl	d7b0 <am_hal_ctimer_config_trigger>

    //
    // Set the A6 Timer period
    //
    am_hal_ctimer_period_set(6, AM_HAL_CTIMER_TIMERA, 1000, 500);
    c1c8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    c1cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c1d0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c1d4:	2006      	movs	r0, #6
    c1d6:	f001 fcc5 	bl	db64 <am_hal_ctimer_period_set>

    //
    // Configure timer A6 OUT2 on pin #12.
    //
    am_hal_ctimer_output_config(6, AM_HAL_CTIMER_TIMERA, TRIG_GPIO, 
    c1da:	2303      	movs	r3, #3
    c1dc:	9300      	str	r3, [sp, #0]
    c1de:	2301      	movs	r3, #1
    c1e0:	220c      	movs	r2, #12
    c1e2:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c1e6:	2006      	movs	r0, #6
    c1e8:	f001 fb40 	bl	d86c <am_hal_ctimer_output_config>
                              AM_HAL_GPIO_PIN_DRIVESTRENGTH_12MA);

    //
    // Start the timer.
    //
    am_hal_ctimer_start(6, AM_HAL_CTIMER_TIMERA);
    c1ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c1f0:	2006      	movs	r0, #6
    c1f2:	f001 faf7 	bl	d7e4 <am_hal_ctimer_start>
}
    c1f6:	bf00      	nop
    c1f8:	b003      	add	sp, #12
    c1fa:	f85d fb04 	ldr.w	pc, [sp], #4

0000c1fe <initialize_pattern_counter>:
                           uint32_t ui32PatternLen,
                           uint32_t ui32Trigger,
                           uint32_t ui32OutputPin,
                           uint32_t ui32PatternClock,
                           uint32_t ui32Invert)
{
    c1fe:	b500      	push	{lr}
    c200:	b087      	sub	sp, #28
    c202:	9005      	str	r0, [sp, #20]
    c204:	9104      	str	r1, [sp, #16]
    c206:	e9cd 2302 	strd	r2, r3, [sp, #8]
    //
    // Set up timer.
    //
    am_hal_ctimer_clear(ui32TimerNumber, ui32TimerSegment);
    c20a:	9904      	ldr	r1, [sp, #16]
    c20c:	9805      	ldr	r0, [sp, #20]
    c20e:	f001 fb17 	bl	d840 <am_hal_ctimer_clear>

    am_hal_ctimer_config_single(ui32TimerNumber, ui32TimerSegment,
    c212:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c214:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    c218:	461a      	mov	r2, r3
    c21a:	9904      	ldr	r1, [sp, #16]
    c21c:	9805      	ldr	r0, [sp, #20]
    c21e:	f001 fa79 	bl	d714 <am_hal_ctimer_config_single>
                               ui32PatternClock) );

    //
    // Set the pattern in the CMPR registers.
    //
    am_hal_ctimer_compare_set(ui32TimerNumber, ui32TimerSegment, 0, 
    c222:	9b02      	ldr	r3, [sp, #8]
    c224:	b29b      	uxth	r3, r3
    c226:	2200      	movs	r2, #0
    c228:	9904      	ldr	r1, [sp, #16]
    c22a:	9805      	ldr	r0, [sp, #20]
    c22c:	f001 fc58 	bl	dae0 <am_hal_ctimer_compare_set>
                            (uint32_t)(ui64Pattern & 0xFFFF));
    am_hal_ctimer_compare_set(ui32TimerNumber, ui32TimerSegment, 1, 
                            (uint32_t)((ui64Pattern >> 16) & 0xFFFF));
    c230:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    c234:	f04f 0200 	mov.w	r2, #0
    c238:	f04f 0300 	mov.w	r3, #0
    c23c:	0c02      	lsrs	r2, r0, #16
    c23e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    c242:	0c0b      	lsrs	r3, r1, #16
    am_hal_ctimer_compare_set(ui32TimerNumber, ui32TimerSegment, 1, 
    c244:	4613      	mov	r3, r2
    c246:	b29b      	uxth	r3, r3
    c248:	2201      	movs	r2, #1
    c24a:	9904      	ldr	r1, [sp, #16]
    c24c:	9805      	ldr	r0, [sp, #20]
    c24e:	f001 fc47 	bl	dae0 <am_hal_ctimer_compare_set>
    //
    // Set the timer trigger and pattern length.
    //
    am_hal_ctimer_config_trigger(ui32TimerNumber, ui32TimerSegment,
                               ( (ui32PatternLen << CTIMER_AUX0_TMRA0LMT_Pos) |
                                 ( ui32Trigger << CTIMER_AUX0_TMRA0TRIG_Pos) |
    c252:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c254:	01da      	lsls	r2, r3, #7
                               ( (ui32PatternLen << CTIMER_AUX0_TMRA0LMT_Pos) |
    c256:	9b08      	ldr	r3, [sp, #32]
    c258:	431a      	orrs	r2, r3
                                 (ui32Invert << CTIMER_AUX0_TMRA0TINV_Pos)) );
    c25a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c25c:	031b      	lsls	r3, r3, #12
    am_hal_ctimer_config_trigger(ui32TimerNumber, ui32TimerSegment,
    c25e:	4313      	orrs	r3, r2
    c260:	461a      	mov	r2, r3
    c262:	9904      	ldr	r1, [sp, #16]
    c264:	9805      	ldr	r0, [sp, #20]
    c266:	f001 faa3 	bl	d7b0 <am_hal_ctimer_config_trigger>

    //
    // Configure timer output pin.
    //
    am_hal_ctimer_output_config(ui32TimerNumber, ui32TimerSegment, ui32OutputPin, 
    c26a:	2303      	movs	r3, #3
    c26c:	9300      	str	r3, [sp, #0]
    c26e:	2300      	movs	r3, #0
    c270:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    c272:	9904      	ldr	r1, [sp, #16]
    c274:	9805      	ldr	r0, [sp, #20]
    c276:	f001 faf9 	bl	d86c <am_hal_ctimer_output_config>
                              AM_HAL_GPIO_PIN_DRIVESTRENGTH_12MA);

    //
    // Start the timer.
    //
    am_hal_ctimer_start(ui32TimerNumber, ui32TimerSegment);
    c27a:	9904      	ldr	r1, [sp, #16]
    c27c:	9805      	ldr	r0, [sp, #20]
    c27e:	f001 fab1 	bl	d7e4 <am_hal_ctimer_start>
}
    c282:	bf00      	nop
    c284:	b007      	add	sp, #28
    c286:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0000c28c <global_disable>:

void
global_disable(void)
{
    CTIMER->GLOBEN = 0x0;
    c28c:	4b02      	ldr	r3, [pc, #8]	; (c298 <global_disable+0xc>)
    c28e:	2200      	movs	r2, #0
    c290:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    c294:	bf00      	nop
    c296:	4770      	bx	lr
    c298:	40008000 	.word	0x40008000

0000c29c <global_enable>:

void
global_enable(void)
{
    CTIMER->GLOBEN = 0xffff;
    c29c:	4b03      	ldr	r3, [pc, #12]	; (c2ac <global_enable+0x10>)
    c29e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    c2a2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    c2a6:	bf00      	nop
    c2a8:	4770      	bx	lr
    c2aa:	bf00      	nop
    c2ac:	40008000 	.word	0x40008000

0000c2b0 <main>:
// Main function.
//
//*****************************************************************************
int
main(void)
{
    c2b0:	b500      	push	{lr}
    c2b2:	b087      	sub	sp, #28
    //
    // Set the clock frequency.
    //
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    c2b4:	2100      	movs	r1, #0
    c2b6:	2000      	movs	r0, #0
    c2b8:	f001 f972 	bl	d5a0 <am_hal_clkgen_control>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    c2bc:	4829      	ldr	r0, [pc, #164]	; (c364 <main+0xb4>)
    c2be:	f000 ffc7 	bl	d250 <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
    c2c2:	f000 ffe9 	bl	d298 <am_hal_cachectrl_enable>

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
    c2c6:	f001 ff4d 	bl	e164 <am_bsp_low_power_init>

    //
    // Among other things, am_bsp_low_power_init() stops the XT oscillator,
    // which is needed for this example.
    //
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_LFRC_START, 0);
    c2ca:	2100      	movs	r1, #0
    c2cc:	2002      	movs	r0, #2
    c2ce:	f001 f967 	bl	d5a0 <am_hal_clkgen_control>

    //
    // Initialize the printf interface for ITM/SWO output.
    //
    am_bsp_itm_printf_enable();
    c2d2:	f001 ff9d 	bl	e210 <am_bsp_itm_printf_enable>

    //
    // Clear the terminal and print the banner.
    //
    am_util_stdio_terminal_clear();
    c2d6:	f000 ff7b 	bl	d1d0 <am_util_stdio_terminal_clear>
    am_util_stdio_printf("CTimer multiple bidirectional stepper motor example\n");
    c2da:	4823      	ldr	r0, [pc, #140]	; (c368 <main+0xb8>)
    c2dc:	f000 ff58 	bl	d190 <am_util_stdio_printf>

    //
    // We are done printing. Disable debug printf messages on ITM.
    //
    am_bsp_debug_printf_disable();
    c2e0:	f001 ff60 	bl	e1a4 <am_bsp_debug_printf_disable>

    //
    // Disable all the counters.
    //
    global_disable();
    c2e4:	f7ff ffd2 	bl	c28c <global_disable>

    //
    // Set up the base counter controlling the pattern overall period (1Hz).
    //
    initialize_trigger_counter();
    c2e8:	f7ff ff5a 	bl	c1a0 <initialize_trigger_counter>

    //
    // Set B0 CTimer with 1st pattern
    //
    initialize_pattern_counter(0, AM_HAL_CTIMER_TIMERB, 0x333, 
    c2ec:	2301      	movs	r3, #1
    c2ee:	9304      	str	r3, [sp, #16]
    c2f0:	2316      	movs	r3, #22
    c2f2:	9303      	str	r3, [sp, #12]
    c2f4:	230d      	movs	r3, #13
    c2f6:	9302      	str	r3, [sp, #8]
    c2f8:	230c      	movs	r3, #12
    c2fa:	9301      	str	r3, [sp, #4]
    c2fc:	231f      	movs	r3, #31
    c2fe:	9300      	str	r3, [sp, #0]
    c300:	f240 3233 	movw	r2, #819	; 0x333
    c304:	f04f 0300 	mov.w	r3, #0
    c308:	4918      	ldr	r1, [pc, #96]	; (c36c <main+0xbc>)
    c30a:	2000      	movs	r0, #0
    c30c:	f7ff ff77 	bl	c1fe <initialize_pattern_counter>
                               AM_HAL_CTIMER_LFRC_32HZ, 1);

    //
    // Set A1 CTimer with 2nd pattern.
    //
    initialize_pattern_counter(1, AM_HAL_CTIMER_TIMERA, 0x33300, 
    c310:	2301      	movs	r3, #1
    c312:	9304      	str	r3, [sp, #16]
    c314:	2316      	movs	r3, #22
    c316:	9303      	str	r3, [sp, #12]
    c318:	2312      	movs	r3, #18
    c31a:	9302      	str	r3, [sp, #8]
    c31c:	230c      	movs	r3, #12
    c31e:	9301      	str	r3, [sp, #4]
    c320:	231f      	movs	r3, #31
    c322:	9300      	str	r3, [sp, #0]
    c324:	4a12      	ldr	r2, [pc, #72]	; (c370 <main+0xc0>)
    c326:	f04f 0300 	mov.w	r3, #0
    c32a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c32e:	2001      	movs	r0, #1
    c330:	f7ff ff65 	bl	c1fe <initialize_pattern_counter>
                               AM_HAL_CTIMER_LFRC_32HZ, 1);

    //
    // Set B1 CTimer with 3rd pattern.
    //
    initialize_pattern_counter(1, AM_HAL_CTIMER_TIMERB, 0, 
    c334:	2301      	movs	r3, #1
    c336:	9304      	str	r3, [sp, #16]
    c338:	2316      	movs	r3, #22
    c33a:	9303      	str	r3, [sp, #12]
    c33c:	2313      	movs	r3, #19
    c33e:	9302      	str	r3, [sp, #8]
    c340:	230c      	movs	r3, #12
    c342:	9301      	str	r3, [sp, #4]
    c344:	231f      	movs	r3, #31
    c346:	9300      	str	r3, [sp, #0]
    c348:	f04f 0200 	mov.w	r2, #0
    c34c:	f04f 0300 	mov.w	r3, #0
    c350:	4906      	ldr	r1, [pc, #24]	; (c36c <main+0xbc>)
    c352:	2001      	movs	r0, #1
    c354:	f7ff ff53 	bl	c1fe <initialize_pattern_counter>
                               AM_HAL_CTIMER_LFRC_32HZ, 1);

    //
    // Enable all the counters.
    //
    global_enable();
    c358:	f7ff ffa0 	bl	c29c <global_enable>
    while (1)
    {
        //
        // Go to Deep Sleep.
        //
        am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
    c35c:	2001      	movs	r0, #1
    c35e:	f001 fec9 	bl	e0f4 <am_hal_sysctrl_sleep>
    c362:	e7fb      	b.n	c35c <main+0xac>
    c364:	0000e84c 	.word	0x0000e84c
    c368:	0000e800 	.word	0x0000e800
    c36c:	ffff0000 	.word	0xffff0000
    c370:	00033300 	.word	0x00033300

0000c374 <HardFault_Handler>:
HardFault_Handler(void)
#else // AM_CMSIS_REGS
am_fault_isr(void)
#endif // AM_CMSIS_REGS
{
    __asm("    push    {r0,lr}");       // Always pushes to MSP stack
    c374:	b501      	push	{r0, lr}
    __asm("    tst     lr, #4");        // Check if we should use MSP or PSP
    c376:	f01e 0f04 	tst.w	lr, #4
    __asm("    itet    eq");            // Instrs executed when: eq,ne,eq
    c37a:	bf0a      	itet	eq
    __asm("    mrseq   r0, msp");       //    bit2=0 indicating MSP stack
    c37c:	f3ef 8008 	mrseq	r0, MSP
    __asm("    mrsne   r0, psp");       // e: bit2=1 indicating PSP stack
    c380:	f3ef 8009 	mrsne	r0, PSP
    __asm("    addseq  r0, r0, #8");    // t: bit2=0, adjust for pushes to MSP stack
    c384:	f110 0008 	addseq.w	r0, r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
    c388:	f000 f80a 	bl	c3a0 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");       // Restore from MSP stack
    c38c:	bd01      	pop	{r0, pc}
}
    c38e:	bf00      	nop
    c390:	4618      	mov	r0, r3

0000c392 <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
    c392:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
    c394:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
    c396:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
    c398:	4770      	bx	lr
}
    c39a:	bf00      	nop
    c39c:	4618      	mov	r0, r3
	...

0000c3a0 <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    c3a0:	b500      	push	{lr}
    c3a2:	b097      	sub	sp, #92	; 0x5c
    c3a4:	9001      	str	r0, [sp, #4]
    volatile am_fault_t sFaultData;
#if (defined(AM_PART_APOLLO4) || defined(AM_PART_APOLLO4B))
    am_hal_fault_status_t  sHalFaultData = {0};
#else
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    c3a6:	ab03      	add	r3, sp, #12
    c3a8:	2200      	movs	r2, #0
    c3aa:	601a      	str	r2, [r3, #0]
    c3ac:	605a      	str	r2, [r3, #4]
    c3ae:	609a      	str	r2, [r3, #8]
    c3b0:	60da      	str	r2, [r3, #12]
    c3b2:	611a      	str	r2, [r3, #16]
    c3b4:	615a      	str	r2, [r3, #20]
#endif // if defined(AM_PART_APOLLO4)

    uint32_t u32Mask = 0;
    c3b6:	2300      	movs	r3, #0
    c3b8:	9315      	str	r3, [sp, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    c3ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
    c3bc:	9313      	str	r3, [sp, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    c3be:	4b2e      	ldr	r3, [pc, #184]	; (c478 <am_util_faultisr_collect_data+0xd8>)
    c3c0:	681b      	ldr	r3, [r3, #0]
    c3c2:	9313      	str	r3, [sp, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    c3c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    c3c6:	b2db      	uxtb	r3, r3
    c3c8:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    c3cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    c3ce:	0a1b      	lsrs	r3, r3, #8
    c3d0:	b2db      	uxtb	r3, r3
    c3d2:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    c3d6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    c3d8:	0c1b      	lsrs	r3, r3, #16
    c3da:	b29b      	uxth	r3, r3
    c3dc:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    c3e0:	4b26      	ldr	r3, [pc, #152]	; (c47c <am_util_faultisr_collect_data+0xdc>)
    c3e2:	681b      	ldr	r3, [r3, #0]
    c3e4:	9312      	str	r3, [sp, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c3e6:	f89d 3051 	ldrb.w	r3, [sp, #81]	; 0x51
    c3ea:	b2db      	uxtb	r3, r3
    c3ec:	f003 0302 	and.w	r3, r3, #2
    c3f0:	2b00      	cmp	r3, #0
    c3f2:	d005      	beq.n	c400 <am_util_faultisr_collect_data+0x60>
    c3f4:	9901      	ldr	r1, [sp, #4]
    c3f6:	2006      	movs	r0, #6
    c3f8:	f7ff ffcb 	bl	c392 <getStackedReg>
    c3fc:	4603      	mov	r3, r0
    c3fe:	e001      	b.n	c404 <am_util_faultisr_collect_data+0x64>
    c400:	f04f 33ff 	mov.w	r3, #4294967295
    c404:	9311      	str	r3, [sp, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c406:	9901      	ldr	r1, [sp, #4]
    c408:	2000      	movs	r0, #0
    c40a:	f7ff ffc2 	bl	c392 <getStackedReg>
    c40e:	4603      	mov	r3, r0
    c410:	9309      	str	r3, [sp, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c412:	9901      	ldr	r1, [sp, #4]
    c414:	2001      	movs	r0, #1
    c416:	f7ff ffbc 	bl	c392 <getStackedReg>
    c41a:	4603      	mov	r3, r0
    c41c:	930a      	str	r3, [sp, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c41e:	9901      	ldr	r1, [sp, #4]
    c420:	2002      	movs	r0, #2
    c422:	f7ff ffb6 	bl	c392 <getStackedReg>
    c426:	4603      	mov	r3, r0
    c428:	930b      	str	r3, [sp, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c42a:	9901      	ldr	r1, [sp, #4]
    c42c:	2003      	movs	r0, #3
    c42e:	f7ff ffb0 	bl	c392 <getStackedReg>
    c432:	4603      	mov	r3, r0
    c434:	930c      	str	r3, [sp, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c436:	9901      	ldr	r1, [sp, #4]
    c438:	2004      	movs	r0, #4
    c43a:	f7ff ffaa 	bl	c392 <getStackedReg>
    c43e:	4603      	mov	r3, r0
    c440:	930d      	str	r3, [sp, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c442:	9901      	ldr	r1, [sp, #4]
    c444:	2005      	movs	r0, #5
    c446:	f7ff ffa4 	bl	c392 <getStackedReg>
    c44a:	4603      	mov	r3, r0
    c44c:	930e      	str	r3, [sp, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c44e:	9901      	ldr	r1, [sp, #4]
    c450:	2006      	movs	r0, #6
    c452:	f7ff ff9e 	bl	c392 <getStackedReg>
    c456:	4603      	mov	r3, r0
    c458:	930f      	str	r3, [sp, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c45a:	9901      	ldr	r1, [sp, #4]
    c45c:	2007      	movs	r0, #7
    c45e:	f7ff ff98 	bl	c392 <getStackedReg>
    c462:	4603      	mov	r3, r0
    c464:	9310      	str	r3, [sp, #64]	; 0x40
    //
#if (defined(AM_PART_APOLLO4) || defined(AM_PART_APOLLO4B))
    am_hal_fault_status_get(&sHalFaultData);
#else
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c466:	ab03      	add	r3, sp, #12
    c468:	4619      	mov	r1, r3
    c46a:	2002      	movs	r0, #2
    c46c:	f001 fda6 	bl	dfbc <am_hal_mcuctrl_info_get>
      am_util_stdio_printf("   SYS Fault Address: 0x%08X\n", sHalFaultData.ui32SYS);
    }

#endif

    u32Mask = 0;
    c470:	2300      	movs	r3, #0
    c472:	9315      	str	r3, [sp, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    c474:	e7fe      	b.n	c474 <am_util_faultisr_collect_data+0xd4>
    c476:	bf00      	nop
    c478:	e000ed28 	.word	0xe000ed28
    c47c:	e000ed38 	.word	0xe000ed38

0000c480 <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
    c480:	b082      	sub	sp, #8
    c482:	9001      	str	r0, [sp, #4]
    g_pfnCharPrint = pfnCharPrint;
    c484:	4a02      	ldr	r2, [pc, #8]	; (c490 <am_util_stdio_printf_init+0x10>)
    c486:	9b01      	ldr	r3, [sp, #4]
    c488:	6013      	str	r3, [r2, #0]
}
    c48a:	bf00      	nop
    c48c:	b002      	add	sp, #8
    c48e:	4770      	bx	lr
    c490:	10001044 	.word	0x10001044

0000c494 <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
    c494:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    c498:	b098      	sub	sp, #96	; 0x60
    c49a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    c49e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    c4a2:	f04f 0000 	mov.w	r0, #0
    c4a6:	f04f 0100 	mov.w	r1, #0
    c4aa:	0018      	movs	r0, r3
    c4ac:	2100      	movs	r1, #0
    c4ae:	ea50 0301 	orrs.w	r3, r0, r1
    c4b2:	f000 80b0 	beq.w	c616 <divu64_10+0x182>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c4b6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    c4ba:	f04f 0400 	mov.w	r4, #0
    c4be:	f04f 0500 	mov.w	r5, #0
    c4c2:	0854      	lsrs	r4, r2, #1
    c4c4:	ea44 74c3 	orr.w	r4, r4, r3, lsl #31
    c4c8:	085d      	lsrs	r5, r3, #1
    c4ca:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    c4ce:	f04f 0000 	mov.w	r0, #0
    c4d2:	f04f 0100 	mov.w	r1, #0
    c4d6:	0890      	lsrs	r0, r2, #2
    c4d8:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
    c4dc:	0899      	lsrs	r1, r3, #2
    c4de:	eb14 0a00 	adds.w	sl, r4, r0
    c4e2:	eb45 0b01 	adc.w	fp, r5, r1
    c4e6:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
        q64 += (q64 >> 4);
    c4ea:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c4ee:	f04f 0000 	mov.w	r0, #0
    c4f2:	f04f 0100 	mov.w	r1, #0
    c4f6:	0910      	lsrs	r0, r2, #4
    c4f8:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
    c4fc:	0919      	lsrs	r1, r3, #4
    c4fe:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c502:	1814      	adds	r4, r2, r0
    c504:	9402      	str	r4, [sp, #8]
    c506:	414b      	adcs	r3, r1
    c508:	9303      	str	r3, [sp, #12]
    c50a:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
    c50e:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 += (q64 >> 8);
    c512:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c516:	f04f 0000 	mov.w	r0, #0
    c51a:	f04f 0100 	mov.w	r1, #0
    c51e:	0a10      	lsrs	r0, r2, #8
    c520:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
    c524:	0a19      	lsrs	r1, r3, #8
    c526:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c52a:	1814      	adds	r4, r2, r0
    c52c:	9404      	str	r4, [sp, #16]
    c52e:	414b      	adcs	r3, r1
    c530:	9305      	str	r3, [sp, #20]
    c532:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
    c536:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 += (q64 >> 16);
    c53a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c53e:	f04f 0000 	mov.w	r0, #0
    c542:	f04f 0100 	mov.w	r1, #0
    c546:	0c10      	lsrs	r0, r2, #16
    c548:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
    c54c:	0c19      	lsrs	r1, r3, #16
    c54e:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c552:	1814      	adds	r4, r2, r0
    c554:	9406      	str	r4, [sp, #24]
    c556:	414b      	adcs	r3, r1
    c558:	9307      	str	r3, [sp, #28]
    c55a:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
    c55e:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 += (q64 >> 32);
    c562:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c566:	f04f 0000 	mov.w	r0, #0
    c56a:	f04f 0100 	mov.w	r1, #0
    c56e:	0018      	movs	r0, r3
    c570:	2100      	movs	r1, #0
    c572:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c576:	1814      	adds	r4, r2, r0
    c578:	9408      	str	r4, [sp, #32]
    c57a:	414b      	adcs	r3, r1
    c57c:	9309      	str	r3, [sp, #36]	; 0x24
    c57e:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
    c582:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 >>= 3;
    c586:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    c58a:	f04f 0200 	mov.w	r2, #0
    c58e:	f04f 0300 	mov.w	r3, #0
    c592:	08c2      	lsrs	r2, r0, #3
    c594:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
    c598:	08cb      	lsrs	r3, r1, #3
    c59a:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
        r64 = ui64Val - q64*10;
    c59e:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
    c5a2:	4622      	mov	r2, r4
    c5a4:	462b      	mov	r3, r5
    c5a6:	f04f 0000 	mov.w	r0, #0
    c5aa:	f04f 0100 	mov.w	r1, #0
    c5ae:	0099      	lsls	r1, r3, #2
    c5b0:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
    c5b4:	0090      	lsls	r0, r2, #2
    c5b6:	4602      	mov	r2, r0
    c5b8:	460b      	mov	r3, r1
    c5ba:	1916      	adds	r6, r2, r4
    c5bc:	eb43 0705 	adc.w	r7, r3, r5
    c5c0:	19b3      	adds	r3, r6, r6
    c5c2:	930a      	str	r3, [sp, #40]	; 0x28
    c5c4:	eb47 0307 	adc.w	r3, r7, r7
    c5c8:	930b      	str	r3, [sp, #44]	; 0x2c
    c5ca:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
    c5ce:	4630      	mov	r0, r6
    c5d0:	4639      	mov	r1, r7
    c5d2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    c5d6:	1a14      	subs	r4, r2, r0
    c5d8:	940c      	str	r4, [sp, #48]	; 0x30
    c5da:	eb63 0301 	sbc.w	r3, r3, r1
    c5de:	930d      	str	r3, [sp, #52]	; 0x34
    c5e0:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    c5e4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
        return q64 + ((r64 + 6) >> 4);
    c5e8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    c5ec:	f112 0806 	adds.w	r8, r2, #6
    c5f0:	f143 0900 	adc.w	r9, r3, #0
    c5f4:	f04f 0200 	mov.w	r2, #0
    c5f8:	f04f 0300 	mov.w	r3, #0
    c5fc:	ea4f 1218 	mov.w	r2, r8, lsr #4
    c600:	ea42 7209 	orr.w	r2, r2, r9, lsl #28
    c604:	ea4f 1319 	mov.w	r3, r9, lsr #4
    c608:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    c60c:	1814      	adds	r4, r2, r0
    c60e:	9400      	str	r4, [sp, #0]
    c610:	414b      	adcs	r3, r1
    c612:	9301      	str	r3, [sp, #4]
    c614:	e02a      	b.n	c66c <divu64_10+0x1d8>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
    c616:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c618:	9317      	str	r3, [sp, #92]	; 0x5c
        q32 = (ui32Val>>1) + (ui32Val>>2);
    c61a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    c61c:	085a      	lsrs	r2, r3, #1
    c61e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    c620:	089b      	lsrs	r3, r3, #2
    c622:	4413      	add	r3, r2
    c624:	9316      	str	r3, [sp, #88]	; 0x58
        q32 += (q32 >> 4);
    c626:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c628:	091b      	lsrs	r3, r3, #4
    c62a:	9a16      	ldr	r2, [sp, #88]	; 0x58
    c62c:	4413      	add	r3, r2
    c62e:	9316      	str	r3, [sp, #88]	; 0x58
        q32 += (q32 >> 8);
    c630:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c632:	0a1b      	lsrs	r3, r3, #8
    c634:	9a16      	ldr	r2, [sp, #88]	; 0x58
    c636:	4413      	add	r3, r2
    c638:	9316      	str	r3, [sp, #88]	; 0x58
        q32 += (q32 >> 16);
    c63a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c63c:	0c1b      	lsrs	r3, r3, #16
    c63e:	9a16      	ldr	r2, [sp, #88]	; 0x58
    c640:	4413      	add	r3, r2
    c642:	9316      	str	r3, [sp, #88]	; 0x58
        q32 >>= 3;
    c644:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c646:	08db      	lsrs	r3, r3, #3
    c648:	9316      	str	r3, [sp, #88]	; 0x58
        r32 = ui32Val - q32*10;
    c64a:	9a16      	ldr	r2, [sp, #88]	; 0x58
    c64c:	4613      	mov	r3, r2
    c64e:	009b      	lsls	r3, r3, #2
    c650:	4413      	add	r3, r2
    c652:	005b      	lsls	r3, r3, #1
    c654:	461a      	mov	r2, r3
    c656:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    c658:	1a9b      	subs	r3, r3, r2
    c65a:	9315      	str	r3, [sp, #84]	; 0x54
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c65c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    c65e:	3306      	adds	r3, #6
    c660:	091a      	lsrs	r2, r3, #4
    c662:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c664:	4413      	add	r3, r2
    c666:	2200      	movs	r2, #0
    c668:	9300      	str	r3, [sp, #0]
    c66a:	9201      	str	r2, [sp, #4]
    }
}
    c66c:	e9dd 2300 	ldrd	r2, r3, [sp]
    c670:	4610      	mov	r0, r2
    c672:	4619      	mov	r1, r3
    c674:	b018      	add	sp, #96	; 0x60
    c676:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    c67a:	4770      	bx	lr

0000c67c <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
    c67c:	b500      	push	{lr}
    c67e:	b085      	sub	sp, #20
    c680:	e9cd 0100 	strd	r0, r1, [sp]
    int iNDigits = ui64Val ? 0 : 1;
    c684:	9a00      	ldr	r2, [sp, #0]
    c686:	9b01      	ldr	r3, [sp, #4]
    c688:	4313      	orrs	r3, r2
    c68a:	2b00      	cmp	r3, #0
    c68c:	bf0c      	ite	eq
    c68e:	2301      	moveq	r3, #1
    c690:	2300      	movne	r3, #0
    c692:	b2db      	uxtb	r3, r3
    c694:	9303      	str	r3, [sp, #12]

    while ( ui64Val )
    c696:	e008      	b.n	c6aa <ndigits_in_u64+0x2e>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
    c698:	e9dd 0100 	ldrd	r0, r1, [sp]
    c69c:	f7ff fefa 	bl	c494 <divu64_10>
    c6a0:	e9cd 0100 	strd	r0, r1, [sp]
        ++iNDigits;
    c6a4:	9b03      	ldr	r3, [sp, #12]
    c6a6:	3301      	adds	r3, #1
    c6a8:	9303      	str	r3, [sp, #12]
    while ( ui64Val )
    c6aa:	e9dd 2300 	ldrd	r2, r3, [sp]
    c6ae:	4313      	orrs	r3, r2
    c6b0:	d1f2      	bne.n	c698 <ndigits_in_u64+0x1c>
    }

    return iNDigits;
    c6b2:	9b03      	ldr	r3, [sp, #12]
}
    c6b4:	4618      	mov	r0, r3
    c6b6:	b005      	add	sp, #20
    c6b8:	f85d fb04 	ldr.w	pc, [sp], #4

0000c6bc <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
    c6bc:	b530      	push	{r4, r5, lr}
    c6be:	b083      	sub	sp, #12
    c6c0:	e9cd 0100 	strd	r0, r1, [sp]
    if ( i64Val < 0 )
    c6c4:	e9dd 2300 	ldrd	r2, r3, [sp]
    c6c8:	2b00      	cmp	r3, #0
    c6ca:	da07      	bge.n	c6dc <ndigits_in_i64+0x20>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
    c6cc:	e9dd 2300 	ldrd	r2, r3, [sp]
    c6d0:	2100      	movs	r1, #0
    c6d2:	4254      	negs	r4, r2
    c6d4:	eb61 0503 	sbc.w	r5, r1, r3
    c6d8:	e9cd 4500 	strd	r4, r5, [sp]
    }

    return ndigits_in_u64((uint64_t) i64Val);
    c6dc:	e9dd 2300 	ldrd	r2, r3, [sp]
    c6e0:	4610      	mov	r0, r2
    c6e2:	4619      	mov	r1, r3
    c6e4:	f7ff ffca 	bl	c67c <ndigits_in_u64>
    c6e8:	4603      	mov	r3, r0
}
    c6ea:	4618      	mov	r0, r3
    c6ec:	b003      	add	sp, #12
    c6ee:	bd30      	pop	{r4, r5, pc}

0000c6f0 <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
    c6f0:	b084      	sub	sp, #16
    c6f2:	e9cd 0100 	strd	r0, r1, [sp]
    int iDigits = ui64Val ? 0 : 1;
    c6f6:	9a00      	ldr	r2, [sp, #0]
    c6f8:	9b01      	ldr	r3, [sp, #4]
    c6fa:	4313      	orrs	r3, r2
    c6fc:	2b00      	cmp	r3, #0
    c6fe:	bf0c      	ite	eq
    c700:	2301      	moveq	r3, #1
    c702:	2300      	movne	r3, #0
    c704:	b2db      	uxtb	r3, r3
    c706:	9303      	str	r3, [sp, #12]

    while ( ui64Val )
    c708:	e00e      	b.n	c728 <ndigits_in_hex+0x38>
    {
        ui64Val >>= 4;
    c70a:	e9dd 0100 	ldrd	r0, r1, [sp]
    c70e:	f04f 0200 	mov.w	r2, #0
    c712:	f04f 0300 	mov.w	r3, #0
    c716:	0902      	lsrs	r2, r0, #4
    c718:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    c71c:	090b      	lsrs	r3, r1, #4
    c71e:	e9cd 2300 	strd	r2, r3, [sp]
        ++iDigits;
    c722:	9b03      	ldr	r3, [sp, #12]
    c724:	3301      	adds	r3, #1
    c726:	9303      	str	r3, [sp, #12]
    while ( ui64Val )
    c728:	e9dd 2300 	ldrd	r2, r3, [sp]
    c72c:	4313      	orrs	r3, r2
    c72e:	d1ec      	bne.n	c70a <ndigits_in_hex+0x1a>
    }

    return iDigits;
    c730:	9b03      	ldr	r3, [sp, #12]
}
    c732:	4618      	mov	r0, r3
    c734:	b004      	add	sp, #16
    c736:	4770      	bx	lr

0000c738 <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
    c738:	b086      	sub	sp, #24
    c73a:	9001      	str	r0, [sp, #4]
    c73c:	9100      	str	r1, [sp, #0]
    bool bNeg = false;
    c73e:	2300      	movs	r3, #0
    c740:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32_t ui32Val = 0, uCnt = 0;
    c744:	2300      	movs	r3, #0
    c746:	9304      	str	r3, [sp, #16]
    c748:	2300      	movs	r3, #0
    c74a:	9303      	str	r3, [sp, #12]

    if ( *pcStr == '-')
    c74c:	9b01      	ldr	r3, [sp, #4]
    c74e:	781b      	ldrb	r3, [r3, #0]
    c750:	2b2d      	cmp	r3, #45	; 0x2d
    c752:	d11c      	bne.n	c78e <decstr_to_int+0x56>
    {
        bNeg = true;
    c754:	2301      	movs	r3, #1
    c756:	f88d 3017 	strb.w	r3, [sp, #23]
        pcStr++;
    c75a:	9b01      	ldr	r3, [sp, #4]
    c75c:	3301      	adds	r3, #1
    c75e:	9301      	str	r3, [sp, #4]
        uCnt++;
    c760:	9b03      	ldr	r3, [sp, #12]
    c762:	3301      	adds	r3, #1
    c764:	9303      	str	r3, [sp, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c766:	e012      	b.n	c78e <decstr_to_int+0x56>
    {
        ++uCnt;
    c768:	9b03      	ldr	r3, [sp, #12]
    c76a:	3301      	adds	r3, #1
    c76c:	9303      	str	r3, [sp, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
    c76e:	9a04      	ldr	r2, [sp, #16]
    c770:	4613      	mov	r3, r2
    c772:	009b      	lsls	r3, r3, #2
    c774:	4413      	add	r3, r2
    c776:	005b      	lsls	r3, r3, #1
    c778:	9304      	str	r3, [sp, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
    c77a:	9b01      	ldr	r3, [sp, #4]
    c77c:	781b      	ldrb	r3, [r3, #0]
    c77e:	461a      	mov	r2, r3
    c780:	9b04      	ldr	r3, [sp, #16]
    c782:	4413      	add	r3, r2
    c784:	3b30      	subs	r3, #48	; 0x30
    c786:	9304      	str	r3, [sp, #16]
        pcStr++;
    c788:	9b01      	ldr	r3, [sp, #4]
    c78a:	3301      	adds	r3, #1
    c78c:	9301      	str	r3, [sp, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c78e:	9b01      	ldr	r3, [sp, #4]
    c790:	781b      	ldrb	r3, [r3, #0]
    c792:	2b2f      	cmp	r3, #47	; 0x2f
    c794:	d903      	bls.n	c79e <decstr_to_int+0x66>
    c796:	9b01      	ldr	r3, [sp, #4]
    c798:	781b      	ldrb	r3, [r3, #0]
    c79a:	2b39      	cmp	r3, #57	; 0x39
    c79c:	d9e4      	bls.n	c768 <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
    c79e:	9b00      	ldr	r3, [sp, #0]
    c7a0:	2b00      	cmp	r3, #0
    c7a2:	d002      	beq.n	c7aa <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
    c7a4:	9b00      	ldr	r3, [sp, #0]
    c7a6:	9a03      	ldr	r2, [sp, #12]
    c7a8:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
    c7aa:	f89d 3017 	ldrb.w	r3, [sp, #23]
    c7ae:	2b00      	cmp	r3, #0
    c7b0:	d002      	beq.n	c7b8 <decstr_to_int+0x80>
    c7b2:	9b04      	ldr	r3, [sp, #16]
    c7b4:	425b      	negs	r3, r3
    c7b6:	e000      	b.n	c7ba <decstr_to_int+0x82>
    c7b8:	9b04      	ldr	r3, [sp, #16]
}
    c7ba:	4618      	mov	r0, r3
    c7bc:	b006      	add	sp, #24
    c7be:	4770      	bx	lr

0000c7c0 <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    c7c0:	b500      	push	{lr}
    c7c2:	b091      	sub	sp, #68	; 0x44
    c7c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
    c7c8:	9201      	str	r2, [sp, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
    c7ca:	2300      	movs	r3, #0
    c7cc:	930f      	str	r3, [sp, #60]	; 0x3c
    c7ce:	2300      	movs	r3, #0
    c7d0:	930e      	str	r3, [sp, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
    c7d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    c7d6:	f7ff fe5d 	bl	c494 <divu64_10>
    c7da:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
    c7de:	9902      	ldr	r1, [sp, #8]
    c7e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c7e2:	4613      	mov	r3, r2
    c7e4:	009b      	lsls	r3, r3, #2
    c7e6:	4413      	add	r3, r2
    c7e8:	005b      	lsls	r3, r3, #1
    c7ea:	1acb      	subs	r3, r1, r3
    c7ec:	930b      	str	r3, [sp, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
    c7ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c7f0:	b2da      	uxtb	r2, r3
    c7f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c7f4:	1c59      	adds	r1, r3, #1
    c7f6:	910f      	str	r1, [sp, #60]	; 0x3c
    c7f8:	3230      	adds	r2, #48	; 0x30
    c7fa:	b2d2      	uxtb	r2, r2
    c7fc:	3340      	adds	r3, #64	; 0x40
    c7fe:	446b      	add	r3, sp
    c800:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
    c804:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    c808:	e9cd 2302 	strd	r2, r3, [sp, #8]
    } while ( ui64Val );
    c80c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c810:	4313      	orrs	r3, r2
    c812:	d1de      	bne.n	c7d2 <uint64_to_str+0x12>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    c814:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c816:	930e      	str	r3, [sp, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    c818:	9b01      	ldr	r3, [sp, #4]
    c81a:	2b00      	cmp	r3, #0
    c81c:	d010      	beq.n	c840 <uint64_to_str+0x80>
    {
        while ( ix-- )
    c81e:	e007      	b.n	c830 <uint64_to_str+0x70>
        {
            *pcBuf++ = tbuf[ix];
    c820:	9b01      	ldr	r3, [sp, #4]
    c822:	1c5a      	adds	r2, r3, #1
    c824:	9201      	str	r2, [sp, #4]
    c826:	a904      	add	r1, sp, #16
    c828:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    c82a:	440a      	add	r2, r1
    c82c:	7812      	ldrb	r2, [r2, #0]
    c82e:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
    c830:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c832:	1e5a      	subs	r2, r3, #1
    c834:	920f      	str	r2, [sp, #60]	; 0x3c
    c836:	2b00      	cmp	r3, #0
    c838:	d1f2      	bne.n	c820 <uint64_to_str+0x60>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
    c83a:	9b01      	ldr	r3, [sp, #4]
    c83c:	2200      	movs	r2, #0
    c83e:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    c840:	9b0e      	ldr	r3, [sp, #56]	; 0x38
}
    c842:	4618      	mov	r0, r3
    c844:	b011      	add	sp, #68	; 0x44
    c846:	f85d fb04 	ldr.w	pc, [sp], #4

0000c84a <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
    c84a:	b08c      	sub	sp, #48	; 0x30
    c84c:	e9cd 0102 	strd	r0, r1, [sp, #8]
    c850:	9201      	str	r2, [sp, #4]
    c852:	f88d 3003 	strb.w	r3, [sp, #3]
    int iNumDig, ix = 0;
    c856:	2300      	movs	r3, #0
    c858:	930b      	str	r3, [sp, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
    c85a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c85e:	4313      	orrs	r3, r2
    c860:	d135      	bne.n	c8ce <uint64_to_hexstr+0x84>
    {
        tbuf[ix++] = '0';   // Print a '0'
    c862:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c864:	1c5a      	adds	r2, r3, #1
    c866:	920b      	str	r2, [sp, #44]	; 0x2c
    c868:	3330      	adds	r3, #48	; 0x30
    c86a:	446b      	add	r3, sp
    c86c:	2230      	movs	r2, #48	; 0x30
    c86e:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
    c872:	e02c      	b.n	c8ce <uint64_to_hexstr+0x84>
    {
        cCh = ui64Val & 0xf;
    c874:	f89d 3008 	ldrb.w	r3, [sp, #8]
    c878:	f003 030f 	and.w	r3, r3, #15
    c87c:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
    c880:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    c884:	2b09      	cmp	r3, #9
    c886:	d90b      	bls.n	c8a0 <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
    c888:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c88c:	2b00      	cmp	r3, #0
    c88e:	d001      	beq.n	c894 <uint64_to_hexstr+0x4a>
    c890:	2227      	movs	r2, #39	; 0x27
    c892:	e000      	b.n	c896 <uint64_to_hexstr+0x4c>
    c894:	2207      	movs	r2, #7
    c896:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    c89a:	4413      	add	r3, r2
    c89c:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
    c8a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c8a2:	1c5a      	adds	r2, r3, #1
    c8a4:	920b      	str	r2, [sp, #44]	; 0x2c
    c8a6:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
    c8aa:	3230      	adds	r2, #48	; 0x30
    c8ac:	b2d2      	uxtb	r2, r2
    c8ae:	3330      	adds	r3, #48	; 0x30
    c8b0:	446b      	add	r3, sp
    c8b2:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
    c8b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    c8ba:	f04f 0200 	mov.w	r2, #0
    c8be:	f04f 0300 	mov.w	r3, #0
    c8c2:	0902      	lsrs	r2, r0, #4
    c8c4:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    c8c8:	090b      	lsrs	r3, r1, #4
    c8ca:	e9cd 2302 	strd	r2, r3, [sp, #8]
    while ( ui64Val )
    c8ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c8d2:	4313      	orrs	r3, r2
    c8d4:	d1ce      	bne.n	c874 <uint64_to_hexstr+0x2a>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    c8d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c8d8:	9309      	str	r3, [sp, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    c8da:	9b01      	ldr	r3, [sp, #4]
    c8dc:	2b00      	cmp	r3, #0
    c8de:	d010      	beq.n	c902 <uint64_to_hexstr+0xb8>
    {
        while (ix--)
    c8e0:	e007      	b.n	c8f2 <uint64_to_hexstr+0xa8>
        {
            *pcBuf++ = tbuf[ix];
    c8e2:	9b01      	ldr	r3, [sp, #4]
    c8e4:	1c5a      	adds	r2, r3, #1
    c8e6:	9201      	str	r2, [sp, #4]
    c8e8:	a904      	add	r1, sp, #16
    c8ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    c8ec:	440a      	add	r2, r1
    c8ee:	7812      	ldrb	r2, [r2, #0]
    c8f0:	701a      	strb	r2, [r3, #0]
        while (ix--)
    c8f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c8f4:	1e5a      	subs	r2, r3, #1
    c8f6:	920b      	str	r2, [sp, #44]	; 0x2c
    c8f8:	2b00      	cmp	r3, #0
    c8fa:	d1f2      	bne.n	c8e2 <uint64_to_hexstr+0x98>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
    c8fc:	9b01      	ldr	r3, [sp, #4]
    c8fe:	2200      	movs	r2, #0
    c900:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    c902:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    c904:	4618      	mov	r0, r3
    c906:	b00c      	add	sp, #48	; 0x30
    c908:	4770      	bx	lr

0000c90a <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
    c90a:	b084      	sub	sp, #16
    c90c:	9001      	str	r0, [sp, #4]
    uint32_t ui32RetVal = 0;
    c90e:	2300      	movs	r3, #0
    c910:	9303      	str	r3, [sp, #12]
    if ( !pcBuf )
    c912:	9b01      	ldr	r3, [sp, #4]
    c914:	2b00      	cmp	r3, #0
    c916:	d104      	bne.n	c922 <simple_strlen+0x18>
    {
        return ui32RetVal;
    c918:	9b03      	ldr	r3, [sp, #12]
    c91a:	e009      	b.n	c930 <simple_strlen+0x26>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
    c91c:	9b03      	ldr	r3, [sp, #12]
    c91e:	3301      	adds	r3, #1
    c920:	9303      	str	r3, [sp, #12]
    while ( *pcBuf++ )
    c922:	9b01      	ldr	r3, [sp, #4]
    c924:	1c5a      	adds	r2, r3, #1
    c926:	9201      	str	r2, [sp, #4]
    c928:	781b      	ldrb	r3, [r3, #0]
    c92a:	2b00      	cmp	r3, #0
    c92c:	d1f6      	bne.n	c91c <simple_strlen+0x12>
    }
    return ui32RetVal;
    c92e:	9b03      	ldr	r3, [sp, #12]
}
    c930:	4618      	mov	r0, r3
    c932:	b004      	add	sp, #16
    c934:	4770      	bx	lr

0000c936 <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
    c936:	b086      	sub	sp, #24
    c938:	9003      	str	r0, [sp, #12]
    c93a:	460b      	mov	r3, r1
    c93c:	9201      	str	r2, [sp, #4]
    c93e:	f88d 300b 	strb.w	r3, [sp, #11]
    int32_t i32Cnt = 0;
    c942:	2300      	movs	r3, #0
    c944:	9305      	str	r3, [sp, #20]

    if ( i32NumChars <= 0 )
    c946:	9b01      	ldr	r3, [sp, #4]
    c948:	2b00      	cmp	r3, #0
    c94a:	dc0d      	bgt.n	c968 <padbuffer+0x32>
    {
        return i32Cnt;
    c94c:	9b05      	ldr	r3, [sp, #20]
    c94e:	e011      	b.n	c974 <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    c950:	9b03      	ldr	r3, [sp, #12]
    c952:	2b00      	cmp	r3, #0
    c954:	d005      	beq.n	c962 <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
    c956:	9b03      	ldr	r3, [sp, #12]
    c958:	1c5a      	adds	r2, r3, #1
    c95a:	9203      	str	r2, [sp, #12]
    c95c:	f89d 200b 	ldrb.w	r2, [sp, #11]
    c960:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
    c962:	9b05      	ldr	r3, [sp, #20]
    c964:	3301      	adds	r3, #1
    c966:	9305      	str	r3, [sp, #20]
    while ( i32NumChars-- )
    c968:	9b01      	ldr	r3, [sp, #4]
    c96a:	1e5a      	subs	r2, r3, #1
    c96c:	9201      	str	r2, [sp, #4]
    c96e:	2b00      	cmp	r3, #0
    c970:	d1ee      	bne.n	c950 <padbuffer+0x1a>
    }

    return i32Cnt;
    c972:	9b05      	ldr	r3, [sp, #20]
}
    c974:	4618      	mov	r0, r3
    c976:	b006      	add	sp, #24
    c978:	4770      	bx	lr
	...

0000c97c <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
    c97c:	b5f0      	push	{r4, r5, r6, r7, lr}
    c97e:	b08f      	sub	sp, #60	; 0x3c
    c980:	ed8d 0a03 	vstr	s0, [sp, #12]
    c984:	9002      	str	r0, [sp, #8]
    c986:	9101      	str	r1, [sp, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
    c988:	9b02      	ldr	r3, [sp, #8]
    c98a:	681b      	ldr	r3, [r3, #0]
    c98c:	9309      	str	r3, [sp, #36]	; 0x24
    if (iBufSize < 4)
    c98e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c990:	2b03      	cmp	r3, #3
    c992:	dc02      	bgt.n	c99a <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
    c994:	f06f 0302 	mvn.w	r3, #2
    c998:	e0e9      	b.n	cb6e <ftoa+0x1f2>
    }

    if (fValue == 0.0f)
    c99a:	eddd 7a03 	vldr	s15, [sp, #12]
    c99e:	eef5 7a40 	vcmp.f32	s15, #0.0
    c9a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c9a6:	d104      	bne.n	c9b2 <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    c9a8:	9b02      	ldr	r3, [sp, #8]
    c9aa:	4a72      	ldr	r2, [pc, #456]	; (cb74 <ftoa+0x1f8>)
    c9ac:	601a      	str	r2, [r3, #0]
        return 3;
    c9ae:	2303      	movs	r3, #3
    c9b0:	e0dd      	b.n	cb6e <ftoa+0x1f2>
    }

    pcBufInitial = pcBuf;
    c9b2:	9b02      	ldr	r3, [sp, #8]
    c9b4:	9308      	str	r3, [sp, #32]

    unFloatValue.F = fValue;
    c9b6:	9b03      	ldr	r3, [sp, #12]
    c9b8:	9304      	str	r3, [sp, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    c9ba:	9b04      	ldr	r3, [sp, #16]
    c9bc:	15db      	asrs	r3, r3, #23
    c9be:	b2db      	uxtb	r3, r3
    c9c0:	3b7f      	subs	r3, #127	; 0x7f
    c9c2:	9307      	str	r3, [sp, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    c9c4:	9b04      	ldr	r3, [sp, #16]
    c9c6:	f3c3 0316 	ubfx	r3, r3, #0, #23
    c9ca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    c9ce:	9306      	str	r3, [sp, #24]
    i32FracPart = 0;
    c9d0:	2300      	movs	r3, #0
    c9d2:	930c      	str	r3, [sp, #48]	; 0x30
    i32IntPart = 0;
    c9d4:	2300      	movs	r3, #0
    c9d6:	930d      	str	r3, [sp, #52]	; 0x34

    if (iExp2 >= 31)
    c9d8:	9b07      	ldr	r3, [sp, #28]
    c9da:	2b1e      	cmp	r3, #30
    c9dc:	dd02      	ble.n	c9e4 <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
    c9de:	f06f 0301 	mvn.w	r3, #1
    c9e2:	e0c4      	b.n	cb6e <ftoa+0x1f2>
    }
    else if (iExp2 < -23)
    c9e4:	9b07      	ldr	r3, [sp, #28]
    c9e6:	f113 0f17 	cmn.w	r3, #23
    c9ea:	da02      	bge.n	c9f2 <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
    c9ec:	f04f 33ff 	mov.w	r3, #4294967295
    c9f0:	e0bd      	b.n	cb6e <ftoa+0x1f2>
    }
    else if (iExp2 >= 23)
    c9f2:	9b07      	ldr	r3, [sp, #28]
    c9f4:	2b16      	cmp	r3, #22
    c9f6:	dd06      	ble.n	ca06 <ftoa+0x8a>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
    c9f8:	9b07      	ldr	r3, [sp, #28]
    c9fa:	3b17      	subs	r3, #23
    c9fc:	9a06      	ldr	r2, [sp, #24]
    c9fe:	fa02 f303 	lsl.w	r3, r2, r3
    ca02:	930d      	str	r3, [sp, #52]	; 0x34
    ca04:	e01a      	b.n	ca3c <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
    ca06:	9b07      	ldr	r3, [sp, #28]
    ca08:	2b00      	cmp	r3, #0
    ca0a:	db0f      	blt.n	ca2c <ftoa+0xb0>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
    ca0c:	9b07      	ldr	r3, [sp, #28]
    ca0e:	f1c3 0317 	rsb	r3, r3, #23
    ca12:	9a06      	ldr	r2, [sp, #24]
    ca14:	fa42 f303 	asr.w	r3, r2, r3
    ca18:	930d      	str	r3, [sp, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    ca1a:	9b07      	ldr	r3, [sp, #28]
    ca1c:	3301      	adds	r3, #1
    ca1e:	9a06      	ldr	r2, [sp, #24]
    ca20:	fa02 f303 	lsl.w	r3, r2, r3
    ca24:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    ca28:	930c      	str	r3, [sp, #48]	; 0x30
    ca2a:	e007      	b.n	ca3c <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    ca2c:	9b06      	ldr	r3, [sp, #24]
    ca2e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
    ca32:	9b07      	ldr	r3, [sp, #28]
    ca34:	43db      	mvns	r3, r3
    ca36:	fa42 f303 	asr.w	r3, r2, r3
    ca3a:	930c      	str	r3, [sp, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
    ca3c:	9b04      	ldr	r3, [sp, #16]
    ca3e:	2b00      	cmp	r3, #0
    ca40:	da04      	bge.n	ca4c <ftoa+0xd0>
    {
        *pcBuf++ = '-';
    ca42:	9b02      	ldr	r3, [sp, #8]
    ca44:	1c5a      	adds	r2, r3, #1
    ca46:	9202      	str	r2, [sp, #8]
    ca48:	222d      	movs	r2, #45	; 0x2d
    ca4a:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
    ca4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ca4e:	2b00      	cmp	r3, #0
    ca50:	d105      	bne.n	ca5e <ftoa+0xe2>
    {
        *pcBuf++ = '0';
    ca52:	9b02      	ldr	r3, [sp, #8]
    ca54:	1c5a      	adds	r2, r3, #1
    ca56:	9202      	str	r2, [sp, #8]
    ca58:	2230      	movs	r2, #48	; 0x30
    ca5a:	701a      	strb	r2, [r3, #0]
    ca5c:	e023      	b.n	caa6 <ftoa+0x12a>
    }
    else
    {
        if (i32IntPart > 0)
    ca5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ca60:	2b00      	cmp	r3, #0
    ca62:	dd09      	ble.n	ca78 <ftoa+0xfc>
        {
            uint64_to_str(i32IntPart, pcBuf);
    ca64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ca66:	17da      	asrs	r2, r3, #31
    ca68:	461e      	mov	r6, r3
    ca6a:	4617      	mov	r7, r2
    ca6c:	9a02      	ldr	r2, [sp, #8]
    ca6e:	4630      	mov	r0, r6
    ca70:	4639      	mov	r1, r7
    ca72:	f7ff fea5 	bl	c7c0 <uint64_to_str>
    ca76:	e012      	b.n	ca9e <ftoa+0x122>
        }
        else
        {
            *pcBuf++ = '-';
    ca78:	9b02      	ldr	r3, [sp, #8]
    ca7a:	1c5a      	adds	r2, r3, #1
    ca7c:	9202      	str	r2, [sp, #8]
    ca7e:	222d      	movs	r2, #45	; 0x2d
    ca80:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
    ca82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ca84:	425b      	negs	r3, r3
    ca86:	17da      	asrs	r2, r3, #31
    ca88:	461c      	mov	r4, r3
    ca8a:	4615      	mov	r5, r2
    ca8c:	9a02      	ldr	r2, [sp, #8]
    ca8e:	4620      	mov	r0, r4
    ca90:	4629      	mov	r1, r5
    ca92:	f7ff fe95 	bl	c7c0 <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
    ca96:	e002      	b.n	ca9e <ftoa+0x122>
        {
            pcBuf++;
    ca98:	9b02      	ldr	r3, [sp, #8]
    ca9a:	3301      	adds	r3, #1
    ca9c:	9302      	str	r3, [sp, #8]
        while (*pcBuf)    // Get to end of new string
    ca9e:	9b02      	ldr	r3, [sp, #8]
    caa0:	781b      	ldrb	r3, [r3, #0]
    caa2:	2b00      	cmp	r3, #0
    caa4:	d1f8      	bne.n	ca98 <ftoa+0x11c>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
    caa6:	9b02      	ldr	r3, [sp, #8]
    caa8:	1c5a      	adds	r2, r3, #1
    caaa:	9202      	str	r2, [sp, #8]
    caac:	222e      	movs	r2, #46	; 0x2e
    caae:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
    cab0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cab2:	2b00      	cmp	r3, #0
    cab4:	d105      	bne.n	cac2 <ftoa+0x146>
    {
        *pcBuf++ = '0';
    cab6:	9b02      	ldr	r3, [sp, #8]
    cab8:	1c5a      	adds	r2, r3, #1
    caba:	9202      	str	r2, [sp, #8]
    cabc:	2230      	movs	r2, #48	; 0x30
    cabe:	701a      	strb	r2, [r3, #0]
    cac0:	e04f      	b.n	cb62 <ftoa+0x1e6>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    cac2:	9a02      	ldr	r2, [sp, #8]
    cac4:	9b08      	ldr	r3, [sp, #32]
    cac6:	1ad3      	subs	r3, r2, r3
    cac8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    caca:	1ad3      	subs	r3, r2, r3
    cacc:	3b01      	subs	r3, #1
    cace:	9305      	str	r3, [sp, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    cad0:	9a05      	ldr	r2, [sp, #20]
    cad2:	9b01      	ldr	r3, [sp, #4]
    cad4:	4293      	cmp	r3, r2
    cad6:	bfa8      	it	ge
    cad8:	4613      	movge	r3, r2
    cada:	9305      	str	r3, [sp, #20]

        for (jx = 0; jx < iMax; jx++)
    cadc:	2300      	movs	r3, #0
    cade:	930a      	str	r3, [sp, #40]	; 0x28
    cae0:	e015      	b.n	cb0e <ftoa+0x192>
        {
            i32FracPart *= 10;
    cae2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    cae4:	4613      	mov	r3, r2
    cae6:	009b      	lsls	r3, r3, #2
    cae8:	4413      	add	r3, r2
    caea:	005b      	lsls	r3, r3, #1
    caec:	930c      	str	r3, [sp, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
    caee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    caf0:	161b      	asrs	r3, r3, #24
    caf2:	b2da      	uxtb	r2, r3
    caf4:	9b02      	ldr	r3, [sp, #8]
    caf6:	1c59      	adds	r1, r3, #1
    caf8:	9102      	str	r1, [sp, #8]
    cafa:	3230      	adds	r2, #48	; 0x30
    cafc:	b2d2      	uxtb	r2, r2
    cafe:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
    cb00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cb02:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    cb06:	930c      	str	r3, [sp, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
    cb08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cb0a:	3301      	adds	r3, #1
    cb0c:	930a      	str	r3, [sp, #40]	; 0x28
    cb0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    cb10:	9b05      	ldr	r3, [sp, #20]
    cb12:	429a      	cmp	r2, r3
    cb14:	dbe5      	blt.n	cae2 <ftoa+0x166>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    cb16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    cb18:	4613      	mov	r3, r2
    cb1a:	009b      	lsls	r3, r3, #2
    cb1c:	4413      	add	r3, r2
    cb1e:	005b      	lsls	r3, r3, #1
    cb20:	161b      	asrs	r3, r3, #24
    cb22:	2b04      	cmp	r3, #4
    cb24:	dd1d      	ble.n	cb62 <ftoa+0x1e6>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
    cb26:	9b02      	ldr	r3, [sp, #8]
    cb28:	3b01      	subs	r3, #1
    cb2a:	930b      	str	r3, [sp, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    cb2c:	e015      	b.n	cb5a <ftoa+0x1de>
            {
                if ( *pcBuftmp == '.' )
    cb2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cb30:	781b      	ldrb	r3, [r3, #0]
    cb32:	2b2e      	cmp	r3, #46	; 0x2e
    cb34:	d00e      	beq.n	cb54 <ftoa+0x1d8>
                {
                }
                else if ( *pcBuftmp == '9' )
    cb36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cb38:	781b      	ldrb	r3, [r3, #0]
    cb3a:	2b39      	cmp	r3, #57	; 0x39
    cb3c:	d103      	bne.n	cb46 <ftoa+0x1ca>
                {
                    *pcBuftmp = '0';
    cb3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cb40:	2230      	movs	r2, #48	; 0x30
    cb42:	701a      	strb	r2, [r3, #0]
    cb44:	e006      	b.n	cb54 <ftoa+0x1d8>
                }
                else
                {
                    *pcBuftmp += 1;
    cb46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cb48:	781b      	ldrb	r3, [r3, #0]
    cb4a:	3301      	adds	r3, #1
    cb4c:	b2da      	uxtb	r2, r3
    cb4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cb50:	701a      	strb	r2, [r3, #0]
                    break;
    cb52:	e006      	b.n	cb62 <ftoa+0x1e6>
                }
                pcBuftmp--;
    cb54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cb56:	3b01      	subs	r3, #1
    cb58:	930b      	str	r3, [sp, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    cb5a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    cb5c:	9b08      	ldr	r3, [sp, #32]
    cb5e:	429a      	cmp	r2, r3
    cb60:	d2e5      	bcs.n	cb2e <ftoa+0x1b2>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
    cb62:	9b02      	ldr	r3, [sp, #8]
    cb64:	2200      	movs	r2, #0
    cb66:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
    cb68:	9a02      	ldr	r2, [sp, #8]
    cb6a:	9b08      	ldr	r3, [sp, #32]
    cb6c:	1ad3      	subs	r3, r2, r3
} // ftoa()
    cb6e:	4618      	mov	r0, r3
    cb70:	b00f      	add	sp, #60	; 0x3c
    cb72:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cb74:	00302e30 	.word	0x00302e30

0000cb78 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    cb78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cb7c:	b097      	sub	sp, #92	; 0x5c
    cb7e:	9003      	str	r0, [sp, #12]
    cb80:	9102      	str	r1, [sp, #8]
    cb82:	9201      	str	r2, [sp, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
    cb84:	2300      	movs	r3, #0
    cb86:	9311      	str	r3, [sp, #68]	; 0x44
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
    cb88:	2300      	movs	r3, #0
    cb8a:	930b      	str	r3, [sp, #44]	; 0x2c

    while ( *pcFmt != 0x0 )
    cb8c:	e2e9      	b.n	d162 <am_util_stdio_vsprintf+0x5ea>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
    cb8e:	2306      	movs	r3, #6
    cb90:	930e      	str	r3, [sp, #56]	; 0x38

        if ( *pcFmt != '%' )
    cb92:	9b02      	ldr	r3, [sp, #8]
    cb94:	781b      	ldrb	r3, [r3, #0]
    cb96:	2b25      	cmp	r3, #37	; 0x25
    cb98:	d01f      	beq.n	cbda <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    cb9a:	9b03      	ldr	r3, [sp, #12]
    cb9c:	2b00      	cmp	r3, #0
    cb9e:	d015      	beq.n	cbcc <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    cba0:	9b02      	ldr	r3, [sp, #8]
    cba2:	781b      	ldrb	r3, [r3, #0]
    cba4:	2b0a      	cmp	r3, #10
    cba6:	d10b      	bne.n	cbc0 <am_util_stdio_vsprintf+0x48>
    cba8:	4ba8      	ldr	r3, [pc, #672]	; (ce4c <am_util_stdio_vsprintf+0x2d4>)
    cbaa:	781b      	ldrb	r3, [r3, #0]
    cbac:	2b00      	cmp	r3, #0
    cbae:	d007      	beq.n	cbc0 <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
    cbb0:	9b03      	ldr	r3, [sp, #12]
    cbb2:	1c5a      	adds	r2, r3, #1
    cbb4:	9203      	str	r2, [sp, #12]
    cbb6:	220d      	movs	r2, #13
    cbb8:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
    cbba:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cbbc:	3301      	adds	r3, #1
    cbbe:	9311      	str	r3, [sp, #68]	; 0x44
                }
                *pcBuf++ = *pcFmt;
    cbc0:	9b03      	ldr	r3, [sp, #12]
    cbc2:	1c5a      	adds	r2, r3, #1
    cbc4:	9203      	str	r2, [sp, #12]
    cbc6:	9a02      	ldr	r2, [sp, #8]
    cbc8:	7812      	ldrb	r2, [r2, #0]
    cbca:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
    cbcc:	9b02      	ldr	r3, [sp, #8]
    cbce:	3301      	adds	r3, #1
    cbd0:	9302      	str	r3, [sp, #8]
            ++ui32CharCnt;
    cbd2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cbd4:	3301      	adds	r3, #1
    cbd6:	9311      	str	r3, [sp, #68]	; 0x44
            continue;
    cbd8:	e2c3      	b.n	d162 <am_util_stdio_vsprintf+0x5ea>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
    cbda:	9b02      	ldr	r3, [sp, #8]
    cbdc:	3301      	adds	r3, #1
    cbde:	9302      	str	r3, [sp, #8]
        bLower = bLongLong = false;
    cbe0:	2300      	movs	r3, #0
    cbe2:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
    cbe6:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    cbea:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
    cbee:	2320      	movs	r3, #32
    cbf0:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37

        if ( *pcFmt == '0' )
    cbf4:	9b02      	ldr	r3, [sp, #8]
    cbf6:	781b      	ldrb	r3, [r3, #0]
    cbf8:	2b30      	cmp	r3, #48	; 0x30
    cbfa:	d105      	bne.n	cc08 <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
    cbfc:	2330      	movs	r3, #48	; 0x30
    cbfe:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
            ++pcFmt;
    cc02:	9b02      	ldr	r3, [sp, #8]
    cc04:	3301      	adds	r3, #1
    cc06:	9302      	str	r3, [sp, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    cc08:	ab05      	add	r3, sp, #20
    cc0a:	4619      	mov	r1, r3
    cc0c:	9802      	ldr	r0, [sp, #8]
    cc0e:	f7ff fd93 	bl	c738 <decstr_to_int>
    cc12:	4603      	mov	r3, r0
    cc14:	9310      	str	r3, [sp, #64]	; 0x40
        pcFmt += ui32NumChars;
    cc16:	9b05      	ldr	r3, [sp, #20]
    cc18:	9a02      	ldr	r2, [sp, #8]
    cc1a:	4413      	add	r3, r2
    cc1c:	9302      	str	r3, [sp, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    cc1e:	9b02      	ldr	r3, [sp, #8]
    cc20:	781b      	ldrb	r3, [r3, #0]
    cc22:	2b73      	cmp	r3, #115	; 0x73
    cc24:	d005      	beq.n	cc32 <am_util_stdio_vsprintf+0xba>
    cc26:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cc28:	2b00      	cmp	r3, #0
    cc2a:	da02      	bge.n	cc32 <am_util_stdio_vsprintf+0xba>
        {
            iWidth = -iWidth;
    cc2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cc2e:	425b      	negs	r3, r3
    cc30:	9310      	str	r3, [sp, #64]	; 0x40
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
    cc32:	9b02      	ldr	r3, [sp, #8]
    cc34:	781b      	ldrb	r3, [r3, #0]
    cc36:	2b2e      	cmp	r3, #46	; 0x2e
    cc38:	d10d      	bne.n	cc56 <am_util_stdio_vsprintf+0xde>
        {
            ++pcFmt;
    cc3a:	9b02      	ldr	r3, [sp, #8]
    cc3c:	3301      	adds	r3, #1
    cc3e:	9302      	str	r3, [sp, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
    cc40:	ab05      	add	r3, sp, #20
    cc42:	4619      	mov	r1, r3
    cc44:	9802      	ldr	r0, [sp, #8]
    cc46:	f7ff fd77 	bl	c738 <decstr_to_int>
    cc4a:	4603      	mov	r3, r0
    cc4c:	930e      	str	r3, [sp, #56]	; 0x38
            pcFmt += ui32NumChars;
    cc4e:	9b05      	ldr	r3, [sp, #20]
    cc50:	9a02      	ldr	r2, [sp, #8]
    cc52:	4413      	add	r3, r2
    cc54:	9302      	str	r3, [sp, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
    cc56:	9b02      	ldr	r3, [sp, #8]
    cc58:	781b      	ldrb	r3, [r3, #0]
    cc5a:	2b6c      	cmp	r3, #108	; 0x6c
    cc5c:	d10c      	bne.n	cc78 <am_util_stdio_vsprintf+0x100>
        {
            pcFmt++;
    cc5e:	9b02      	ldr	r3, [sp, #8]
    cc60:	3301      	adds	r3, #1
    cc62:	9302      	str	r3, [sp, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
    cc64:	9b02      	ldr	r3, [sp, #8]
    cc66:	781b      	ldrb	r3, [r3, #0]
    cc68:	2b6c      	cmp	r3, #108	; 0x6c
    cc6a:	d105      	bne.n	cc78 <am_util_stdio_vsprintf+0x100>
            {
                pcFmt++;
    cc6c:	9b02      	ldr	r3, [sp, #8]
    cc6e:	3301      	adds	r3, #1
    cc70:	9302      	str	r3, [sp, #8]
                bLongLong = true;
    cc72:	2301      	movs	r3, #1
    cc74:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
            }
        }

        switch ( *pcFmt )
    cc78:	9b02      	ldr	r3, [sp, #8]
    cc7a:	781b      	ldrb	r3, [r3, #0]
    cc7c:	3b46      	subs	r3, #70	; 0x46
    cc7e:	2b32      	cmp	r3, #50	; 0x32
    cc80:	f200 825c 	bhi.w	d13c <am_util_stdio_vsprintf+0x5c4>
    cc84:	a201      	add	r2, pc, #4	; (adr r2, cc8c <am_util_stdio_vsprintf+0x114>)
    cc86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    cc8a:	bf00      	nop
    cc8c:	0000d0c3 	.word	0x0000d0c3
    cc90:	0000d13d 	.word	0x0000d13d
    cc94:	0000d13d 	.word	0x0000d13d
    cc98:	0000d13d 	.word	0x0000d13d
    cc9c:	0000d13d 	.word	0x0000d13d
    cca0:	0000d13d 	.word	0x0000d13d
    cca4:	0000d13d 	.word	0x0000d13d
    cca8:	0000d13d 	.word	0x0000d13d
    ccac:	0000d13d 	.word	0x0000d13d
    ccb0:	0000d13d 	.word	0x0000d13d
    ccb4:	0000d13d 	.word	0x0000d13d
    ccb8:	0000d13d 	.word	0x0000d13d
    ccbc:	0000d13d 	.word	0x0000d13d
    ccc0:	0000d13d 	.word	0x0000d13d
    ccc4:	0000d13d 	.word	0x0000d13d
    ccc8:	0000d13d 	.word	0x0000d13d
    cccc:	0000d13d 	.word	0x0000d13d
    ccd0:	0000d13d 	.word	0x0000d13d
    ccd4:	0000ce57 	.word	0x0000ce57
    ccd8:	0000d13d 	.word	0x0000d13d
    ccdc:	0000d13d 	.word	0x0000d13d
    cce0:	0000d13d 	.word	0x0000d13d
    cce4:	0000d13d 	.word	0x0000d13d
    cce8:	0000d13d 	.word	0x0000d13d
    ccec:	0000d13d 	.word	0x0000d13d
    ccf0:	0000d13d 	.word	0x0000d13d
    ccf4:	0000d13d 	.word	0x0000d13d
    ccf8:	0000d13d 	.word	0x0000d13d
    ccfc:	0000d13d 	.word	0x0000d13d
    cd00:	0000cd59 	.word	0x0000cd59
    cd04:	0000cf87 	.word	0x0000cf87
    cd08:	0000d13d 	.word	0x0000d13d
    cd0c:	0000d0c3 	.word	0x0000d0c3
    cd10:	0000d13d 	.word	0x0000d13d
    cd14:	0000d13d 	.word	0x0000d13d
    cd18:	0000cf87 	.word	0x0000cf87
    cd1c:	0000d13d 	.word	0x0000d13d
    cd20:	0000d13d 	.word	0x0000d13d
    cd24:	0000d13d 	.word	0x0000d13d
    cd28:	0000d13d 	.word	0x0000d13d
    cd2c:	0000d13d 	.word	0x0000d13d
    cd30:	0000d13d 	.word	0x0000d13d
    cd34:	0000d13d 	.word	0x0000d13d
    cd38:	0000d13d 	.word	0x0000d13d
    cd3c:	0000d13d 	.word	0x0000d13d
    cd40:	0000cd7f 	.word	0x0000cd7f
    cd44:	0000d13d 	.word	0x0000d13d
    cd48:	0000cef1 	.word	0x0000cef1
    cd4c:	0000d13d 	.word	0x0000d13d
    cd50:	0000d13d 	.word	0x0000d13d
    cd54:	0000ce51 	.word	0x0000ce51
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    cd58:	9b01      	ldr	r3, [sp, #4]
    cd5a:	1d1a      	adds	r2, r3, #4
    cd5c:	9201      	str	r2, [sp, #4]
    cd5e:	681b      	ldr	r3, [r3, #0]
    cd60:	f88d 301f 	strb.w	r3, [sp, #31]

                if ( pcBuf )
    cd64:	9b03      	ldr	r3, [sp, #12]
    cd66:	2b00      	cmp	r3, #0
    cd68:	d005      	beq.n	cd76 <am_util_stdio_vsprintf+0x1fe>
                {
                    *pcBuf++ = ui8CharSpecifier;
    cd6a:	9b03      	ldr	r3, [sp, #12]
    cd6c:	1c5a      	adds	r2, r3, #1
    cd6e:	9203      	str	r2, [sp, #12]
    cd70:	f89d 201f 	ldrb.w	r2, [sp, #31]
    cd74:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    cd76:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cd78:	3301      	adds	r3, #1
    cd7a:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    cd7c:	e1ee      	b.n	d15c <am_util_stdio_vsprintf+0x5e4>

            case 's':
                pcStr = va_arg(pArgs, char *);
    cd7e:	9b01      	ldr	r3, [sp, #4]
    cd80:	1d1a      	adds	r2, r3, #4
    cd82:	9201      	str	r2, [sp, #4]
    cd84:	681b      	ldr	r3, [r3, #0]
    cd86:	9315      	str	r3, [sp, #84]	; 0x54
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
    cd88:	9815      	ldr	r0, [sp, #84]	; 0x54
    cd8a:	f7ff fdbe 	bl	c90a <simple_strlen>
    cd8e:	900b      	str	r0, [sp, #44]	; 0x2c
                if ( iWidth > 0 )
    cd90:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cd92:	2b00      	cmp	r3, #0
    cd94:	dd2e      	ble.n	cdf4 <am_util_stdio_vsprintf+0x27c>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
    cd96:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cd98:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    cd9a:	429a      	cmp	r2, r3
    cd9c:	d22a      	bcs.n	cdf4 <am_util_stdio_vsprintf+0x27c>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    cd9e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    cda0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cda2:	1ad3      	subs	r3, r2, r3
    cda4:	9310      	str	r3, [sp, #64]	; 0x40
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    cda6:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    cdaa:	9a10      	ldr	r2, [sp, #64]	; 0x40
    cdac:	4619      	mov	r1, r3
    cdae:	9803      	ldr	r0, [sp, #12]
    cdb0:	f7ff fdc1 	bl	c936 <padbuffer>
    cdb4:	9010      	str	r0, [sp, #64]	; 0x40
                        pcBuf += pcBuf ? iWidth : 0;
    cdb6:	9b03      	ldr	r3, [sp, #12]
    cdb8:	2b00      	cmp	r3, #0
    cdba:	d001      	beq.n	cdc0 <am_util_stdio_vsprintf+0x248>
    cdbc:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cdbe:	e000      	b.n	cdc2 <am_util_stdio_vsprintf+0x24a>
    cdc0:	2300      	movs	r3, #0
    cdc2:	9a03      	ldr	r2, [sp, #12]
    cdc4:	4413      	add	r3, r2
    cdc6:	9303      	str	r3, [sp, #12]
                        ui32CharCnt += iWidth;
    cdc8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cdca:	9a11      	ldr	r2, [sp, #68]	; 0x44
    cdcc:	4413      	add	r3, r2
    cdce:	9311      	str	r3, [sp, #68]	; 0x44
                        iWidth = 0;
    cdd0:	2300      	movs	r3, #0
    cdd2:	9310      	str	r3, [sp, #64]	; 0x40
                    }
                }

                while (*pcStr != 0x0)
    cdd4:	e00e      	b.n	cdf4 <am_util_stdio_vsprintf+0x27c>
                {
                    if ( pcBuf )
    cdd6:	9b03      	ldr	r3, [sp, #12]
    cdd8:	2b00      	cmp	r3, #0
    cdda:	d005      	beq.n	cde8 <am_util_stdio_vsprintf+0x270>
                    {
                        *pcBuf++ = *pcStr;
    cddc:	9b03      	ldr	r3, [sp, #12]
    cdde:	1c5a      	adds	r2, r3, #1
    cde0:	9203      	str	r2, [sp, #12]
    cde2:	9a15      	ldr	r2, [sp, #84]	; 0x54
    cde4:	7812      	ldrb	r2, [r2, #0]
    cde6:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
    cde8:	9b15      	ldr	r3, [sp, #84]	; 0x54
    cdea:	3301      	adds	r3, #1
    cdec:	9315      	str	r3, [sp, #84]	; 0x54
                    ++ui32CharCnt;
    cdee:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cdf0:	3301      	adds	r3, #1
    cdf2:	9311      	str	r3, [sp, #68]	; 0x44
                while (*pcStr != 0x0)
    cdf4:	9b15      	ldr	r3, [sp, #84]	; 0x54
    cdf6:	781b      	ldrb	r3, [r3, #0]
    cdf8:	2b00      	cmp	r3, #0
    cdfa:	d1ec      	bne.n	cdd6 <am_util_stdio_vsprintf+0x25e>
                }

                if ( iWidth )
    cdfc:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cdfe:	2b00      	cmp	r3, #0
    ce00:	f000 81a9 	beq.w	d156 <am_util_stdio_vsprintf+0x5de>
                {
                    iWidth = -iWidth;
    ce04:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ce06:	425b      	negs	r3, r3
    ce08:	9310      	str	r3, [sp, #64]	; 0x40

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
    ce0a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ce0c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    ce0e:	429a      	cmp	r2, r3
    ce10:	f080 81a1 	bcs.w	d156 <am_util_stdio_vsprintf+0x5de>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    ce14:	9a10      	ldr	r2, [sp, #64]	; 0x40
    ce16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ce18:	1ad3      	subs	r3, r2, r3
    ce1a:	9310      	str	r3, [sp, #64]	; 0x40
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    ce1c:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    ce20:	9a10      	ldr	r2, [sp, #64]	; 0x40
    ce22:	4619      	mov	r1, r3
    ce24:	9803      	ldr	r0, [sp, #12]
    ce26:	f7ff fd86 	bl	c936 <padbuffer>
    ce2a:	9010      	str	r0, [sp, #64]	; 0x40
                        pcBuf += pcBuf ? iWidth : 0;
    ce2c:	9b03      	ldr	r3, [sp, #12]
    ce2e:	2b00      	cmp	r3, #0
    ce30:	d001      	beq.n	ce36 <am_util_stdio_vsprintf+0x2be>
    ce32:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ce34:	e000      	b.n	ce38 <am_util_stdio_vsprintf+0x2c0>
    ce36:	2300      	movs	r3, #0
    ce38:	9a03      	ldr	r2, [sp, #12]
    ce3a:	4413      	add	r3, r2
    ce3c:	9303      	str	r3, [sp, #12]
                        ui32CharCnt += iWidth;
    ce3e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ce40:	9a11      	ldr	r2, [sp, #68]	; 0x44
    ce42:	4413      	add	r3, r2
    ce44:	9311      	str	r3, [sp, #68]	; 0x44
                        iWidth = 0;
    ce46:	2300      	movs	r3, #0
    ce48:	9310      	str	r3, [sp, #64]	; 0x40
                    }
                }
                break;
    ce4a:	e184      	b.n	d156 <am_util_stdio_vsprintf+0x5de>
    ce4c:	10001148 	.word	0x10001148

            case 'x':
                bLower = true;
    ce50:	2301      	movs	r3, #1
    ce52:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    ce56:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    ce5a:	2b00      	cmp	r3, #0
    ce5c:	d009      	beq.n	ce72 <am_util_stdio_vsprintf+0x2fa>
    ce5e:	9b01      	ldr	r3, [sp, #4]
    ce60:	3307      	adds	r3, #7
    ce62:	f023 0307 	bic.w	r3, r3, #7
    ce66:	f103 0208 	add.w	r2, r3, #8
    ce6a:	9201      	str	r2, [sp, #4]
    ce6c:	e9d3 4500 	ldrd	r4, r5, [r3]
    ce70:	e006      	b.n	ce80 <am_util_stdio_vsprintf+0x308>
                                      va_arg(pArgs, uint32_t);
    ce72:	9b01      	ldr	r3, [sp, #4]
    ce74:	1d1a      	adds	r2, r3, #4
    ce76:	9201      	str	r2, [sp, #4]
    ce78:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    ce7a:	2200      	movs	r2, #0
    ce7c:	461c      	mov	r4, r3
    ce7e:	4615      	mov	r5, r2
    ce80:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48

                if ( iWidth )
    ce84:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ce86:	2b00      	cmp	r3, #0
    ce88:	d01e      	beq.n	cec8 <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
    ce8a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    ce8e:	f7ff fc2f 	bl	c6f0 <ndigits_in_hex>
    ce92:	4602      	mov	r2, r0
    ce94:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ce96:	1a9b      	subs	r3, r3, r2
    ce98:	9310      	str	r3, [sp, #64]	; 0x40

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    ce9a:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    ce9e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    cea0:	4619      	mov	r1, r3
    cea2:	9803      	ldr	r0, [sp, #12]
    cea4:	f7ff fd47 	bl	c936 <padbuffer>
    cea8:	9010      	str	r0, [sp, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    ceaa:	9b03      	ldr	r3, [sp, #12]
    ceac:	2b00      	cmp	r3, #0
    ceae:	d001      	beq.n	ceb4 <am_util_stdio_vsprintf+0x33c>
    ceb0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ceb2:	e000      	b.n	ceb6 <am_util_stdio_vsprintf+0x33e>
    ceb4:	2300      	movs	r3, #0
    ceb6:	9a03      	ldr	r2, [sp, #12]
    ceb8:	4413      	add	r3, r2
    ceba:	9303      	str	r3, [sp, #12]
                    ui32CharCnt += iWidth;
    cebc:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cebe:	9a11      	ldr	r2, [sp, #68]	; 0x44
    cec0:	4413      	add	r3, r2
    cec2:	9311      	str	r3, [sp, #68]	; 0x44
                    iWidth = 0;
    cec4:	2300      	movs	r3, #0
    cec6:	9310      	str	r3, [sp, #64]	; 0x40
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    cec8:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
    cecc:	9a03      	ldr	r2, [sp, #12]
    cece:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    ced2:	f7ff fcba 	bl	c84a <uint64_to_hexstr>
    ced6:	900f      	str	r0, [sp, #60]	; 0x3c

                if ( pcBuf )
    ced8:	9b03      	ldr	r3, [sp, #12]
    ceda:	2b00      	cmp	r3, #0
    cedc:	d003      	beq.n	cee6 <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
    cede:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cee0:	9a03      	ldr	r2, [sp, #12]
    cee2:	4413      	add	r3, r2
    cee4:	9303      	str	r3, [sp, #12]
                }

                ui32CharCnt += iVal;
    cee6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cee8:	9a11      	ldr	r2, [sp, #68]	; 0x44
    ceea:	4413      	add	r3, r2
    ceec:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    ceee:	e135      	b.n	d15c <am_util_stdio_vsprintf+0x5e4>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cef0:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    cef4:	2b00      	cmp	r3, #0
    cef6:	d009      	beq.n	cf0c <am_util_stdio_vsprintf+0x394>
    cef8:	9b01      	ldr	r3, [sp, #4]
    cefa:	3307      	adds	r3, #7
    cefc:	f023 0307 	bic.w	r3, r3, #7
    cf00:	f103 0208 	add.w	r2, r3, #8
    cf04:	9201      	str	r2, [sp, #4]
    cf06:	e9d3 6700 	ldrd	r6, r7, [r3]
    cf0a:	e006      	b.n	cf1a <am_util_stdio_vsprintf+0x3a2>
                                      va_arg(pArgs, uint32_t);
    cf0c:	9b01      	ldr	r3, [sp, #4]
    cf0e:	1d1a      	adds	r2, r3, #4
    cf10:	9201      	str	r2, [sp, #4]
    cf12:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cf14:	2200      	movs	r2, #0
    cf16:	461e      	mov	r6, r3
    cf18:	4617      	mov	r7, r2
    cf1a:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48

                if ( iWidth )
    cf1e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cf20:	2b00      	cmp	r3, #0
    cf22:	d01e      	beq.n	cf62 <am_util_stdio_vsprintf+0x3ea>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    cf24:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    cf28:	f7ff fba8 	bl	c67c <ndigits_in_u64>
    cf2c:	4602      	mov	r2, r0
    cf2e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cf30:	1a9b      	subs	r3, r3, r2
    cf32:	9310      	str	r3, [sp, #64]	; 0x40

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    cf34:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    cf38:	9a10      	ldr	r2, [sp, #64]	; 0x40
    cf3a:	4619      	mov	r1, r3
    cf3c:	9803      	ldr	r0, [sp, #12]
    cf3e:	f7ff fcfa 	bl	c936 <padbuffer>
    cf42:	9010      	str	r0, [sp, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    cf44:	9b03      	ldr	r3, [sp, #12]
    cf46:	2b00      	cmp	r3, #0
    cf48:	d001      	beq.n	cf4e <am_util_stdio_vsprintf+0x3d6>
    cf4a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cf4c:	e000      	b.n	cf50 <am_util_stdio_vsprintf+0x3d8>
    cf4e:	2300      	movs	r3, #0
    cf50:	9a03      	ldr	r2, [sp, #12]
    cf52:	4413      	add	r3, r2
    cf54:	9303      	str	r3, [sp, #12]
                    ui32CharCnt += iWidth;
    cf56:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cf58:	9a11      	ldr	r2, [sp, #68]	; 0x44
    cf5a:	4413      	add	r3, r2
    cf5c:	9311      	str	r3, [sp, #68]	; 0x44
                    iWidth = 0;
    cf5e:	2300      	movs	r3, #0
    cf60:	9310      	str	r3, [sp, #64]	; 0x40
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    cf62:	9a03      	ldr	r2, [sp, #12]
    cf64:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    cf68:	f7ff fc2a 	bl	c7c0 <uint64_to_str>
    cf6c:	900f      	str	r0, [sp, #60]	; 0x3c

                if ( pcBuf )
    cf6e:	9b03      	ldr	r3, [sp, #12]
    cf70:	2b00      	cmp	r3, #0
    cf72:	d003      	beq.n	cf7c <am_util_stdio_vsprintf+0x404>
                {
                    pcBuf += iVal;
    cf74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cf76:	9a03      	ldr	r2, [sp, #12]
    cf78:	4413      	add	r3, r2
    cf7a:	9303      	str	r3, [sp, #12]
                }

                ui32CharCnt += iVal;
    cf7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cf7e:	9a11      	ldr	r2, [sp, #68]	; 0x44
    cf80:	4413      	add	r3, r2
    cf82:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    cf84:	e0ea      	b.n	d15c <am_util_stdio_vsprintf+0x5e4>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    cf86:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    cf8a:	2b00      	cmp	r3, #0
    cf8c:	d009      	beq.n	cfa2 <am_util_stdio_vsprintf+0x42a>
    cf8e:	9b01      	ldr	r3, [sp, #4]
    cf90:	3307      	adds	r3, #7
    cf92:	f023 0307 	bic.w	r3, r3, #7
    cf96:	f103 0208 	add.w	r2, r3, #8
    cf9a:	9201      	str	r2, [sp, #4]
    cf9c:	e9d3 8900 	ldrd	r8, r9, [r3]
    cfa0:	e006      	b.n	cfb0 <am_util_stdio_vsprintf+0x438>
                                     va_arg(pArgs, int32_t);
    cfa2:	9b01      	ldr	r3, [sp, #4]
    cfa4:	1d1a      	adds	r2, r3, #4
    cfa6:	9201      	str	r2, [sp, #4]
    cfa8:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    cfaa:	17da      	asrs	r2, r3, #31
    cfac:	4698      	mov	r8, r3
    cfae:	4691      	mov	r9, r2
    cfb0:	e9cd 8908 	strd	r8, r9, [sp, #32]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    cfb4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    cfb8:	2b00      	cmp	r3, #0
    cfba:	da0c      	bge.n	cfd6 <am_util_stdio_vsprintf+0x45e>
                {
                    ui64Val = -i64Val;          // Get absolute value
    cfbc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    cfc0:	2100      	movs	r1, #0
    cfc2:	f1d2 0a00 	rsbs	sl, r2, #0
    cfc6:	eb61 0b03 	sbc.w	fp, r1, r3
    cfca:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
                    bNeg = true;
    cfce:	2301      	movs	r3, #1
    cfd0:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
    cfd4:	e006      	b.n	cfe4 <am_util_stdio_vsprintf+0x46c>
                }
                else
                {
                    ui64Val = i64Val;
    cfd6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    cfda:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
                    bNeg = false;
    cfde:	2300      	movs	r3, #0
    cfe0:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
                }

                if ( iWidth )
    cfe4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cfe6:	2b00      	cmp	r3, #0
    cfe8:	d04a      	beq.n	d080 <am_util_stdio_vsprintf+0x508>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    cfea:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    cfee:	4610      	mov	r0, r2
    cff0:	4619      	mov	r1, r3
    cff2:	f7ff fb63 	bl	c6bc <ndigits_in_i64>
    cff6:	4602      	mov	r2, r0
    cff8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cffa:	1a9b      	subs	r3, r3, r2
    cffc:	9310      	str	r3, [sp, #64]	; 0x40

                    if ( bNeg )
    cffe:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    d002:	2b00      	cmp	r3, #0
    d004:	d011      	beq.n	d02a <am_util_stdio_vsprintf+0x4b2>
                    {
                        --iWidth;
    d006:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d008:	3b01      	subs	r3, #1
    d00a:	9310      	str	r3, [sp, #64]	; 0x40

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    d00c:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d010:	2b30      	cmp	r3, #48	; 0x30
    d012:	d10a      	bne.n	d02a <am_util_stdio_vsprintf+0x4b2>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    d014:	9b03      	ldr	r3, [sp, #12]
    d016:	2b00      	cmp	r3, #0
    d018:	d004      	beq.n	d024 <am_util_stdio_vsprintf+0x4ac>
                            {
                                *pcBuf++ = '-';
    d01a:	9b03      	ldr	r3, [sp, #12]
    d01c:	1c5a      	adds	r2, r3, #1
    d01e:	9203      	str	r2, [sp, #12]
    d020:	222d      	movs	r2, #45	; 0x2d
    d022:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    d024:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d026:	3301      	adds	r3, #1
    d028:	9311      	str	r3, [sp, #68]	; 0x44
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d02a:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d02e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d030:	4619      	mov	r1, r3
    d032:	9803      	ldr	r0, [sp, #12]
    d034:	f7ff fc7f 	bl	c936 <padbuffer>
    d038:	9010      	str	r0, [sp, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    d03a:	9b03      	ldr	r3, [sp, #12]
    d03c:	2b00      	cmp	r3, #0
    d03e:	d001      	beq.n	d044 <am_util_stdio_vsprintf+0x4cc>
    d040:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d042:	e000      	b.n	d046 <am_util_stdio_vsprintf+0x4ce>
    d044:	2300      	movs	r3, #0
    d046:	9a03      	ldr	r2, [sp, #12]
    d048:	4413      	add	r3, r2
    d04a:	9303      	str	r3, [sp, #12]
                    ui32CharCnt += iWidth;
    d04c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d04e:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d050:	4413      	add	r3, r2
    d052:	9311      	str	r3, [sp, #68]	; 0x44
                    iWidth = 0;
    d054:	2300      	movs	r3, #0
    d056:	9310      	str	r3, [sp, #64]	; 0x40

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    d058:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    d05c:	2b00      	cmp	r3, #0
    d05e:	d01e      	beq.n	d09e <am_util_stdio_vsprintf+0x526>
    d060:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d064:	2b20      	cmp	r3, #32
    d066:	d11a      	bne.n	d09e <am_util_stdio_vsprintf+0x526>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    d068:	9b03      	ldr	r3, [sp, #12]
    d06a:	2b00      	cmp	r3, #0
    d06c:	d004      	beq.n	d078 <am_util_stdio_vsprintf+0x500>
                        {
                            *pcBuf++ = '-';
    d06e:	9b03      	ldr	r3, [sp, #12]
    d070:	1c5a      	adds	r2, r3, #1
    d072:	9203      	str	r2, [sp, #12]
    d074:	222d      	movs	r2, #45	; 0x2d
    d076:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    d078:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d07a:	3301      	adds	r3, #1
    d07c:	9311      	str	r3, [sp, #68]	; 0x44
    d07e:	e00e      	b.n	d09e <am_util_stdio_vsprintf+0x526>
                    }
                }
                else
                {
                    if ( bNeg )
    d080:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    d084:	2b00      	cmp	r3, #0
    d086:	d00a      	beq.n	d09e <am_util_stdio_vsprintf+0x526>
                    {
                        if ( pcBuf )
    d088:	9b03      	ldr	r3, [sp, #12]
    d08a:	2b00      	cmp	r3, #0
    d08c:	d004      	beq.n	d098 <am_util_stdio_vsprintf+0x520>
                        {
                            *pcBuf++ = '-';
    d08e:	9b03      	ldr	r3, [sp, #12]
    d090:	1c5a      	adds	r2, r3, #1
    d092:	9203      	str	r2, [sp, #12]
    d094:	222d      	movs	r2, #45	; 0x2d
    d096:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    d098:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d09a:	3301      	adds	r3, #1
    d09c:	9311      	str	r3, [sp, #68]	; 0x44
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    d09e:	9a03      	ldr	r2, [sp, #12]
    d0a0:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d0a4:	f7ff fb8c 	bl	c7c0 <uint64_to_str>
    d0a8:	900f      	str	r0, [sp, #60]	; 0x3c

                if ( pcBuf )
    d0aa:	9b03      	ldr	r3, [sp, #12]
    d0ac:	2b00      	cmp	r3, #0
    d0ae:	d003      	beq.n	d0b8 <am_util_stdio_vsprintf+0x540>
                {
                    pcBuf += iVal;
    d0b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d0b2:	9a03      	ldr	r2, [sp, #12]
    d0b4:	4413      	add	r3, r2
    d0b6:	9303      	str	r3, [sp, #12]
                }

                ui32CharCnt += iVal;
    d0b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d0ba:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d0bc:	4413      	add	r3, r2
    d0be:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d0c0:	e04c      	b.n	d15c <am_util_stdio_vsprintf+0x5e4>


            case 'f':
            case 'F':
                if ( pcBuf )
    d0c2:	9b03      	ldr	r3, [sp, #12]
    d0c4:	2b00      	cmp	r3, #0
    d0c6:	d048      	beq.n	d15a <am_util_stdio_vsprintf+0x5e2>
                {
                    float fValue = va_arg(pArgs, double);
    d0c8:	9b01      	ldr	r3, [sp, #4]
    d0ca:	3307      	adds	r3, #7
    d0cc:	f023 0307 	bic.w	r3, r3, #7
    d0d0:	f103 0208 	add.w	r2, r3, #8
    d0d4:	9201      	str	r2, [sp, #4]
    d0d6:	e9d3 2300 	ldrd	r2, r3, [r3]
    d0da:	4610      	mov	r0, r2
    d0dc:	4619      	mov	r1, r3
    d0de:	f7ff f80f 	bl	c100 <__aeabi_d2f>
    d0e2:	4603      	mov	r3, r0
    d0e4:	9306      	str	r3, [sp, #24]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    d0e6:	9b03      	ldr	r3, [sp, #12]
    d0e8:	2214      	movs	r2, #20
    d0ea:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    d0ec:	990e      	ldr	r1, [sp, #56]	; 0x38
    d0ee:	9803      	ldr	r0, [sp, #12]
    d0f0:	ed9d 0a06 	vldr	s0, [sp, #24]
    d0f4:	f7ff fc42 	bl	c97c <ftoa>
    d0f8:	900f      	str	r0, [sp, #60]	; 0x3c
                    if ( iVal < 0 )
    d0fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d0fc:	2b00      	cmp	r3, #0
    d0fe:	da14      	bge.n	d12a <am_util_stdio_vsprintf+0x5b2>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    d100:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d102:	f1b3 3fff 	cmp.w	r3, #4294967295
    d106:	d102      	bne.n	d10e <am_util_stdio_vsprintf+0x596>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    d108:	4b1e      	ldr	r3, [pc, #120]	; (d184 <am_util_stdio_vsprintf+0x60c>)
    d10a:	930c      	str	r3, [sp, #48]	; 0x30
    d10c:	e008      	b.n	d120 <am_util_stdio_vsprintf+0x5a8>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    d10e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d110:	f113 0f02 	cmn.w	r3, #2
    d114:	d102      	bne.n	d11c <am_util_stdio_vsprintf+0x5a4>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    d116:	4b1c      	ldr	r3, [pc, #112]	; (d188 <am_util_stdio_vsprintf+0x610>)
    d118:	930c      	str	r3, [sp, #48]	; 0x30
    d11a:	e001      	b.n	d120 <am_util_stdio_vsprintf+0x5a8>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    d11c:	4b1b      	ldr	r3, [pc, #108]	; (d18c <am_util_stdio_vsprintf+0x614>)
    d11e:	930c      	str	r3, [sp, #48]	; 0x30
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    d120:	9b03      	ldr	r3, [sp, #12]
    d122:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d124:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    d126:	2303      	movs	r3, #3
    d128:	930f      	str	r3, [sp, #60]	; 0x3c
                    }
                    ui32CharCnt += iVal;
    d12a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d12c:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d12e:	4413      	add	r3, r2
    d130:	9311      	str	r3, [sp, #68]	; 0x44
                    pcBuf += iVal;
    d132:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d134:	9a03      	ldr	r2, [sp, #12]
    d136:	4413      	add	r3, r2
    d138:	9303      	str	r3, [sp, #12]
                }
                break;
    d13a:	e00e      	b.n	d15a <am_util_stdio_vsprintf+0x5e2>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    d13c:	9b03      	ldr	r3, [sp, #12]
    d13e:	2b00      	cmp	r3, #0
    d140:	d005      	beq.n	d14e <am_util_stdio_vsprintf+0x5d6>
                {
                    *pcBuf++ = *pcFmt;
    d142:	9b03      	ldr	r3, [sp, #12]
    d144:	1c5a      	adds	r2, r3, #1
    d146:	9203      	str	r2, [sp, #12]
    d148:	9a02      	ldr	r2, [sp, #8]
    d14a:	7812      	ldrb	r2, [r2, #0]
    d14c:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    d14e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d150:	3301      	adds	r3, #1
    d152:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d154:	e002      	b.n	d15c <am_util_stdio_vsprintf+0x5e4>
                break;
    d156:	bf00      	nop
    d158:	e000      	b.n	d15c <am_util_stdio_vsprintf+0x5e4>
                break;
    d15a:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    d15c:	9b02      	ldr	r3, [sp, #8]
    d15e:	3301      	adds	r3, #1
    d160:	9302      	str	r3, [sp, #8]
    while ( *pcFmt != 0x0 )
    d162:	9b02      	ldr	r3, [sp, #8]
    d164:	781b      	ldrb	r3, [r3, #0]
    d166:	2b00      	cmp	r3, #0
    d168:	f47f ad11 	bne.w	cb8e <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    d16c:	9b03      	ldr	r3, [sp, #12]
    d16e:	2b00      	cmp	r3, #0
    d170:	d002      	beq.n	d178 <am_util_stdio_vsprintf+0x600>
    {
        *pcBuf = 0x0;
    d172:	9b03      	ldr	r3, [sp, #12]
    d174:	2200      	movs	r2, #0
    d176:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    d178:	9b11      	ldr	r3, [sp, #68]	; 0x44
}
    d17a:	4618      	mov	r0, r3
    d17c:	b017      	add	sp, #92	; 0x5c
    d17e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d182:	bf00      	nop
    d184:	00302e30 	.word	0x00302e30
    d188:	00232e23 	.word	0x00232e23
    d18c:	003f2e3f 	.word	0x003f2e3f

0000d190 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    d190:	b40f      	push	{r0, r1, r2, r3}
    d192:	b500      	push	{lr}
    d194:	b083      	sub	sp, #12
    uint32_t ui32NumChars;

    if (!g_pfnCharPrint)
    d196:	4b0c      	ldr	r3, [pc, #48]	; (d1c8 <am_util_stdio_printf+0x38>)
    d198:	681b      	ldr	r3, [r3, #0]
    d19a:	2b00      	cmp	r3, #0
    d19c:	d101      	bne.n	d1a2 <am_util_stdio_printf+0x12>
    {
        return 0;
    d19e:	2300      	movs	r3, #0
    d1a0:	e00c      	b.n	d1bc <am_util_stdio_printf+0x2c>

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    d1a2:	ab05      	add	r3, sp, #20
    d1a4:	9300      	str	r3, [sp, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d1a6:	9a00      	ldr	r2, [sp, #0]
    d1a8:	9904      	ldr	r1, [sp, #16]
    d1aa:	4808      	ldr	r0, [pc, #32]	; (d1cc <am_util_stdio_printf+0x3c>)
    d1ac:	f7ff fce4 	bl	cb78 <am_util_stdio_vsprintf>
    d1b0:	9001      	str	r0, [sp, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    d1b2:	4b05      	ldr	r3, [pc, #20]	; (d1c8 <am_util_stdio_printf+0x38>)
    d1b4:	681b      	ldr	r3, [r3, #0]
    d1b6:	4805      	ldr	r0, [pc, #20]	; (d1cc <am_util_stdio_printf+0x3c>)
    d1b8:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    d1ba:	9b01      	ldr	r3, [sp, #4]
}
    d1bc:	4618      	mov	r0, r3
    d1be:	b003      	add	sp, #12
    d1c0:	f85d eb04 	ldr.w	lr, [sp], #4
    d1c4:	b004      	add	sp, #16
    d1c6:	4770      	bx	lr
    d1c8:	10001044 	.word	0x10001044
    d1cc:	10001048 	.word	0x10001048

0000d1d0 <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
    d1d0:	b508      	push	{r3, lr}
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    d1d2:	4802      	ldr	r0, [pc, #8]	; (d1dc <am_util_stdio_terminal_clear+0xc>)
    d1d4:	f7ff ffdc 	bl	d190 <am_util_stdio_printf>
}
    d1d8:	bf00      	nop
    d1da:	bd08      	pop	{r3, pc}
    d1dc:	0000e838 	.word	0x0000e838

0000d1e0 <Reset_Handler>:
Reset_Handler(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
    d1e0:	4811      	ldr	r0, [pc, #68]	; (d228 <zero_loop+0x12>)
    d1e2:	4912      	ldr	r1, [pc, #72]	; (d22c <zero_loop+0x16>)
    d1e4:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
    d1e6:	f8d1 d000 	ldr.w	sp, [r1]

#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
    d1ea:	4811      	ldr	r0, [pc, #68]	; (d230 <zero_loop+0x1a>)
    d1ec:	6801      	ldr	r1, [r0, #0]
    d1ee:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    d1f2:	6001      	str	r1, [r0, #0]
    d1f4:	f3bf 8f4f 	dsb	sy
    d1f8:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
    d1fc:	480d      	ldr	r0, [pc, #52]	; (d234 <zero_loop+0x1e>)
    d1fe:	490e      	ldr	r1, [pc, #56]	; (d238 <zero_loop+0x22>)
    d200:	4a0e      	ldr	r2, [pc, #56]	; (d23c <zero_loop+0x26>)

0000d202 <copy_loop>:
    d202:	f850 3b04 	ldr.w	r3, [r0], #4
    d206:	f841 3b04 	str.w	r3, [r1], #4
    d20a:	4291      	cmp	r1, r2
    d20c:	dbf9      	blt.n	d202 <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
    d20e:	480c      	ldr	r0, [pc, #48]	; (d240 <zero_loop+0x2a>)
    d210:	490c      	ldr	r1, [pc, #48]	; (d244 <zero_loop+0x2e>)
    d212:	f04f 0200 	mov.w	r2, #0

0000d216 <zero_loop>:
    d216:	4288      	cmp	r0, r1
    d218:	bfb8      	it	lt
    d21a:	f840 2b04 	strlt.w	r2, [r0], #4
    d21e:	dbfa      	blt.n	d216 <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
    d220:	f7ff f846 	bl	c2b0 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
    d224:	be00      	bkpt	0x0000
}
    d226:	bf00      	nop
    d228:	e000ed08 	.word	0xe000ed08
    d22c:	0000c000 	.word	0x0000c000
    d230:	e000ed88 	.word	0xe000ed88
    d234:	0000ebb4 	.word	0x0000ebb4
    d238:	10001000 	.word	0x10001000
    d23c:	10001044 	.word	0x10001044
    d240:	10001044 	.word	0x10001044
    d244:	1000115c 	.word	0x1000115c

0000d248 <NMI_Handler>:
NMI_Handler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    d248:	e7fe      	b.n	d248 <NMI_Handler>

0000d24a <BusFault_Handler>:
HardFault_Handler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    d24a:	e7fe      	b.n	d24a <BusFault_Handler>

0000d24c <DebugMon_Handler>:
am_default_isr(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    d24c:	e7fe      	b.n	d24c <DebugMon_Handler>
	...

0000d250 <am_hal_cachectrl_config>:
    d250:	b530      	push	{r4, r5, lr}
    d252:	b083      	sub	sp, #12
    d254:	4604      	mov	r4, r0
    d256:	f000 fea9 	bl	dfac <am_hal_interrupt_master_disable>
    d25a:	4d0e      	ldr	r5, [pc, #56]	; (d294 <am_hal_cachectrl_config+0x44>)
    d25c:	9001      	str	r0, [sp, #4]
    d25e:	682b      	ldr	r3, [r5, #0]
    d260:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    d264:	602b      	str	r3, [r5, #0]
    d266:	9801      	ldr	r0, [sp, #4]
    d268:	f000 fea4 	bl	dfb4 <am_hal_interrupt_master_set>
    d26c:	7863      	ldrb	r3, [r4, #1]
    d26e:	7822      	ldrb	r2, [r4, #0]
    d270:	78a1      	ldrb	r1, [r4, #2]
    d272:	021b      	lsls	r3, r3, #8
    d274:	f403 7340 	and.w	r3, r3, #768	; 0x300
    d278:	0112      	lsls	r2, r2, #4
    d27a:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    d27e:	b2d2      	uxtb	r2, r2
    d280:	4313      	orrs	r3, r2
    d282:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    d286:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    d28a:	2000      	movs	r0, #0
    d28c:	602b      	str	r3, [r5, #0]
    d28e:	b003      	add	sp, #12
    d290:	bd30      	pop	{r4, r5, pc}
    d292:	bf00      	nop
    d294:	40018000 	.word	0x40018000

0000d298 <am_hal_cachectrl_enable>:
    d298:	4a03      	ldr	r2, [pc, #12]	; (d2a8 <am_hal_cachectrl_enable+0x10>)
    d29a:	6813      	ldr	r3, [r2, #0]
    d29c:	f043 0301 	orr.w	r3, r3, #1
    d2a0:	2000      	movs	r0, #0
    d2a2:	6013      	str	r3, [r2, #0]
    d2a4:	4770      	bx	lr
    d2a6:	bf00      	nop
    d2a8:	40018000 	.word	0x40018000

0000d2ac <am_hal_cachectrl_control>:
    d2ac:	b510      	push	{r4, lr}
    d2ae:	3801      	subs	r0, #1
    d2b0:	b08e      	sub	sp, #56	; 0x38
    d2b2:	2810      	cmp	r0, #16
    d2b4:	f200 815e 	bhi.w	d574 <am_hal_cachectrl_control+0x2c8>
    d2b8:	e8df f010 	tbh	[pc, r0, lsl #1]
    d2bc:	00360018 	.word	0x00360018
    d2c0:	0040003d 	.word	0x0040003d
    d2c4:	00450043 	.word	0x00450043
    d2c8:	0011001a 	.word	0x0011001a
    d2cc:	00540047 	.word	0x00540047
    d2d0:	009a0061 	.word	0x009a0061
    d2d4:	010c00d3 	.word	0x010c00d3
    d2d8:	013f0126 	.word	0x013f0126
    d2dc:	001d      	.short	0x001d
    d2de:	f44f 7300 	mov.w	r3, #512	; 0x200
    d2e2:	4aac      	ldr	r2, [pc, #688]	; (d594 <am_hal_cachectrl_control+0x2e8>)
    d2e4:	2000      	movs	r0, #0
    d2e6:	6093      	str	r3, [r2, #8]
    d2e8:	b00e      	add	sp, #56	; 0x38
    d2ea:	bd10      	pop	{r4, pc}
    d2ec:	2301      	movs	r3, #1
    d2ee:	e7f8      	b.n	d2e2 <am_hal_cachectrl_control+0x36>
    d2f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    d2f4:	e7f5      	b.n	d2e2 <am_hal_cachectrl_control+0x36>
    d2f6:	2900      	cmp	r1, #0
    d2f8:	f000 813c 	beq.w	d574 <am_hal_cachectrl_control+0x2c8>
    d2fc:	684a      	ldr	r2, [r1, #4]
    d2fe:	48a6      	ldr	r0, [pc, #664]	; (d598 <am_hal_cachectrl_control+0x2ec>)
    d300:	4202      	tst	r2, r0
    d302:	f040 8137 	bne.w	d574 <am_hal_cachectrl_control+0x2c8>
    d306:	688b      	ldr	r3, [r1, #8]
    d308:	4018      	ands	r0, r3
    d30a:	f040 8133 	bne.w	d574 <am_hal_cachectrl_control+0x2c8>
    d30e:	780c      	ldrb	r4, [r1, #0]
    d310:	2c00      	cmp	r4, #0
    d312:	f040 8133 	bne.w	d57c <am_hal_cachectrl_control+0x2d0>
    d316:	4c9f      	ldr	r4, [pc, #636]	; (d594 <am_hal_cachectrl_control+0x2e8>)
    d318:	7849      	ldrb	r1, [r1, #1]
    d31a:	6122      	str	r2, [r4, #16]
    d31c:	6163      	str	r3, [r4, #20]
    d31e:	6823      	ldr	r3, [r4, #0]
    d320:	f361 0382 	bfi	r3, r1, #2, #1
    d324:	6023      	str	r3, [r4, #0]
    d326:	e7df      	b.n	d2e8 <am_hal_cachectrl_control+0x3c>
    d328:	4b9a      	ldr	r3, [pc, #616]	; (d594 <am_hal_cachectrl_control+0x2e8>)
    d32a:	681b      	ldr	r3, [r3, #0]
    d32c:	01db      	lsls	r3, r3, #7
    d32e:	f140 811f 	bpl.w	d570 <am_hal_cachectrl_control+0x2c4>
    d332:	2302      	movs	r3, #2
    d334:	e7d5      	b.n	d2e2 <am_hal_cachectrl_control+0x36>
    d336:	f44f 6388 	mov.w	r3, #1088	; 0x440
    d33a:	e7d2      	b.n	d2e2 <am_hal_cachectrl_control+0x36>
    d33c:	f44f 7308 	mov.w	r3, #544	; 0x220
    d340:	e7cf      	b.n	d2e2 <am_hal_cachectrl_control+0x36>
    d342:	2340      	movs	r3, #64	; 0x40
    d344:	e7cd      	b.n	d2e2 <am_hal_cachectrl_control+0x36>
    d346:	2320      	movs	r3, #32
    d348:	e7cb      	b.n	d2e2 <am_hal_cachectrl_control+0x36>
    d34a:	f000 fe2f 	bl	dfac <am_hal_interrupt_master_disable>
    d34e:	4a91      	ldr	r2, [pc, #580]	; (d594 <am_hal_cachectrl_control+0x2e8>)
    d350:	9000      	str	r0, [sp, #0]
    d352:	6813      	ldr	r3, [r2, #0]
    d354:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    d358:	6013      	str	r3, [r2, #0]
    d35a:	9800      	ldr	r0, [sp, #0]
    d35c:	f000 fe2a 	bl	dfb4 <am_hal_interrupt_master_set>
    d360:	2000      	movs	r0, #0
    d362:	e7c1      	b.n	d2e8 <am_hal_cachectrl_control+0x3c>
    d364:	f000 fe22 	bl	dfac <am_hal_interrupt_master_disable>
    d368:	4a8a      	ldr	r2, [pc, #552]	; (d594 <am_hal_cachectrl_control+0x2e8>)
    d36a:	9001      	str	r0, [sp, #4]
    d36c:	6813      	ldr	r3, [r2, #0]
    d36e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    d372:	6013      	str	r3, [r2, #0]
    d374:	9801      	ldr	r0, [sp, #4]
    d376:	f000 fe1d 	bl	dfb4 <am_hal_interrupt_master_set>
    d37a:	2000      	movs	r0, #0
    d37c:	e7b4      	b.n	d2e8 <am_hal_cachectrl_control+0x3c>
    d37e:	f000 fe15 	bl	dfac <am_hal_interrupt_master_disable>
    d382:	4603      	mov	r3, r0
    d384:	4885      	ldr	r0, [pc, #532]	; (d59c <am_hal_cachectrl_control+0x2f0>)
    d386:	9302      	str	r3, [sp, #8]
    d388:	f000 fc8c 	bl	dca4 <am_hal_flash_load_ui32>
    d38c:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    d390:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    d394:	4881      	ldr	r0, [pc, #516]	; (d59c <am_hal_cachectrl_control+0x2f0>)
    d396:	f000 fc89 	bl	dcac <am_hal_flash_store_ui32>
    d39a:	9802      	ldr	r0, [sp, #8]
    d39c:	f000 fe0a 	bl	dfb4 <am_hal_interrupt_master_set>
    d3a0:	f000 fe04 	bl	dfac <am_hal_interrupt_master_disable>
    d3a4:	4603      	mov	r3, r0
    d3a6:	487d      	ldr	r0, [pc, #500]	; (d59c <am_hal_cachectrl_control+0x2f0>)
    d3a8:	9303      	str	r3, [sp, #12]
    d3aa:	f000 fc7b 	bl	dca4 <am_hal_flash_load_ui32>
    d3ae:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    d3b2:	f440 61ee 	orr.w	r1, r0, #1904	; 0x770
    d3b6:	4879      	ldr	r0, [pc, #484]	; (d59c <am_hal_cachectrl_control+0x2f0>)
    d3b8:	f000 fc78 	bl	dcac <am_hal_flash_store_ui32>
    d3bc:	9803      	ldr	r0, [sp, #12]
    d3be:	f000 fdf9 	bl	dfb4 <am_hal_interrupt_master_set>
    d3c2:	f000 fdf3 	bl	dfac <am_hal_interrupt_master_disable>
    d3c6:	4603      	mov	r3, r0
    d3c8:	4874      	ldr	r0, [pc, #464]	; (d59c <am_hal_cachectrl_control+0x2f0>)
    d3ca:	9304      	str	r3, [sp, #16]
    d3cc:	f000 fc6a 	bl	dca4 <am_hal_flash_load_ui32>
    d3d0:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    d3d4:	f020 000f 	bic.w	r0, r0, #15
    d3d8:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    d3dc:	f041 0103 	orr.w	r1, r1, #3
    d3e0:	486e      	ldr	r0, [pc, #440]	; (d59c <am_hal_cachectrl_control+0x2f0>)
    d3e2:	f000 fc63 	bl	dcac <am_hal_flash_store_ui32>
    d3e6:	9804      	ldr	r0, [sp, #16]
    d3e8:	f000 fde4 	bl	dfb4 <am_hal_interrupt_master_set>
    d3ec:	2000      	movs	r0, #0
    d3ee:	e77b      	b.n	d2e8 <am_hal_cachectrl_control+0x3c>
    d3f0:	f000 fddc 	bl	dfac <am_hal_interrupt_master_disable>
    d3f4:	4603      	mov	r3, r0
    d3f6:	4869      	ldr	r0, [pc, #420]	; (d59c <am_hal_cachectrl_control+0x2f0>)
    d3f8:	9305      	str	r3, [sp, #20]
    d3fa:	f000 fc53 	bl	dca4 <am_hal_flash_load_ui32>
    d3fe:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    d402:	f440 51b8 	orr.w	r1, r0, #5888	; 0x1700
    d406:	4865      	ldr	r0, [pc, #404]	; (d59c <am_hal_cachectrl_control+0x2f0>)
    d408:	f000 fc50 	bl	dcac <am_hal_flash_store_ui32>
    d40c:	9805      	ldr	r0, [sp, #20]
    d40e:	f000 fdd1 	bl	dfb4 <am_hal_interrupt_master_set>
    d412:	f000 fdcb 	bl	dfac <am_hal_interrupt_master_disable>
    d416:	4603      	mov	r3, r0
    d418:	4860      	ldr	r0, [pc, #384]	; (d59c <am_hal_cachectrl_control+0x2f0>)
    d41a:	9306      	str	r3, [sp, #24]
    d41c:	f000 fc42 	bl	dca4 <am_hal_flash_load_ui32>
    d420:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    d424:	f440 61ea 	orr.w	r1, r0, #1872	; 0x750
    d428:	485c      	ldr	r0, [pc, #368]	; (d59c <am_hal_cachectrl_control+0x2f0>)
    d42a:	f000 fc3f 	bl	dcac <am_hal_flash_store_ui32>
    d42e:	9806      	ldr	r0, [sp, #24]
    d430:	f000 fdc0 	bl	dfb4 <am_hal_interrupt_master_set>
    d434:	f000 fdba 	bl	dfac <am_hal_interrupt_master_disable>
    d438:	4603      	mov	r3, r0
    d43a:	4858      	ldr	r0, [pc, #352]	; (d59c <am_hal_cachectrl_control+0x2f0>)
    d43c:	9307      	str	r3, [sp, #28]
    d43e:	f000 fc31 	bl	dca4 <am_hal_flash_load_ui32>
    d442:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    d446:	f020 000f 	bic.w	r0, r0, #15
    d44a:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    d44e:	f041 0101 	orr.w	r1, r1, #1
    d452:	4852      	ldr	r0, [pc, #328]	; (d59c <am_hal_cachectrl_control+0x2f0>)
    d454:	f000 fc2a 	bl	dcac <am_hal_flash_store_ui32>
    d458:	9807      	ldr	r0, [sp, #28]
    d45a:	f000 fdab 	bl	dfb4 <am_hal_interrupt_master_set>
    d45e:	2000      	movs	r0, #0
    d460:	e742      	b.n	d2e8 <am_hal_cachectrl_control+0x3c>
    d462:	f000 fda3 	bl	dfac <am_hal_interrupt_master_disable>
    d466:	4603      	mov	r3, r0
    d468:	484c      	ldr	r0, [pc, #304]	; (d59c <am_hal_cachectrl_control+0x2f0>)
    d46a:	9308      	str	r3, [sp, #32]
    d46c:	f000 fc1a 	bl	dca4 <am_hal_flash_load_ui32>
    d470:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    d474:	f440 51b8 	orr.w	r1, r0, #5888	; 0x1700
    d478:	4848      	ldr	r0, [pc, #288]	; (d59c <am_hal_cachectrl_control+0x2f0>)
    d47a:	f000 fc17 	bl	dcac <am_hal_flash_store_ui32>
    d47e:	9808      	ldr	r0, [sp, #32]
    d480:	f000 fd98 	bl	dfb4 <am_hal_interrupt_master_set>
    d484:	f000 fd92 	bl	dfac <am_hal_interrupt_master_disable>
    d488:	4603      	mov	r3, r0
    d48a:	4844      	ldr	r0, [pc, #272]	; (d59c <am_hal_cachectrl_control+0x2f0>)
    d48c:	9309      	str	r3, [sp, #36]	; 0x24
    d48e:	f000 fc09 	bl	dca4 <am_hal_flash_load_ui32>
    d492:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    d496:	f440 61ec 	orr.w	r1, r0, #1888	; 0x760
    d49a:	4840      	ldr	r0, [pc, #256]	; (d59c <am_hal_cachectrl_control+0x2f0>)
    d49c:	f000 fc06 	bl	dcac <am_hal_flash_store_ui32>
    d4a0:	9809      	ldr	r0, [sp, #36]	; 0x24
    d4a2:	f000 fd87 	bl	dfb4 <am_hal_interrupt_master_set>
    d4a6:	f000 fd81 	bl	dfac <am_hal_interrupt_master_disable>
    d4aa:	4603      	mov	r3, r0
    d4ac:	483b      	ldr	r0, [pc, #236]	; (d59c <am_hal_cachectrl_control+0x2f0>)
    d4ae:	930a      	str	r3, [sp, #40]	; 0x28
    d4b0:	f000 fbf8 	bl	dca4 <am_hal_flash_load_ui32>
    d4b4:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    d4b8:	f020 000f 	bic.w	r0, r0, #15
    d4bc:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    d4c0:	f041 0101 	orr.w	r1, r1, #1
    d4c4:	4835      	ldr	r0, [pc, #212]	; (d59c <am_hal_cachectrl_control+0x2f0>)
    d4c6:	f000 fbf1 	bl	dcac <am_hal_flash_store_ui32>
    d4ca:	980a      	ldr	r0, [sp, #40]	; 0x28
    d4cc:	f000 fd72 	bl	dfb4 <am_hal_interrupt_master_set>
    d4d0:	2000      	movs	r0, #0
    d4d2:	e709      	b.n	d2e8 <am_hal_cachectrl_control+0x3c>
    d4d4:	2900      	cmp	r1, #0
    d4d6:	d04d      	beq.n	d574 <am_hal_cachectrl_control+0x2c8>
    d4d8:	680c      	ldr	r4, [r1, #0]
    d4da:	2c03      	cmp	r4, #3
    d4dc:	d84c      	bhi.n	d578 <am_hal_cachectrl_control+0x2cc>
    d4de:	f000 fd65 	bl	dfac <am_hal_interrupt_master_disable>
    d4e2:	4603      	mov	r3, r0
    d4e4:	482d      	ldr	r0, [pc, #180]	; (d59c <am_hal_cachectrl_control+0x2f0>)
    d4e6:	930b      	str	r3, [sp, #44]	; 0x2c
    d4e8:	f000 fbdc 	bl	dca4 <am_hal_flash_load_ui32>
    d4ec:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    d4f0:	ea40 3104 	orr.w	r1, r0, r4, lsl #12
    d4f4:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    d4f8:	4828      	ldr	r0, [pc, #160]	; (d59c <am_hal_cachectrl_control+0x2f0>)
    d4fa:	f000 fbd7 	bl	dcac <am_hal_flash_store_ui32>
    d4fe:	980b      	ldr	r0, [sp, #44]	; 0x2c
    d500:	f000 fd58 	bl	dfb4 <am_hal_interrupt_master_set>
    d504:	2000      	movs	r0, #0
    d506:	e6ef      	b.n	d2e8 <am_hal_cachectrl_control+0x3c>
    d508:	b3a1      	cbz	r1, d574 <am_hal_cachectrl_control+0x2c8>
    d50a:	680c      	ldr	r4, [r1, #0]
    d50c:	2c07      	cmp	r4, #7
    d50e:	d833      	bhi.n	d578 <am_hal_cachectrl_control+0x2cc>
    d510:	f000 fd4c 	bl	dfac <am_hal_interrupt_master_disable>
    d514:	4603      	mov	r3, r0
    d516:	4821      	ldr	r0, [pc, #132]	; (d59c <am_hal_cachectrl_control+0x2f0>)
    d518:	930c      	str	r3, [sp, #48]	; 0x30
    d51a:	f000 fbc3 	bl	dca4 <am_hal_flash_load_ui32>
    d51e:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    d522:	ea40 1104 	orr.w	r1, r0, r4, lsl #4
    d526:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    d52a:	481c      	ldr	r0, [pc, #112]	; (d59c <am_hal_cachectrl_control+0x2f0>)
    d52c:	f000 fbbe 	bl	dcac <am_hal_flash_store_ui32>
    d530:	980c      	ldr	r0, [sp, #48]	; 0x30
    d532:	f000 fd3f 	bl	dfb4 <am_hal_interrupt_master_set>
    d536:	2000      	movs	r0, #0
    d538:	e6d6      	b.n	d2e8 <am_hal_cachectrl_control+0x3c>
    d53a:	b1d9      	cbz	r1, d574 <am_hal_cachectrl_control+0x2c8>
    d53c:	680c      	ldr	r4, [r1, #0]
    d53e:	2c0f      	cmp	r4, #15
    d540:	d81a      	bhi.n	d578 <am_hal_cachectrl_control+0x2cc>
    d542:	f000 fd33 	bl	dfac <am_hal_interrupt_master_disable>
    d546:	4603      	mov	r3, r0
    d548:	4814      	ldr	r0, [pc, #80]	; (d59c <am_hal_cachectrl_control+0x2f0>)
    d54a:	930d      	str	r3, [sp, #52]	; 0x34
    d54c:	f000 fbaa 	bl	dca4 <am_hal_flash_load_ui32>
    d550:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    d554:	f020 000f 	bic.w	r0, r0, #15
    d558:	ea40 0104 	orr.w	r1, r0, r4
    d55c:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    d560:	480e      	ldr	r0, [pc, #56]	; (d59c <am_hal_cachectrl_control+0x2f0>)
    d562:	f000 fba3 	bl	dcac <am_hal_flash_store_ui32>
    d566:	980d      	ldr	r0, [sp, #52]	; 0x34
    d568:	f000 fd24 	bl	dfb4 <am_hal_interrupt_master_set>
    d56c:	2000      	movs	r0, #0
    d56e:	e6bb      	b.n	d2e8 <am_hal_cachectrl_control+0x3c>
    d570:	2007      	movs	r0, #7
    d572:	e6b9      	b.n	d2e8 <am_hal_cachectrl_control+0x3c>
    d574:	2006      	movs	r0, #6
    d576:	e6b7      	b.n	d2e8 <am_hal_cachectrl_control+0x3c>
    d578:	2001      	movs	r0, #1
    d57a:	e6b5      	b.n	d2e8 <am_hal_cachectrl_control+0x3c>
    d57c:	2c01      	cmp	r4, #1
    d57e:	d1f9      	bne.n	d574 <am_hal_cachectrl_control+0x2c8>
    d580:	4c04      	ldr	r4, [pc, #16]	; (d594 <am_hal_cachectrl_control+0x2e8>)
    d582:	7849      	ldrb	r1, [r1, #1]
    d584:	61a2      	str	r2, [r4, #24]
    d586:	61e3      	str	r3, [r4, #28]
    d588:	6823      	ldr	r3, [r4, #0]
    d58a:	f361 03c3 	bfi	r3, r1, #3, #1
    d58e:	6023      	str	r3, [r4, #0]
    d590:	e6aa      	b.n	d2e8 <am_hal_cachectrl_control+0x3c>
    d592:	bf00      	nop
    d594:	40018000 	.word	0x40018000
    d598:	f800000f 	.word	0xf800000f
    d59c:	40018004 	.word	0x40018004

0000d5a0 <am_hal_clkgen_control>:
    d5a0:	4b49      	ldr	r3, [pc, #292]	; (d6c8 <am_hal_clkgen_control+0x128>)
    d5a2:	681a      	ldr	r2, [r3, #0]
    d5a4:	b912      	cbnz	r2, d5ac <am_hal_clkgen_control+0xc>
    d5a6:	4a49      	ldr	r2, [pc, #292]	; (d6cc <am_hal_clkgen_control+0x12c>)
    d5a8:	6812      	ldr	r2, [r2, #0]
    d5aa:	601a      	str	r2, [r3, #0]
    d5ac:	2809      	cmp	r0, #9
    d5ae:	f200 8089 	bhi.w	d6c4 <am_hal_clkgen_control+0x124>
    d5b2:	e8df f000 	tbb	[pc, r0]
    d5b6:	160d      	.short	0x160d
    d5b8:	423a261e 	.word	0x423a261e
    d5bc:	055c544c 	.word	0x055c544c
    d5c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d5c4:	2000      	movs	r0, #0
    d5c6:	6a1a      	ldr	r2, [r3, #32]
    d5c8:	f36f 0200 	bfc	r2, #0, #1
    d5cc:	621a      	str	r2, [r3, #32]
    d5ce:	4770      	bx	lr
    d5d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d5d4:	2200      	movs	r2, #0
    d5d6:	2147      	movs	r1, #71	; 0x47
    d5d8:	6159      	str	r1, [r3, #20]
    d5da:	4610      	mov	r0, r2
    d5dc:	619a      	str	r2, [r3, #24]
    d5de:	615a      	str	r2, [r3, #20]
    d5e0:	4770      	bx	lr
    d5e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d5e6:	2000      	movs	r0, #0
    d5e8:	899a      	ldrh	r2, [r3, #12]
    d5ea:	f36f 0200 	bfc	r2, #0, #1
    d5ee:	819a      	strh	r2, [r3, #12]
    d5f0:	4770      	bx	lr
    d5f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d5f6:	2000      	movs	r0, #0
    d5f8:	899a      	ldrh	r2, [r3, #12]
    d5fa:	f36f 0241 	bfc	r2, #1, #1
    d5fe:	819a      	strh	r2, [r3, #12]
    d600:	4770      	bx	lr
    d602:	4a33      	ldr	r2, [pc, #204]	; (d6d0 <am_hal_clkgen_control+0x130>)
    d604:	68d3      	ldr	r3, [r2, #12]
    d606:	b2db      	uxtb	r3, r3
    d608:	2b21      	cmp	r3, #33	; 0x21
    d60a:	d106      	bne.n	d61a <am_hal_clkgen_control+0x7a>
    d60c:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    d610:	2101      	movs	r1, #1
    d612:	f361 2309 	bfi	r3, r1, #8, #2
    d616:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    d61a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d61e:	2000      	movs	r0, #0
    d620:	8993      	ldrh	r3, [r2, #12]
    d622:	f043 0301 	orr.w	r3, r3, #1
    d626:	8193      	strh	r3, [r2, #12]
    d628:	4770      	bx	lr
    d62a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d62e:	2000      	movs	r0, #0
    d630:	8993      	ldrh	r3, [r2, #12]
    d632:	f043 0302 	orr.w	r3, r3, #2
    d636:	8193      	strh	r3, [r2, #12]
    d638:	4770      	bx	lr
    d63a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d63e:	2200      	movs	r2, #0
    d640:	2047      	movs	r0, #71	; 0x47
    d642:	2101      	movs	r1, #1
    d644:	6158      	str	r0, [r3, #20]
    d646:	6199      	str	r1, [r3, #24]
    d648:	4610      	mov	r0, r2
    d64a:	615a      	str	r2, [r3, #20]
    d64c:	4770      	bx	lr
    d64e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d652:	2000      	movs	r0, #0
    d654:	899a      	ldrh	r2, [r3, #12]
    d656:	f36f 12c7 	bfc	r2, #7, #1
    d65a:	819a      	strh	r2, [r3, #12]
    d65c:	4770      	bx	lr
    d65e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d662:	2000      	movs	r0, #0
    d664:	8993      	ldrh	r3, [r2, #12]
    d666:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d66a:	8193      	strh	r3, [r2, #12]
    d66c:	4770      	bx	lr
    d66e:	4a18      	ldr	r2, [pc, #96]	; (d6d0 <am_hal_clkgen_control+0x130>)
    d670:	68d3      	ldr	r3, [r2, #12]
    d672:	b2db      	uxtb	r3, r3
    d674:	2b21      	cmp	r3, #33	; 0x21
    d676:	d00a      	beq.n	d68e <am_hal_clkgen_control+0xee>
    d678:	b139      	cbz	r1, d68a <am_hal_clkgen_control+0xea>
    d67a:	680b      	ldr	r3, [r1, #0]
    d67c:	f043 0301 	orr.w	r3, r3, #1
    d680:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d684:	2000      	movs	r0, #0
    d686:	6213      	str	r3, [r2, #32]
    d688:	4770      	bx	lr
    d68a:	4b12      	ldr	r3, [pc, #72]	; (d6d4 <am_hal_clkgen_control+0x134>)
    d68c:	e7f8      	b.n	d680 <am_hal_clkgen_control+0xe0>
    d68e:	b500      	push	{lr}
    d690:	b083      	sub	sp, #12
    d692:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
    d696:	9101      	str	r1, [sp, #4]
    d698:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    d69c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    d6a0:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    d6a4:	f000 fab8 	bl	dc18 <am_hal_flash_delay>
    d6a8:	9901      	ldr	r1, [sp, #4]
    d6aa:	b149      	cbz	r1, d6c0 <am_hal_clkgen_control+0x120>
    d6ac:	680b      	ldr	r3, [r1, #0]
    d6ae:	f043 0301 	orr.w	r3, r3, #1
    d6b2:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d6b6:	2000      	movs	r0, #0
    d6b8:	6213      	str	r3, [r2, #32]
    d6ba:	b003      	add	sp, #12
    d6bc:	f85d fb04 	ldr.w	pc, [sp], #4
    d6c0:	4b04      	ldr	r3, [pc, #16]	; (d6d4 <am_hal_clkgen_control+0x134>)
    d6c2:	e7f6      	b.n	d6b2 <am_hal_clkgen_control+0x112>
    d6c4:	2006      	movs	r0, #6
    d6c6:	4770      	bx	lr
    d6c8:	1000114c 	.word	0x1000114c
    d6cc:	4ffff000 	.word	0x4ffff000
    d6d0:	40020000 	.word	0x40020000
    d6d4:	0025b801 	.word	0x0025b801

0000d6d8 <am_hal_clkgen_status_get>:
    d6d8:	b1b0      	cbz	r0, d708 <am_hal_clkgen_status_get+0x30>
    d6da:	b410      	push	{r4}
    d6dc:	f04f 2140 	mov.w	r1, #1073758208	; 0x40004000
    d6e0:	4603      	mov	r3, r0
    d6e2:	698c      	ldr	r4, [r1, #24]
    d6e4:	4809      	ldr	r0, [pc, #36]	; (d70c <am_hal_clkgen_status_get+0x34>)
    d6e6:	4a0a      	ldr	r2, [pc, #40]	; (d710 <am_hal_clkgen_status_get+0x38>)
    d6e8:	f014 0f01 	tst.w	r4, #1
    d6ec:	bf08      	it	eq
    d6ee:	4602      	moveq	r2, r0
    d6f0:	601a      	str	r2, [r3, #0]
    d6f2:	69ca      	ldr	r2, [r1, #28]
    d6f4:	f85d 4b04 	ldr.w	r4, [sp], #4
    d6f8:	f002 0101 	and.w	r1, r2, #1
    d6fc:	f3c2 0240 	ubfx	r2, r2, #1, #1
    d700:	2000      	movs	r0, #0
    d702:	6059      	str	r1, [r3, #4]
    d704:	721a      	strb	r2, [r3, #8]
    d706:	4770      	bx	lr
    d708:	2006      	movs	r0, #6
    d70a:	4770      	bx	lr
    d70c:	02dc6c00 	.word	0x02dc6c00
    d710:	016e3600 	.word	0x016e3600

0000d714 <am_hal_ctimer_config_single>:
    d714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d718:	b082      	sub	sp, #8
    d71a:	460e      	mov	r6, r1
    d71c:	4605      	mov	r5, r0
    d71e:	4614      	mov	r4, r2
    d720:	f000 fc44 	bl	dfac <am_hal_interrupt_master_disable>
    d724:	4f20      	ldr	r7, [pc, #128]	; (d7a8 <am_hal_ctimer_config_single+0x94>)
    d726:	9001      	str	r0, [sp, #4]
    d728:	ea4f 1845 	mov.w	r8, r5, lsl #5
    d72c:	f006 2308 	and.w	r3, r6, #134219776	; 0x8000800
    d730:	f858 2007 	ldr.w	r2, [r8, r7]
    d734:	4313      	orrs	r3, r2
    d736:	f848 3007 	str.w	r3, [r8, r7]
    d73a:	9801      	ldr	r0, [sp, #4]
    d73c:	f000 fc3a 	bl	dfb4 <am_hal_interrupt_master_set>
    d740:	f000 fc34 	bl	dfac <am_hal_interrupt_master_disable>
    d744:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
    d748:	9000      	str	r0, [sp, #0]
    d74a:	f858 3007 	ldr.w	r3, [r8, r7]
    d74e:	d021      	beq.n	d794 <am_hal_ctimer_config_single+0x80>
    d750:	ea23 0306 	bic.w	r3, r3, r6
    d754:	1c72      	adds	r2, r6, #1
    d756:	ea43 0304 	orr.w	r3, r3, r4
    d75a:	d110      	bne.n	d77e <am_hal_ctimer_config_single+0x6a>
    d75c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    d760:	f848 3007 	str.w	r3, [r8, r7]
    d764:	9800      	ldr	r0, [sp, #0]
    d766:	f000 fc25 	bl	dfb4 <am_hal_interrupt_master_set>
    d76a:	2300      	movs	r3, #0
    d76c:	480f      	ldr	r0, [pc, #60]	; (d7ac <am_hal_ctimer_config_single+0x98>)
    d76e:	eb00 0545 	add.w	r5, r0, r5, lsl #1
    d772:	f3c4 0444 	ubfx	r4, r4, #1, #5
    d776:	54ec      	strb	r4, [r5, r3]
    d778:	b002      	add	sp, #8
    d77a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d77e:	f848 3007 	str.w	r3, [r8, r7]
    d782:	9800      	ldr	r0, [sp, #0]
    d784:	f000 fc16 	bl	dfb4 <am_hal_interrupt_master_set>
    d788:	f64f 73ff 	movw	r3, #65535	; 0xffff
    d78c:	429e      	cmp	r6, r3
    d78e:	d1f3      	bne.n	d778 <am_hal_ctimer_config_single+0x64>
    d790:	2300      	movs	r3, #0
    d792:	e7eb      	b.n	d76c <am_hal_ctimer_config_single+0x58>
    d794:	b29b      	uxth	r3, r3
    d796:	0424      	lsls	r4, r4, #16
    d798:	4323      	orrs	r3, r4
    d79a:	f848 3007 	str.w	r3, [r8, r7]
    d79e:	9800      	ldr	r0, [sp, #0]
    d7a0:	f000 fc08 	bl	dfb4 <am_hal_interrupt_master_set>
    d7a4:	2301      	movs	r3, #1
    d7a6:	e7e1      	b.n	d76c <am_hal_ctimer_config_single+0x58>
    d7a8:	4000800c 	.word	0x4000800c
    d7ac:	10001000 	.word	0x10001000

0000d7b0 <am_hal_ctimer_config_trigger>:
    d7b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    d7b2:	b083      	sub	sp, #12
    d7b4:	460d      	mov	r5, r1
    d7b6:	0144      	lsls	r4, r0, #5
    d7b8:	4616      	mov	r6, r2
    d7ba:	f000 fbf7 	bl	dfac <am_hal_interrupt_master_disable>
    d7be:	4f08      	ldr	r7, [pc, #32]	; (d7e0 <am_hal_ctimer_config_trigger+0x30>)
    d7c0:	9001      	str	r0, [sp, #4]
    d7c2:	59e1      	ldr	r1, [r4, r7]
    d7c4:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
    d7c8:	bf08      	it	eq
    d7ca:	0436      	lsleq	r6, r6, #16
    d7cc:	ea21 0105 	bic.w	r1, r1, r5
    d7d0:	4331      	orrs	r1, r6
    d7d2:	51e1      	str	r1, [r4, r7]
    d7d4:	9801      	ldr	r0, [sp, #4]
    d7d6:	b003      	add	sp, #12
    d7d8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    d7dc:	f000 bbea 	b.w	dfb4 <am_hal_interrupt_master_set>
    d7e0:	4000801c 	.word	0x4000801c

0000d7e4 <am_hal_ctimer_start>:
    d7e4:	b530      	push	{r4, r5, lr}
    d7e6:	b083      	sub	sp, #12
    d7e8:	460c      	mov	r4, r1
    d7ea:	4605      	mov	r5, r0
    d7ec:	f000 fbde 	bl	dfac <am_hal_interrupt_master_disable>
    d7f0:	ea4f 1c45 	mov.w	ip, r5, lsl #5
    d7f4:	4910      	ldr	r1, [pc, #64]	; (d838 <am_hal_ctimer_start+0x54>)
    d7f6:	9001      	str	r0, [sp, #4]
    d7f8:	f85c 3001 	ldr.w	r3, [ip, r1]
    d7fc:	f004 2208 	and.w	r2, r4, #134219776	; 0x8000800
    d800:	ea23 0202 	bic.w	r2, r3, r2
    d804:	f004 1301 	and.w	r3, r4, #65537	; 0x10001
    d808:	4313      	orrs	r3, r2
    d80a:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
    d80e:	f84c 3001 	str.w	r3, [ip, r1]
    d812:	bf0c      	ite	eq
    d814:	f3c3 4444 	ubfxeq	r4, r3, #17, #5
    d818:	f3c3 0444 	ubfxne	r4, r3, #1, #5
    d81c:	4b07      	ldr	r3, [pc, #28]	; (d83c <am_hal_ctimer_start+0x58>)
    d81e:	9801      	ldr	r0, [sp, #4]
    d820:	bf0c      	ite	eq
    d822:	2201      	moveq	r2, #1
    d824:	2200      	movne	r2, #0
    d826:	eb03 0545 	add.w	r5, r3, r5, lsl #1
    d82a:	54ac      	strb	r4, [r5, r2]
    d82c:	b003      	add	sp, #12
    d82e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    d832:	f000 bbbf 	b.w	dfb4 <am_hal_interrupt_master_set>
    d836:	bf00      	nop
    d838:	4000800c 	.word	0x4000800c
    d83c:	10001000 	.word	0x10001000

0000d840 <am_hal_ctimer_clear>:
    d840:	b530      	push	{r4, r5, lr}
    d842:	b083      	sub	sp, #12
    d844:	0145      	lsls	r5, r0, #5
    d846:	460c      	mov	r4, r1
    d848:	f000 fbb0 	bl	dfac <am_hal_interrupt_master_disable>
    d84c:	4b06      	ldr	r3, [pc, #24]	; (d868 <am_hal_ctimer_clear+0x28>)
    d84e:	9001      	str	r0, [sp, #4]
    d850:	58e9      	ldr	r1, [r5, r3]
    d852:	f004 2408 	and.w	r4, r4, #134219776	; 0x8000800
    d856:	430c      	orrs	r4, r1
    d858:	50ec      	str	r4, [r5, r3]
    d85a:	9801      	ldr	r0, [sp, #4]
    d85c:	b003      	add	sp, #12
    d85e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    d862:	f000 bba7 	b.w	dfb4 <am_hal_interrupt_master_set>
    d866:	bf00      	nop
    d868:	4000800c 	.word	0x4000800c

0000d86c <am_hal_ctimer_output_config>:
    d86c:	2a32      	cmp	r2, #50	; 0x32
    d86e:	d84d      	bhi.n	d90c <am_hal_ctimer_output_config+0xa0>
    d870:	2807      	cmp	r0, #7
    d872:	d84b      	bhi.n	d90c <am_hal_ctimer_output_config+0xa0>
    d874:	2b03      	cmp	r3, #3
    d876:	d849      	bhi.n	d90c <am_hal_ctimer_output_config+0xa0>
    d878:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d87c:	f64f 74ff 	movw	r4, #65535	; 0xffff
    d880:	42a1      	cmp	r1, r4
    d882:	b083      	sub	sp, #12
    d884:	f04f 0800 	mov.w	r8, #0
    d888:	d005      	beq.n	d896 <am_hal_ctimer_output_config+0x2a>
    d88a:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
    d88e:	d002      	beq.n	d896 <am_hal_ctimer_output_config+0x2a>
    d890:	1c4c      	adds	r4, r1, #1
    d892:	f040 80a7 	bne.w	d9e4 <am_hal_ctimer_output_config+0x178>
    d896:	4f8d      	ldr	r7, [pc, #564]	; (dacc <am_hal_ctimer_output_config+0x260>)
    d898:	2400      	movs	r4, #0
    d89a:	e003      	b.n	d8a4 <am_hal_ctimer_output_config+0x38>
    d89c:	3401      	adds	r4, #1
    d89e:	2c20      	cmp	r4, #32
    d8a0:	f000 80ac 	beq.w	d9fc <am_hal_ctimer_output_config+0x190>
    d8a4:	f837 5b02 	ldrh.w	r5, [r7], #2
    d8a8:	f005 063f 	and.w	r6, r5, #63	; 0x3f
    d8ac:	42b2      	cmp	r2, r6
    d8ae:	d1f5      	bne.n	d89c <am_hal_ctimer_output_config+0x30>
    d8b0:	2e32      	cmp	r6, #50	; 0x32
    d8b2:	f000 80a3 	beq.w	d9fc <am_hal_ctimer_output_config+0x190>
    d8b6:	2805      	cmp	r0, #5
    d8b8:	d92a      	bls.n	d910 <am_hal_ctimer_output_config+0xa4>
    d8ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
    d8be:	4291      	cmp	r1, r2
    d8c0:	d126      	bne.n	d910 <am_hal_ctimer_output_config+0xa4>
    d8c2:	2b01      	cmp	r3, #1
    d8c4:	d027      	beq.n	d916 <am_hal_ctimer_output_config+0xaa>
    d8c6:	d825      	bhi.n	d914 <am_hal_ctimer_output_config+0xa8>
    d8c8:	4a81      	ldr	r2, [pc, #516]	; (dad0 <am_hal_ctimer_output_config+0x264>)
    d8ca:	f812 1024 	ldrb.w	r1, [r2, r4, lsl #2]
    d8ce:	f001 0707 	and.w	r7, r1, #7
    d8d2:	42b8      	cmp	r0, r7
    d8d4:	f000 80ed 	beq.w	dab2 <am_hal_ctimer_output_config+0x246>
    d8d8:	eb02 0184 	add.w	r1, r2, r4, lsl #2
    d8dc:	784f      	ldrb	r7, [r1, #1]
    d8de:	f007 0c07 	and.w	ip, r7, #7
    d8e2:	4560      	cmp	r0, ip
    d8e4:	ea4f 0184 	mov.w	r1, r4, lsl #2
    d8e8:	f000 80d8 	beq.w	da9c <am_hal_ctimer_output_config+0x230>
    d8ec:	1857      	adds	r7, r2, r1
    d8ee:	78bf      	ldrb	r7, [r7, #2]
    d8f0:	f007 0c07 	and.w	ip, r7, #7
    d8f4:	4560      	cmp	r0, ip
    d8f6:	f000 80c6 	beq.w	da86 <am_hal_ctimer_output_config+0x21a>
    d8fa:	440a      	add	r2, r1
    d8fc:	78d2      	ldrb	r2, [r2, #3]
    d8fe:	f002 0107 	and.w	r1, r2, #7
    d902:	4288      	cmp	r0, r1
    d904:	f000 80b4 	beq.w	da70 <am_hal_ctimer_output_config+0x204>
    d908:	2007      	movs	r0, #7
    d90a:	e03e      	b.n	d98a <am_hal_ctimer_output_config+0x11e>
    d90c:	2006      	movs	r0, #6
    d90e:	4770      	bx	lr
    d910:	2b01      	cmp	r3, #1
    d912:	d93d      	bls.n	d990 <am_hal_ctimer_output_config+0x124>
    d914:	1e98      	subs	r0, r3, #2
    d916:	4b6f      	ldr	r3, [pc, #444]	; (dad4 <am_hal_ctimer_output_config+0x268>)
    d918:	fba3 2304 	umull	r2, r3, r3, r4
    d91c:	08db      	lsrs	r3, r3, #3
    d91e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    d922:	eba4 0343 	sub.w	r3, r4, r3, lsl #1
    d926:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    d92a:	2b04      	cmp	r3, #4
    d92c:	bf88      	it	hi
    d92e:	3201      	addhi	r2, #1
    d930:	f04f 0907 	mov.w	r9, #7
    d934:	fa00 f702 	lsl.w	r7, r0, r2
    d938:	fa09 f902 	lsl.w	r9, r9, r2
    d93c:	f000 fb36 	bl	dfac <am_hal_interrupt_master_disable>
    d940:	2c09      	cmp	r4, #9
    d942:	4b65      	ldr	r3, [pc, #404]	; (dad8 <am_hal_ctimer_output_config+0x26c>)
    d944:	9001      	str	r0, [sp, #4]
    d946:	d84f      	bhi.n	d9e8 <am_hal_ctimer_output_config+0x17c>
    d948:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    d94c:	ea22 0209 	bic.w	r2, r2, r9
    d950:	433a      	orrs	r2, r7
    d952:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    d956:	4a61      	ldr	r2, [pc, #388]	; (dadc <am_hal_ctimer_output_config+0x270>)
    d958:	2301      	movs	r3, #1
    d95a:	40a3      	lsls	r3, r4
    d95c:	f8d2 4118 	ldr.w	r4, [r2, #280]	; 0x118
    d960:	ea24 0403 	bic.w	r4, r4, r3
    d964:	f8c2 4118 	str.w	r4, [r2, #280]	; 0x118
    d968:	9801      	ldr	r0, [sp, #4]
    d96a:	f000 fb23 	bl	dfb4 <am_hal_interrupt_master_set>
    d96e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d970:	f3c5 2502 	ubfx	r5, r5, #8, #3
    d974:	f003 0303 	and.w	r3, r3, #3
    d978:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
    d97c:	f365 080f 	bfi	r8, r5, #0, #16
    d980:	4641      	mov	r1, r8
    d982:	4630      	mov	r0, r6
    d984:	f000 f998 	bl	dcb8 <am_hal_gpio_pinconfig>
    d988:	2000      	movs	r0, #0
    d98a:	b003      	add	sp, #12
    d98c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    d990:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
    d994:	d152      	bne.n	da3c <am_hal_ctimer_output_config+0x1d0>
    d996:	4a4e      	ldr	r2, [pc, #312]	; (dad0 <am_hal_ctimer_output_config+0x264>)
    d998:	f812 1024 	ldrb.w	r1, [r2, r4, lsl #2]
    d99c:	f001 0707 	and.w	r7, r1, #7
    d9a0:	42b8      	cmp	r0, r7
    d9a2:	d041      	beq.n	da28 <am_hal_ctimer_output_config+0x1bc>
    d9a4:	eb02 0184 	add.w	r1, r2, r4, lsl #2
    d9a8:	784f      	ldrb	r7, [r1, #1]
    d9aa:	f007 0c07 	and.w	ip, r7, #7
    d9ae:	4560      	cmp	r0, ip
    d9b0:	ea4f 0184 	mov.w	r1, r4, lsl #2
    d9b4:	d052      	beq.n	da5c <am_hal_ctimer_output_config+0x1f0>
    d9b6:	1857      	adds	r7, r2, r1
    d9b8:	78bf      	ldrb	r7, [r7, #2]
    d9ba:	f007 0c07 	and.w	ip, r7, #7
    d9be:	4560      	cmp	r0, ip
    d9c0:	d042      	beq.n	da48 <am_hal_ctimer_output_config+0x1dc>
    d9c2:	440a      	add	r2, r1
    d9c4:	78d2      	ldrb	r2, [r2, #3]
    d9c6:	f002 0107 	and.w	r1, r2, #7
    d9ca:	4288      	cmp	r0, r1
    d9cc:	d19c      	bne.n	d908 <am_hal_ctimer_output_config+0x9c>
    d9ce:	f3c2 1100 	ubfx	r1, r2, #4, #1
    d9d2:	0712      	lsls	r2, r2, #28
    d9d4:	f003 0301 	and.w	r3, r3, #1
    d9d8:	d596      	bpl.n	d908 <am_hal_ctimer_output_config+0x9c>
    d9da:	4299      	cmp	r1, r3
    d9dc:	d194      	bne.n	d908 <am_hal_ctimer_output_config+0x9c>
    d9de:	2003      	movs	r0, #3
    d9e0:	3002      	adds	r0, #2
    d9e2:	e798      	b.n	d916 <am_hal_ctimer_output_config+0xaa>
    d9e4:	2006      	movs	r0, #6
    d9e6:	e7d0      	b.n	d98a <am_hal_ctimer_output_config+0x11e>
    d9e8:	2c13      	cmp	r4, #19
    d9ea:	d80b      	bhi.n	da04 <am_hal_ctimer_output_config+0x198>
    d9ec:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
    d9f0:	ea22 0209 	bic.w	r2, r2, r9
    d9f4:	433a      	orrs	r2, r7
    d9f6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    d9fa:	e7ac      	b.n	d956 <am_hal_ctimer_output_config+0xea>
    d9fc:	2005      	movs	r0, #5
    d9fe:	b003      	add	sp, #12
    da00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    da04:	2c1d      	cmp	r4, #29
    da06:	d807      	bhi.n	da18 <am_hal_ctimer_output_config+0x1ac>
    da08:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
    da0c:	ea22 0209 	bic.w	r2, r2, r9
    da10:	433a      	orrs	r2, r7
    da12:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    da16:	e79e      	b.n	d956 <am_hal_ctimer_output_config+0xea>
    da18:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
    da1c:	ea22 0209 	bic.w	r2, r2, r9
    da20:	433a      	orrs	r2, r7
    da22:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    da26:	e796      	b.n	d956 <am_hal_ctimer_output_config+0xea>
    da28:	f3c1 1c00 	ubfx	ip, r1, #4, #1
    da2c:	0709      	lsls	r1, r1, #28
    da2e:	f003 0701 	and.w	r7, r3, #1
    da32:	d5b7      	bpl.n	d9a4 <am_hal_ctimer_output_config+0x138>
    da34:	45bc      	cmp	ip, r7
    da36:	d1b5      	bne.n	d9a4 <am_hal_ctimer_output_config+0x138>
    da38:	2000      	movs	r0, #0
    da3a:	e7d1      	b.n	d9e0 <am_hal_ctimer_output_config+0x174>
    da3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    da40:	4291      	cmp	r1, r2
    da42:	f47f af61 	bne.w	d908 <am_hal_ctimer_output_config+0x9c>
    da46:	e73f      	b.n	d8c8 <am_hal_ctimer_output_config+0x5c>
    da48:	f3c7 1e00 	ubfx	lr, r7, #4, #1
    da4c:	073f      	lsls	r7, r7, #28
    da4e:	f003 0c01 	and.w	ip, r3, #1
    da52:	d5b6      	bpl.n	d9c2 <am_hal_ctimer_output_config+0x156>
    da54:	45e6      	cmp	lr, ip
    da56:	d1b4      	bne.n	d9c2 <am_hal_ctimer_output_config+0x156>
    da58:	2002      	movs	r0, #2
    da5a:	e7c1      	b.n	d9e0 <am_hal_ctimer_output_config+0x174>
    da5c:	f3c7 1e00 	ubfx	lr, r7, #4, #1
    da60:	073f      	lsls	r7, r7, #28
    da62:	f003 0c01 	and.w	ip, r3, #1
    da66:	d5a6      	bpl.n	d9b6 <am_hal_ctimer_output_config+0x14a>
    da68:	45e6      	cmp	lr, ip
    da6a:	d1a4      	bne.n	d9b6 <am_hal_ctimer_output_config+0x14a>
    da6c:	2001      	movs	r0, #1
    da6e:	e7b7      	b.n	d9e0 <am_hal_ctimer_output_config+0x174>
    da70:	0710      	lsls	r0, r2, #28
    da72:	f003 0301 	and.w	r3, r3, #1
    da76:	f3c2 1100 	ubfx	r1, r2, #4, #1
    da7a:	f53f af45 	bmi.w	d908 <am_hal_ctimer_output_config+0x9c>
    da7e:	428b      	cmp	r3, r1
    da80:	f47f af42 	bne.w	d908 <am_hal_ctimer_output_config+0x9c>
    da84:	e7ab      	b.n	d9de <am_hal_ctimer_output_config+0x172>
    da86:	f3c7 1e00 	ubfx	lr, r7, #4, #1
    da8a:	073f      	lsls	r7, r7, #28
    da8c:	f003 0c01 	and.w	ip, r3, #1
    da90:	f53f af33 	bmi.w	d8fa <am_hal_ctimer_output_config+0x8e>
    da94:	45e6      	cmp	lr, ip
    da96:	f47f af30 	bne.w	d8fa <am_hal_ctimer_output_config+0x8e>
    da9a:	e7dd      	b.n	da58 <am_hal_ctimer_output_config+0x1ec>
    da9c:	f3c7 1e00 	ubfx	lr, r7, #4, #1
    daa0:	073f      	lsls	r7, r7, #28
    daa2:	f003 0c01 	and.w	ip, r3, #1
    daa6:	f53f af21 	bmi.w	d8ec <am_hal_ctimer_output_config+0x80>
    daaa:	45e6      	cmp	lr, ip
    daac:	f47f af1e 	bne.w	d8ec <am_hal_ctimer_output_config+0x80>
    dab0:	e7dc      	b.n	da6c <am_hal_ctimer_output_config+0x200>
    dab2:	f3c1 1c00 	ubfx	ip, r1, #4, #1
    dab6:	f011 0108 	ands.w	r1, r1, #8
    daba:	f003 0701 	and.w	r7, r3, #1
    dabe:	f47f af0b 	bne.w	d8d8 <am_hal_ctimer_output_config+0x6c>
    dac2:	45bc      	cmp	ip, r7
    dac4:	f47f af08 	bne.w	d8d8 <am_hal_ctimer_output_config+0x6c>
    dac8:	e7b6      	b.n	da38 <am_hal_ctimer_output_config+0x1cc>
    daca:	bf00      	nop
    dacc:	0000e850 	.word	0x0000e850
    dad0:	0000e890 	.word	0x0000e890
    dad4:	cccccccd 	.word	0xcccccccd
    dad8:	40008000 	.word	0x40008000
    dadc:	40010000 	.word	0x40010000

0000dae0 <am_hal_ctimer_compare_set>:
    dae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    dae4:	460e      	mov	r6, r1
    dae6:	b082      	sub	sp, #8
    dae8:	3101      	adds	r1, #1
    daea:	ea4f 1540 	mov.w	r5, r0, lsl #5
    daee:	bf0c      	ite	eq
    daf0:	0c1f      	lsreq	r7, r3, #16
    daf2:	b29f      	uxthne	r7, r3
    daf4:	4692      	mov	sl, r2
    daf6:	461c      	mov	r4, r3
    daf8:	f000 fa58 	bl	dfac <am_hal_interrupt_master_disable>
    dafc:	f8df 805c 	ldr.w	r8, [pc, #92]	; db5c <am_hal_ctimer_compare_set+0x7c>
    db00:	f8df 905c 	ldr.w	r9, [pc, #92]	; db60 <am_hal_ctimer_compare_set+0x80>
    db04:	9001      	str	r0, [sp, #4]
    db06:	f1ba 0f01 	cmp.w	sl, #1
    db0a:	f855 3008 	ldr.w	r3, [r5, r8]
    db0e:	f855 1009 	ldr.w	r1, [r5, r9]
    db12:	d01a      	beq.n	db4a <am_hal_ctimer_compare_set+0x6a>
    db14:	4a10      	ldr	r2, [pc, #64]	; (db58 <am_hal_ctimer_compare_set+0x78>)
    db16:	b2a4      	uxth	r4, r4
    db18:	4013      	ands	r3, r2
    db1a:	4011      	ands	r1, r2
    db1c:	431c      	orrs	r4, r3
    db1e:	4339      	orrs	r1, r7
    db20:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
    db24:	d009      	beq.n	db3a <am_hal_ctimer_compare_set+0x5a>
    db26:	3601      	adds	r6, #1
    db28:	f845 4008 	str.w	r4, [r5, r8]
    db2c:	d005      	beq.n	db3a <am_hal_ctimer_compare_set+0x5a>
    db2e:	9801      	ldr	r0, [sp, #4]
    db30:	b002      	add	sp, #8
    db32:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    db36:	f000 ba3d 	b.w	dfb4 <am_hal_interrupt_master_set>
    db3a:	f845 1009 	str.w	r1, [r5, r9]
    db3e:	9801      	ldr	r0, [sp, #4]
    db40:	b002      	add	sp, #8
    db42:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    db46:	f000 ba35 	b.w	dfb4 <am_hal_interrupt_master_set>
    db4a:	b29b      	uxth	r3, r3
    db4c:	b289      	uxth	r1, r1
    db4e:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
    db52:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
    db56:	e7e3      	b.n	db20 <am_hal_ctimer_compare_set+0x40>
    db58:	ffff0000 	.word	0xffff0000
    db5c:	40008004 	.word	0x40008004
    db60:	40008008 	.word	0x40008008

0000db64 <am_hal_ctimer_period_set>:
    db64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    db68:	b082      	sub	sp, #8
    db6a:	0145      	lsls	r5, r0, #5
    db6c:	460e      	mov	r6, r1
    db6e:	4614      	mov	r4, r2
    db70:	461f      	mov	r7, r3
    db72:	f000 fa1b 	bl	dfac <am_hal_interrupt_master_disable>
    db76:	f8df 809c 	ldr.w	r8, [pc, #156]	; dc14 <am_hal_ctimer_period_set+0xb0>
    db7a:	9001      	str	r0, [sp, #4]
    db7c:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
    db80:	f855 2008 	ldr.w	r2, [r5, r8]
    db84:	4821      	ldr	r0, [pc, #132]	; (dc0c <am_hal_ctimer_period_set+0xa8>)
    db86:	d02f      	beq.n	dbe8 <am_hal_ctimer_period_set+0x84>
    db88:	f402 72c0 	and.w	r2, r2, #384	; 0x180
    db8c:	2a80      	cmp	r2, #128	; 0x80
    db8e:	d019      	beq.n	dbc4 <am_hal_ctimer_period_set+0x60>
    db90:	f64f 72ff 	movw	r2, #65535	; 0xffff
    db94:	2100      	movs	r1, #0
    db96:	4296      	cmp	r6, r2
    db98:	460b      	mov	r3, r1
    db9a:	d01c      	beq.n	dbd6 <am_hal_ctimer_period_set+0x72>
    db9c:	4a1c      	ldr	r2, [pc, #112]	; (dc10 <am_hal_ctimer_period_set+0xac>)
    db9e:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
    dba2:	eb05 0702 	add.w	r7, r5, r2
    dba6:	d027      	beq.n	dbf8 <am_hal_ctimer_period_set+0x94>
    dba8:	0c1b      	lsrs	r3, r3, #16
    dbaa:	041b      	lsls	r3, r3, #16
    dbac:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
    dbb0:	b2a4      	uxth	r4, r4
    dbb2:	4321      	orrs	r1, r4
    dbb4:	5029      	str	r1, [r5, r0]
    dbb6:	50ab      	str	r3, [r5, r2]
    dbb8:	9801      	ldr	r0, [sp, #4]
    dbba:	b002      	add	sp, #8
    dbbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    dbc0:	f000 b9f8 	b.w	dfb4 <am_hal_interrupt_master_set>
    dbc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
    dbc8:	4296      	cmp	r6, r2
    dbca:	ea4f 4104 	mov.w	r1, r4, lsl #16
    dbce:	4623      	mov	r3, r4
    dbd0:	eba4 0407 	sub.w	r4, r4, r7
    dbd4:	d1e2      	bne.n	db9c <am_hal_ctimer_period_set+0x38>
    dbd6:	b2a4      	uxth	r4, r4
    dbd8:	4321      	orrs	r1, r4
    dbda:	5029      	str	r1, [r5, r0]
    dbdc:	9801      	ldr	r0, [sp, #4]
    dbde:	b002      	add	sp, #8
    dbe0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    dbe4:	f000 b9e6 	b.w	dfb4 <am_hal_interrupt_master_set>
    dbe8:	0c12      	lsrs	r2, r2, #16
    dbea:	f402 72c0 	and.w	r2, r2, #384	; 0x180
    dbee:	2a80      	cmp	r2, #128	; 0x80
    dbf0:	d0e8      	beq.n	dbc4 <am_hal_ctimer_period_set+0x60>
    dbf2:	4f07      	ldr	r7, [pc, #28]	; (dc10 <am_hal_ctimer_period_set+0xac>)
    dbf4:	2100      	movs	r1, #0
    dbf6:	442f      	add	r7, r5
    dbf8:	b2a4      	uxth	r4, r4
    dbfa:	4321      	orrs	r1, r4
    dbfc:	6039      	str	r1, [r7, #0]
    dbfe:	9801      	ldr	r0, [sp, #4]
    dc00:	b002      	add	sp, #8
    dc02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    dc06:	f000 b9d5 	b.w	dfb4 <am_hal_interrupt_master_set>
    dc0a:	bf00      	nop
    dc0c:	40008004 	.word	0x40008004
    dc10:	40008008 	.word	0x40008008
    dc14:	4000800c 	.word	0x4000800c

0000dc18 <am_hal_flash_delay>:
    dc18:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    dc1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    dc1e:	075b      	lsls	r3, r3, #29
    dc20:	bf46      	itte	mi
    dc22:	0040      	lslmi	r0, r0, #1
    dc24:	230e      	movmi	r3, #14
    dc26:	230b      	movpl	r3, #11
    dc28:	4298      	cmp	r0, r3
    dc2a:	d902      	bls.n	dc32 <am_hal_flash_delay+0x1a>
    dc2c:	4a01      	ldr	r2, [pc, #4]	; (dc34 <am_hal_flash_delay+0x1c>)
    dc2e:	1ac0      	subs	r0, r0, r3
    dc30:	4710      	bx	r2
    dc32:	4770      	bx	lr
    dc34:	0800009d 	.word	0x0800009d

0000dc38 <am_hal_flash_delay_status_check>:
    dc38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    dc3c:	f89d c020 	ldrb.w	ip, [sp, #32]
    dc40:	f8df 805c 	ldr.w	r8, [pc, #92]	; dca0 <am_hal_flash_delay_status_check+0x68>
    dc44:	4604      	mov	r4, r0
    dc46:	460d      	mov	r5, r1
    dc48:	4616      	mov	r6, r2
    dc4a:	461f      	mov	r7, r3
    dc4c:	f04f 2940 	mov.w	r9, #1073758208	; 0x40004000
    dc50:	f1bc 0f00 	cmp.w	ip, #0
    dc54:	d00a      	beq.n	dc6c <am_hal_flash_delay_status_check+0x34>
    dc56:	e01a      	b.n	dc8e <am_hal_flash_delay_status_check+0x56>
    dc58:	b1f4      	cbz	r4, dc98 <am_hal_flash_delay_status_check+0x60>
    dc5a:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    dc5e:	f013 0f04 	tst.w	r3, #4
    dc62:	bf0c      	ite	eq
    dc64:	2005      	moveq	r0, #5
    dc66:	2012      	movne	r0, #18
    dc68:	3c01      	subs	r4, #1
    dc6a:	47c0      	blx	r8
    dc6c:	6828      	ldr	r0, [r5, #0]
    dc6e:	4030      	ands	r0, r6
    dc70:	42b8      	cmp	r0, r7
    dc72:	d0f1      	beq.n	dc58 <am_hal_flash_delay_status_check+0x20>
    dc74:	2000      	movs	r0, #0
    dc76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    dc7a:	b16c      	cbz	r4, dc98 <am_hal_flash_delay_status_check+0x60>
    dc7c:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    dc80:	f013 0f04 	tst.w	r3, #4
    dc84:	bf0c      	ite	eq
    dc86:	2005      	moveq	r0, #5
    dc88:	2012      	movne	r0, #18
    dc8a:	3c01      	subs	r4, #1
    dc8c:	47c0      	blx	r8
    dc8e:	6828      	ldr	r0, [r5, #0]
    dc90:	4030      	ands	r0, r6
    dc92:	42b8      	cmp	r0, r7
    dc94:	d1f1      	bne.n	dc7a <am_hal_flash_delay_status_check+0x42>
    dc96:	e7ed      	b.n	dc74 <am_hal_flash_delay_status_check+0x3c>
    dc98:	2004      	movs	r0, #4
    dc9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    dc9e:	bf00      	nop
    dca0:	0800009d 	.word	0x0800009d

0000dca4 <am_hal_flash_load_ui32>:
    dca4:	4b00      	ldr	r3, [pc, #0]	; (dca8 <am_hal_flash_load_ui32+0x4>)
    dca6:	4718      	bx	r3
    dca8:	08000075 	.word	0x08000075

0000dcac <am_hal_flash_store_ui32>:
    dcac:	4b01      	ldr	r3, [pc, #4]	; (dcb4 <am_hal_flash_store_ui32+0x8>)
    dcae:	f043 0301 	orr.w	r3, r3, #1
    dcb2:	4718      	bx	r3
    dcb4:	10001010 	.word	0x10001010

0000dcb8 <am_hal_gpio_pinconfig>:
    dcb8:	2831      	cmp	r0, #49	; 0x31
    dcba:	f200 80c3 	bhi.w	de44 <am_hal_gpio_pinconfig+0x18c>
    dcbe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dcc2:	4604      	mov	r4, r0
    dcc4:	f011 07e0 	ands.w	r7, r1, #224	; 0xe0
    dcc8:	f001 0007 	and.w	r0, r1, #7
    dccc:	b085      	sub	sp, #20
    dcce:	f3c1 03c1 	ubfx	r3, r1, #3, #2
    dcd2:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    dcd6:	d00f      	beq.n	dcf8 <am_hal_gpio_pinconfig+0x40>
    dcd8:	f3c1 1642 	ubfx	r6, r1, #5, #3
    dcdc:	1db5      	adds	r5, r6, #6
    dcde:	f005 0507 	and.w	r5, r5, #7
    dce2:	2d03      	cmp	r5, #3
    dce4:	f042 0201 	orr.w	r2, r2, #1
    dce8:	f240 80ae 	bls.w	de48 <am_hal_gpio_pinconfig+0x190>
    dcec:	2fc0      	cmp	r7, #192	; 0xc0
    dcee:	f000 80e1 	beq.w	deb4 <am_hal_gpio_pinconfig+0x1fc>
    dcf2:	2f20      	cmp	r7, #32
    dcf4:	f000 80e3 	beq.w	debe <am_hal_gpio_pinconfig+0x206>
    dcf8:	b163      	cbz	r3, dd14 <am_hal_gpio_pinconfig+0x5c>
    dcfa:	2b01      	cmp	r3, #1
    dcfc:	f000 80d3 	beq.w	dea6 <am_hal_gpio_pinconfig+0x1ee>
    dd00:	2b02      	cmp	r3, #2
    dd02:	f040 80c9 	bne.w	de98 <am_hal_gpio_pinconfig+0x1e0>
    dd06:	4b79      	ldr	r3, [pc, #484]	; (deec <am_hal_gpio_pinconfig+0x234>)
    dd08:	5d1b      	ldrb	r3, [r3, r4]
    dd0a:	075b      	lsls	r3, r3, #29
    dd0c:	f140 80c4 	bpl.w	de98 <am_hal_gpio_pinconfig+0x1e0>
    dd10:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    dd14:	4b76      	ldr	r3, [pc, #472]	; (def0 <am_hal_gpio_pinconfig+0x238>)
    dd16:	5d1b      	ldrb	r3, [r3, r4]
    dd18:	4103      	asrs	r3, r0
    dd1a:	005b      	lsls	r3, r3, #1
    dd1c:	f003 0302 	and.w	r3, r3, #2
    dd20:	4313      	orrs	r3, r2
    dd22:	4a74      	ldr	r2, [pc, #464]	; (def4 <am_hal_gpio_pinconfig+0x23c>)
    dd24:	5d12      	ldrb	r2, [r2, r4]
    dd26:	4282      	cmp	r2, r0
    dd28:	f000 8099 	beq.w	de5e <am_hal_gpio_pinconfig+0x1a6>
    dd2c:	f3c1 3000 	ubfx	r0, r1, #12, #1
    dd30:	f3c1 2581 	ubfx	r5, r1, #10, #2
    dd34:	f3c1 3280 	ubfx	r2, r1, #14, #1
    dd38:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
    dd3c:	0a88      	lsrs	r0, r1, #10
    dd3e:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    dd42:	f000 0008 	and.w	r0, r0, #8
    dd46:	4302      	orrs	r2, r0
    dd48:	f3c1 2007 	ubfx	r0, r1, #8, #8
    dd4c:	f000 050c 	and.w	r5, r0, #12
    dd50:	2d04      	cmp	r5, #4
    dd52:	f000 80a5 	beq.w	dea0 <am_hal_gpio_pinconfig+0x1e8>
    dd56:	4d68      	ldr	r5, [pc, #416]	; (def8 <am_hal_gpio_pinconfig+0x240>)
    dd58:	682d      	ldr	r5, [r5, #0]
    dd5a:	eba1 0805 	sub.w	r8, r1, r5
    dd5e:	fab8 f888 	clz	r8, r8
    dd62:	ea4f 1858 	mov.w	r8, r8, lsr #5
    dd66:	f010 0f60 	tst.w	r0, #96	; 0x60
    dd6a:	bf04      	itt	eq
    dd6c:	f3c1 30c0 	ubfxeq	r0, r1, #15, #1
    dd70:	f360 0200 	bfieq	r2, r0, #0, #1
    dd74:	00a0      	lsls	r0, r4, #2
    dd76:	f3c1 2101 	ubfx	r1, r1, #8, #2
    dd7a:	2902      	cmp	r1, #2
    dd7c:	d05c      	beq.n	de38 <am_hal_gpio_pinconfig+0x180>
    dd7e:	2903      	cmp	r1, #3
    dd80:	d058      	beq.n	de34 <am_hal_gpio_pinconfig+0x17c>
    dd82:	2901      	cmp	r1, #1
    dd84:	ea4f 01c4 	mov.w	r1, r4, lsl #3
    dd88:	bf08      	it	eq
    dd8a:	f043 0304 	orreq.w	r3, r3, #4
    dd8e:	f001 0118 	and.w	r1, r1, #24
    dd92:	2700      	movs	r7, #0
    dd94:	f000 001c 	and.w	r0, r0, #28
    dd98:	fa02 f600 	lsl.w	r6, r2, r0
    dd9c:	220f      	movs	r2, #15
    dd9e:	4082      	lsls	r2, r0
    dda0:	43d2      	mvns	r2, r2
    dda2:	f04f 09ff 	mov.w	r9, #255	; 0xff
    dda6:	fa03 f501 	lsl.w	r5, r3, r1
    ddaa:	fa09 f901 	lsl.w	r9, r9, r1
    ddae:	9201      	str	r2, [sp, #4]
    ddb0:	f000 f8fc 	bl	dfac <am_hal_interrupt_master_disable>
    ddb4:	f024 0a03 	bic.w	sl, r4, #3
    ddb8:	ea4f 0b54 	mov.w	fp, r4, lsr #1
    ddbc:	f10a 4c80 	add.w	ip, sl, #1073741824	; 0x40000000
    ddc0:	4b4e      	ldr	r3, [pc, #312]	; (defc <am_hal_gpio_pinconfig+0x244>)
    ddc2:	494f      	ldr	r1, [pc, #316]	; (df00 <am_hal_gpio_pinconfig+0x248>)
    ddc4:	9a01      	ldr	r2, [sp, #4]
    ddc6:	9003      	str	r0, [sp, #12]
    ddc8:	ea6f 0909 	mvn.w	r9, r9
    ddcc:	f02b 0b03 	bic.w	fp, fp, #3
    ddd0:	f50c 3c80 	add.w	ip, ip, #65536	; 0x10000
    ddd4:	f1b8 0f00 	cmp.w	r8, #0
    ddd8:	d00b      	beq.n	ddf2 <am_hal_gpio_pinconfig+0x13a>
    ddda:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
    ddde:	f004 081f 	and.w	r8, r4, #31
    dde2:	4848      	ldr	r0, [pc, #288]	; (df04 <am_hal_gpio_pinconfig+0x24c>)
    dde4:	f00e 0e04 	and.w	lr, lr, #4
    dde8:	2401      	movs	r4, #1
    ddea:	fa04 f408 	lsl.w	r4, r4, r8
    ddee:	f84e 4000 	str.w	r4, [lr, r0]
    ddf2:	4845      	ldr	r0, [pc, #276]	; (df08 <am_hal_gpio_pinconfig+0x250>)
    ddf4:	2473      	movs	r4, #115	; 0x73
    ddf6:	6604      	str	r4, [r0, #96]	; 0x60
    ddf8:	f8dc 4000 	ldr.w	r4, [ip]
    ddfc:	ea04 0409 	and.w	r4, r4, r9
    de00:	4325      	orrs	r5, r4
    de02:	f8cc 5000 	str.w	r5, [ip]
    de06:	f85b 4003 	ldr.w	r4, [fp, r3]
    de0a:	4022      	ands	r2, r4
    de0c:	4332      	orrs	r2, r6
    de0e:	f84b 2003 	str.w	r2, [fp, r3]
    de12:	f85a 3001 	ldr.w	r3, [sl, r1]
    de16:	ea03 0909 	and.w	r9, r3, r9
    de1a:	2400      	movs	r4, #0
    de1c:	ea49 0707 	orr.w	r7, r9, r7
    de20:	f84a 7001 	str.w	r7, [sl, r1]
    de24:	6604      	str	r4, [r0, #96]	; 0x60
    de26:	9803      	ldr	r0, [sp, #12]
    de28:	f000 f8c4 	bl	dfb4 <am_hal_interrupt_master_set>
    de2c:	4620      	mov	r0, r4
    de2e:	b005      	add	sp, #20
    de30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    de34:	f043 0304 	orr.w	r3, r3, #4
    de38:	00e1      	lsls	r1, r4, #3
    de3a:	f001 0118 	and.w	r1, r1, #24
    de3e:	2701      	movs	r7, #1
    de40:	408f      	lsls	r7, r1
    de42:	e7a7      	b.n	dd94 <am_hal_gpio_pinconfig+0xdc>
    de44:	2006      	movs	r0, #6
    de46:	4770      	bx	lr
    de48:	4d28      	ldr	r5, [pc, #160]	; (deec <am_hal_gpio_pinconfig+0x234>)
    de4a:	5d2d      	ldrb	r5, [r5, r4]
    de4c:	3e02      	subs	r6, #2
    de4e:	ea42 1286 	orr.w	r2, r2, r6, lsl #6
    de52:	07ee      	lsls	r6, r5, #31
    de54:	d536      	bpl.n	dec4 <am_hal_gpio_pinconfig+0x20c>
    de56:	2b00      	cmp	r3, #0
    de58:	f43f af5c 	beq.w	dd14 <am_hal_gpio_pinconfig+0x5c>
    de5c:	e74d      	b.n	dcfa <am_hal_gpio_pinconfig+0x42>
    de5e:	f3c1 4202 	ubfx	r2, r1, #16, #3
    de62:	2a07      	cmp	r2, #7
    de64:	d030      	beq.n	dec8 <am_hal_gpio_pinconfig+0x210>
    de66:	4d29      	ldr	r5, [pc, #164]	; (df0c <am_hal_gpio_pinconfig+0x254>)
    de68:	f3c1 40c1 	ubfx	r0, r1, #19, #2
    de6c:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
    de70:	f815 0024 	ldrb.w	r0, [r5, r4, lsl #2]
    de74:	4290      	cmp	r0, r2
    de76:	d029      	beq.n	decc <am_hal_gpio_pinconfig+0x214>
    de78:	eb05 0584 	add.w	r5, r5, r4, lsl #2
    de7c:	00a0      	lsls	r0, r4, #2
    de7e:	786e      	ldrb	r6, [r5, #1]
    de80:	4296      	cmp	r6, r2
    de82:	d02d      	beq.n	dee0 <am_hal_gpio_pinconfig+0x228>
    de84:	78ae      	ldrb	r6, [r5, #2]
    de86:	4296      	cmp	r6, r2
    de88:	d02c      	beq.n	dee4 <am_hal_gpio_pinconfig+0x22c>
    de8a:	78ed      	ldrb	r5, [r5, #3]
    de8c:	4295      	cmp	r5, r2
    de8e:	d02b      	beq.n	dee8 <am_hal_gpio_pinconfig+0x230>
    de90:	481f      	ldr	r0, [pc, #124]	; (df10 <am_hal_gpio_pinconfig+0x258>)
    de92:	b005      	add	sp, #20
    de94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    de98:	481e      	ldr	r0, [pc, #120]	; (df14 <am_hal_gpio_pinconfig+0x25c>)
    de9a:	b005      	add	sp, #20
    de9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dea0:	f04f 0801 	mov.w	r8, #1
    dea4:	e75f      	b.n	dd66 <am_hal_gpio_pinconfig+0xae>
    dea6:	4b11      	ldr	r3, [pc, #68]	; (deec <am_hal_gpio_pinconfig+0x234>)
    dea8:	5d1b      	ldrb	r3, [r3, r4]
    deaa:	079d      	lsls	r5, r3, #30
    deac:	d5f4      	bpl.n	de98 <am_hal_gpio_pinconfig+0x1e0>
    deae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    deb2:	e72f      	b.n	dd14 <am_hal_gpio_pinconfig+0x5c>
    deb4:	2c14      	cmp	r4, #20
    deb6:	f43f af1f 	beq.w	dcf8 <am_hal_gpio_pinconfig+0x40>
    deba:	4817      	ldr	r0, [pc, #92]	; (df18 <am_hal_gpio_pinconfig+0x260>)
    debc:	e7b7      	b.n	de2e <am_hal_gpio_pinconfig+0x176>
    debe:	2c14      	cmp	r4, #20
    dec0:	f47f af1a 	bne.w	dcf8 <am_hal_gpio_pinconfig+0x40>
    dec4:	4815      	ldr	r0, [pc, #84]	; (df1c <am_hal_gpio_pinconfig+0x264>)
    dec6:	e7b2      	b.n	de2e <am_hal_gpio_pinconfig+0x176>
    dec8:	4815      	ldr	r0, [pc, #84]	; (df20 <am_hal_gpio_pinconfig+0x268>)
    deca:	e7b0      	b.n	de2e <am_hal_gpio_pinconfig+0x176>
    decc:	2200      	movs	r2, #0
    dece:	00a0      	lsls	r0, r4, #2
    ded0:	0052      	lsls	r2, r2, #1
    ded2:	f3c1 5540 	ubfx	r5, r1, #21, #1
    ded6:	ea42 02c5 	orr.w	r2, r2, r5, lsl #3
    deda:	f04f 0800 	mov.w	r8, #0
    dede:	e74a      	b.n	dd76 <am_hal_gpio_pinconfig+0xbe>
    dee0:	2201      	movs	r2, #1
    dee2:	e7f5      	b.n	ded0 <am_hal_gpio_pinconfig+0x218>
    dee4:	2202      	movs	r2, #2
    dee6:	e7f3      	b.n	ded0 <am_hal_gpio_pinconfig+0x218>
    dee8:	2203      	movs	r2, #3
    deea:	e7f1      	b.n	ded0 <am_hal_gpio_pinconfig+0x218>
    deec:	0000e918 	.word	0x0000e918
    def0:	0000e94c 	.word	0x0000e94c
    def4:	0000ea48 	.word	0x0000ea48
    def8:	0000e910 	.word	0x0000e910
    defc:	40010040 	.word	0x40010040
    df00:	400100e0 	.word	0x400100e0
    df04:	400100b4 	.word	0x400100b4
    df08:	40010000 	.word	0x40010000
    df0c:	0000e980 	.word	0x0000e980
    df10:	08000104 	.word	0x08000104
    df14:	08000102 	.word	0x08000102
    df18:	08000101 	.word	0x08000101
    df1c:	08000100 	.word	0x08000100
    df20:	08000103 	.word	0x08000103

0000df24 <am_hal_gpio_state_write>:
    df24:	2831      	cmp	r0, #49	; 0x31
    df26:	d81a      	bhi.n	df5e <am_hal_gpio_state_write+0x3a>
    df28:	b570      	push	{r4, r5, r6, lr}
    df2a:	2905      	cmp	r1, #5
    df2c:	b082      	sub	sp, #8
    df2e:	460d      	mov	r5, r1
    df30:	d812      	bhi.n	df58 <am_hal_gpio_state_write+0x34>
    df32:	f000 031f 	and.w	r3, r0, #31
    df36:	2201      	movs	r2, #1
    df38:	08c0      	lsrs	r0, r0, #3
    df3a:	fa02 f603 	lsl.w	r6, r2, r3
    df3e:	f000 0404 	and.w	r4, r0, #4
    df42:	f000 f833 	bl	dfac <am_hal_interrupt_master_disable>
    df46:	3d01      	subs	r5, #1
    df48:	9001      	str	r0, [sp, #4]
    df4a:	2d04      	cmp	r5, #4
    df4c:	d821      	bhi.n	df92 <am_hal_gpio_state_write+0x6e>
    df4e:	e8df f005 	tbb	[pc, r5]
    df52:	1512      	.short	0x1512
    df54:	1d1a      	.short	0x1d1a
    df56:	08          	.byte	0x08
    df57:	00          	.byte	0x00
    df58:	2006      	movs	r0, #6
    df5a:	b002      	add	sp, #8
    df5c:	bd70      	pop	{r4, r5, r6, pc}
    df5e:	2005      	movs	r0, #5
    df60:	4770      	bx	lr
    df62:	4a0d      	ldr	r2, [pc, #52]	; (df98 <am_hal_gpio_state_write+0x74>)
    df64:	58a3      	ldr	r3, [r4, r2]
    df66:	4073      	eors	r3, r6
    df68:	50a3      	str	r3, [r4, r2]
    df6a:	9801      	ldr	r0, [sp, #4]
    df6c:	f000 f822 	bl	dfb4 <am_hal_interrupt_master_set>
    df70:	2000      	movs	r0, #0
    df72:	b002      	add	sp, #8
    df74:	bd70      	pop	{r4, r5, r6, pc}
    df76:	4b09      	ldr	r3, [pc, #36]	; (df9c <am_hal_gpio_state_write+0x78>)
    df78:	50e6      	str	r6, [r4, r3]
    df7a:	e7f6      	b.n	df6a <am_hal_gpio_state_write+0x46>
    df7c:	4a08      	ldr	r2, [pc, #32]	; (dfa0 <am_hal_gpio_state_write+0x7c>)
    df7e:	58a3      	ldr	r3, [r4, r2]
    df80:	4073      	eors	r3, r6
    df82:	50a3      	str	r3, [r4, r2]
    df84:	e7f1      	b.n	df6a <am_hal_gpio_state_write+0x46>
    df86:	4b04      	ldr	r3, [pc, #16]	; (df98 <am_hal_gpio_state_write+0x74>)
    df88:	50e6      	str	r6, [r4, r3]
    df8a:	e7ee      	b.n	df6a <am_hal_gpio_state_write+0x46>
    df8c:	4b05      	ldr	r3, [pc, #20]	; (dfa4 <am_hal_gpio_state_write+0x80>)
    df8e:	50e6      	str	r6, [r4, r3]
    df90:	e7eb      	b.n	df6a <am_hal_gpio_state_write+0x46>
    df92:	4b05      	ldr	r3, [pc, #20]	; (dfa8 <am_hal_gpio_state_write+0x84>)
    df94:	50e6      	str	r6, [r4, r3]
    df96:	e7e8      	b.n	df6a <am_hal_gpio_state_write+0x46>
    df98:	400100b4 	.word	0x400100b4
    df9c:	40010090 	.word	0x40010090
    dfa0:	40010088 	.word	0x40010088
    dfa4:	400100a8 	.word	0x400100a8
    dfa8:	40010098 	.word	0x40010098

0000dfac <am_hal_interrupt_master_disable>:
    dfac:	f3ef 8010 	mrs	r0, PRIMASK
    dfb0:	b672      	cpsid	i
    dfb2:	4770      	bx	lr

0000dfb4 <am_hal_interrupt_master_set>:
    dfb4:	f380 8810 	msr	PRIMASK, r0
    dfb8:	4770      	bx	lr
    dfba:	bf00      	nop

0000dfbc <am_hal_mcuctrl_info_get>:
    dfbc:	2900      	cmp	r1, #0
    dfbe:	f000 808f 	beq.w	e0e0 <am_hal_mcuctrl_info_get+0x124>
    dfc2:	2801      	cmp	r0, #1
    dfc4:	b430      	push	{r4, r5}
    dfc6:	d006      	beq.n	dfd6 <am_hal_mcuctrl_info_get+0x1a>
    dfc8:	2802      	cmp	r0, #2
    dfca:	d06d      	beq.n	e0a8 <am_hal_mcuctrl_info_get+0xec>
    dfcc:	2800      	cmp	r0, #0
    dfce:	d055      	beq.n	e07c <am_hal_mcuctrl_info_get+0xc0>
    dfd0:	2006      	movs	r0, #6
    dfd2:	bc30      	pop	{r4, r5}
    dfd4:	4770      	bx	lr
    dfd6:	4a43      	ldr	r2, [pc, #268]	; (e0e4 <am_hal_mcuctrl_info_get+0x128>)
    dfd8:	4843      	ldr	r0, [pc, #268]	; (e0e8 <am_hal_mcuctrl_info_get+0x12c>)
    dfda:	6813      	ldr	r3, [r2, #0]
    dfdc:	600b      	str	r3, [r1, #0]
    dfde:	6854      	ldr	r4, [r2, #4]
    dfe0:	604c      	str	r4, [r1, #4]
    dfe2:	6894      	ldr	r4, [r2, #8]
    dfe4:	608c      	str	r4, [r1, #8]
    dfe6:	68d4      	ldr	r4, [r2, #12]
    dfe8:	60cc      	str	r4, [r1, #12]
    dfea:	f3c3 5503 	ubfx	r5, r3, #20, #4
    dfee:	6914      	ldr	r4, [r2, #16]
    dff0:	610c      	str	r4, [r1, #16]
    dff2:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
    dff6:	4c3d      	ldr	r4, [pc, #244]	; (e0ec <am_hal_mcuctrl_info_get+0x130>)
    dff8:	6950      	ldr	r0, [r2, #20]
    dffa:	6148      	str	r0, [r1, #20]
    dffc:	f003 0201 	and.w	r2, r3, #1
    e000:	f3c3 4303 	ubfx	r3, r3, #16, #4
    e004:	e9c1 2506 	strd	r2, r5, [r1, #24]
    e008:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    e00c:	4a38      	ldr	r2, [pc, #224]	; (e0f0 <am_hal_mcuctrl_info_get+0x134>)
    e00e:	620b      	str	r3, [r1, #32]
    e010:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
    e014:	f8d2 00e4 	ldr.w	r0, [r2, #228]	; 0xe4
    e018:	b2db      	uxtb	r3, r3
    e01a:	f000 000f 	and.w	r0, r0, #15
    e01e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    e022:	624b      	str	r3, [r1, #36]	; 0x24
    e024:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    e028:	f8d2 00e8 	ldr.w	r0, [r2, #232]	; 0xe8
    e02c:	f3c3 1303 	ubfx	r3, r3, #4, #4
    e030:	f000 000f 	and.w	r0, r0, #15
    e034:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
    e038:	628b      	str	r3, [r1, #40]	; 0x28
    e03a:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
    e03e:	f8d2 00ec 	ldr.w	r0, [r2, #236]	; 0xec
    e042:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    e046:	f3c0 1003 	ubfx	r0, r0, #4, #4
    e04a:	4303      	orrs	r3, r0
    e04c:	62cb      	str	r3, [r1, #44]	; 0x2c
    e04e:	f8d2 40fc 	ldr.w	r4, [r2, #252]	; 0xfc
    e052:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    e056:	f8d2 00f4 	ldr.w	r0, [r2, #244]	; 0xf4
    e05a:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
    e05e:	b2db      	uxtb	r3, r3
    e060:	041b      	lsls	r3, r3, #16
    e062:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
    e066:	fa5f fc82 	uxtb.w	ip, r2
    e06a:	ea43 030c 	orr.w	r3, r3, ip
    e06e:	b2c2      	uxtb	r2, r0
    e070:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    e074:	630b      	str	r3, [r1, #48]	; 0x30
    e076:	2000      	movs	r0, #0
    e078:	bc30      	pop	{r4, r5}
    e07a:	4770      	bx	lr
    e07c:	4a19      	ldr	r2, [pc, #100]	; (e0e4 <am_hal_mcuctrl_info_get+0x128>)
    e07e:	6993      	ldr	r3, [r2, #24]
    e080:	f3c3 1480 	ubfx	r4, r3, #6, #1
    e084:	700c      	strb	r4, [r1, #0]
    e086:	f8d2 41a0 	ldr.w	r4, [r2, #416]	; 0x1a0
    e08a:	f3c3 0380 	ubfx	r3, r3, #2, #1
    e08e:	704b      	strb	r3, [r1, #1]
    e090:	f3c4 6381 	ubfx	r3, r4, #26, #2
    e094:	710b      	strb	r3, [r1, #4]
    e096:	6953      	ldr	r3, [r2, #20]
    e098:	f3c3 0240 	ubfx	r2, r3, #1, #1
    e09c:	f003 0301 	and.w	r3, r3, #1
    e0a0:	bc30      	pop	{r4, r5}
    e0a2:	708a      	strb	r2, [r1, #2]
    e0a4:	70cb      	strb	r3, [r1, #3]
    e0a6:	4770      	bx	lr
    e0a8:	4a0e      	ldr	r2, [pc, #56]	; (e0e4 <am_hal_mcuctrl_info_get+0x128>)
    e0aa:	6848      	ldr	r0, [r1, #4]
    e0ac:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
    e0b0:	f003 0401 	and.w	r4, r3, #1
    e0b4:	700c      	strb	r4, [r1, #0]
    e0b6:	f3c3 0440 	ubfx	r4, r3, #1, #1
    e0ba:	720c      	strb	r4, [r1, #8]
    e0bc:	f8d2 41c4 	ldr.w	r4, [r2, #452]	; 0x1c4
    e0c0:	60cc      	str	r4, [r1, #12]
    e0c2:	f8d2 41c0 	ldr.w	r4, [r2, #448]	; 0x1c0
    e0c6:	4320      	orrs	r0, r4
    e0c8:	f3c3 0380 	ubfx	r3, r3, #2, #1
    e0cc:	6048      	str	r0, [r1, #4]
    e0ce:	f8d2 21c8 	ldr.w	r2, [r2, #456]	; 0x1c8
    e0d2:	740b      	strb	r3, [r1, #16]
    e0d4:	694b      	ldr	r3, [r1, #20]
    e0d6:	4313      	orrs	r3, r2
    e0d8:	2000      	movs	r0, #0
    e0da:	bc30      	pop	{r4, r5}
    e0dc:	614b      	str	r3, [r1, #20]
    e0de:	4770      	bx	lr
    e0e0:	2006      	movs	r0, #6
    e0e2:	4770      	bx	lr
    e0e4:	40020000 	.word	0x40020000
    e0e8:	0000ea7c 	.word	0x0000ea7c
    e0ec:	0000eabc 	.word	0x0000eabc
    e0f0:	f0000f00 	.word	0xf0000f00

0000e0f4 <am_hal_sysctrl_sleep>:
    e0f4:	b510      	push	{r4, lr}
    e0f6:	b082      	sub	sp, #8
    e0f8:	4604      	mov	r4, r0
    e0fa:	f7ff ff57 	bl	dfac <am_hal_interrupt_master_disable>
    e0fe:	9001      	str	r0, [sp, #4]
    e100:	b124      	cbz	r4, e10c <am_hal_sysctrl_sleep+0x18>
    e102:	4b12      	ldr	r3, [pc, #72]	; (e14c <am_hal_sysctrl_sleep+0x58>)
    e104:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
    e108:	07db      	lsls	r3, r3, #31
    e10a:	d513      	bpl.n	e134 <am_hal_sysctrl_sleep+0x40>
    e10c:	4a10      	ldr	r2, [pc, #64]	; (e150 <am_hal_sysctrl_sleep+0x5c>)
    e10e:	6913      	ldr	r3, [r2, #16]
    e110:	f023 0304 	bic.w	r3, r3, #4
    e114:	6113      	str	r3, [r2, #16]
    e116:	f3bf 8f4f 	dsb	sy
    e11a:	4a0e      	ldr	r2, [pc, #56]	; (e154 <am_hal_sysctrl_sleep+0x60>)
    e11c:	4b0e      	ldr	r3, [pc, #56]	; (e158 <am_hal_sysctrl_sleep+0x64>)
    e11e:	6812      	ldr	r2, [r2, #0]
    e120:	601a      	str	r2, [r3, #0]
    e122:	bf30      	wfi
    e124:	f3bf 8f6f 	isb	sy
    e128:	9801      	ldr	r0, [sp, #4]
    e12a:	b002      	add	sp, #8
    e12c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e130:	f7ff bf40 	b.w	dfb4 <am_hal_interrupt_master_set>
    e134:	4b09      	ldr	r3, [pc, #36]	; (e15c <am_hal_sysctrl_sleep+0x68>)
    e136:	681a      	ldr	r2, [r3, #0]
    e138:	b912      	cbnz	r2, e140 <am_hal_sysctrl_sleep+0x4c>
    e13a:	4a09      	ldr	r2, [pc, #36]	; (e160 <am_hal_sysctrl_sleep+0x6c>)
    e13c:	6812      	ldr	r2, [r2, #0]
    e13e:	601a      	str	r2, [r3, #0]
    e140:	4a03      	ldr	r2, [pc, #12]	; (e150 <am_hal_sysctrl_sleep+0x5c>)
    e142:	6913      	ldr	r3, [r2, #16]
    e144:	f043 0304 	orr.w	r3, r3, #4
    e148:	6113      	str	r3, [r2, #16]
    e14a:	e7e4      	b.n	e116 <am_hal_sysctrl_sleep+0x22>
    e14c:	40020000 	.word	0x40020000
    e150:	e000ed00 	.word	0xe000ed00
    e154:	5fff0000 	.word	0x5fff0000
    e158:	10001150 	.word	0x10001150
    e15c:	1000114c 	.word	0x1000114c
    e160:	4ffff000 	.word	0x4ffff000

0000e164 <am_bsp_low_power_init>:
    e164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e166:	f000 f95f 	bl	e428 <am_hal_pwrctrl_low_power_init>
    e16a:	f000 fa3b 	bl	e5e4 <am_hal_rtc_osc_disable>
    e16e:	4b0b      	ldr	r3, [pc, #44]	; (e19c <am_bsp_low_power_init+0x38>)
    e170:	4f0b      	ldr	r7, [pc, #44]	; (e1a0 <am_bsp_low_power_init+0x3c>)
    e172:	681e      	ldr	r6, [r3, #0]
    e174:	2400      	movs	r4, #0
    e176:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
    e17a:	4631      	mov	r1, r6
    e17c:	4628      	mov	r0, r5
    e17e:	f7ff fd9b 	bl	dcb8 <am_hal_gpio_pinconfig>
    e182:	2103      	movs	r1, #3
    e184:	4628      	mov	r0, r5
    e186:	f7ff fecd 	bl	df24 <am_hal_gpio_state_write>
    e18a:	3401      	adds	r4, #1
    e18c:	2100      	movs	r1, #0
    e18e:	4628      	mov	r0, r5
    e190:	f7ff fec8 	bl	df24 <am_hal_gpio_state_write>
    e194:	2c05      	cmp	r4, #5
    e196:	d1ee      	bne.n	e176 <am_bsp_low_power_init+0x12>
    e198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e19a:	bf00      	nop
    e19c:	0000e914 	.word	0x0000e914
    e1a0:	1000101c 	.word	0x1000101c

0000e1a4 <am_bsp_debug_printf_disable>:
    e1a4:	b538      	push	{r3, r4, r5, lr}
    e1a6:	4b17      	ldr	r3, [pc, #92]	; (e204 <am_bsp_debug_printf_disable+0x60>)
    e1a8:	681c      	ldr	r4, [r3, #0]
    e1aa:	2c01      	cmp	r4, #1
    e1ac:	d002      	beq.n	e1b4 <am_bsp_debug_printf_disable+0x10>
    e1ae:	2c02      	cmp	r4, #2
    e1b0:	d00c      	beq.n	e1cc <am_bsp_debug_printf_disable+0x28>
    e1b2:	bd38      	pop	{r3, r4, r5, pc}
    e1b4:	f000 f870 	bl	e298 <am_hal_itm_disable>
    e1b8:	2000      	movs	r0, #0
    e1ba:	f7fe f961 	bl	c480 <am_util_stdio_printf_init>
    e1be:	4b12      	ldr	r3, [pc, #72]	; (e208 <am_bsp_debug_printf_disable+0x64>)
    e1c0:	2029      	movs	r0, #41	; 0x29
    e1c2:	6819      	ldr	r1, [r3, #0]
    e1c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    e1c8:	f7ff bd76 	b.w	dcb8 <am_hal_gpio_pinconfig>
    e1cc:	4d0f      	ldr	r5, [pc, #60]	; (e20c <am_bsp_debug_printf_disable+0x68>)
    e1ce:	6828      	ldr	r0, [r5, #0]
    e1d0:	f000 faee 	bl	e7b0 <am_hal_uart_tx_flush>
    e1d4:	2000      	movs	r0, #0
    e1d6:	f7fe f953 	bl	c480 <am_util_stdio_printf_init>
    e1da:	4621      	mov	r1, r4
    e1dc:	2200      	movs	r2, #0
    e1de:	6828      	ldr	r0, [r5, #0]
    e1e0:	f000 fa6e 	bl	e6c0 <am_hal_uart_power_control>
    e1e4:	6828      	ldr	r0, [r5, #0]
    e1e6:	f000 fa57 	bl	e698 <am_hal_uart_deinitialize>
    e1ea:	4b07      	ldr	r3, [pc, #28]	; (e208 <am_bsp_debug_printf_disable+0x64>)
    e1ec:	681c      	ldr	r4, [r3, #0]
    e1ee:	2016      	movs	r0, #22
    e1f0:	4621      	mov	r1, r4
    e1f2:	f7ff fd61 	bl	dcb8 <am_hal_gpio_pinconfig>
    e1f6:	4621      	mov	r1, r4
    e1f8:	2017      	movs	r0, #23
    e1fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    e1fe:	f7ff bd5b 	b.w	dcb8 <am_hal_gpio_pinconfig>
    e202:	bf00      	nop
    e204:	10001158 	.word	0x10001158
    e208:	0000e910 	.word	0x0000e910
    e20c:	10001154 	.word	0x10001154

0000e210 <am_bsp_itm_printf_enable>:
    e210:	b500      	push	{lr}
    e212:	4b0b      	ldr	r3, [pc, #44]	; (e240 <am_bsp_itm_printf_enable+0x30>)
    e214:	b087      	sub	sp, #28
    e216:	2201      	movs	r2, #1
    e218:	601a      	str	r2, [r3, #0]
    e21a:	f000 f819 	bl	e250 <am_hal_itm_enable>
    e21e:	4b09      	ldr	r3, [pc, #36]	; (e244 <am_bsp_itm_printf_enable+0x34>)
    e220:	9301      	str	r3, [sp, #4]
    e222:	a801      	add	r0, sp, #4
    e224:	f000 f9e8 	bl	e5f8 <am_hal_tpiu_enable>
    e228:	4b07      	ldr	r3, [pc, #28]	; (e248 <am_bsp_itm_printf_enable+0x38>)
    e22a:	2029      	movs	r0, #41	; 0x29
    e22c:	6819      	ldr	r1, [r3, #0]
    e22e:	f7ff fd43 	bl	dcb8 <am_hal_gpio_pinconfig>
    e232:	4806      	ldr	r0, [pc, #24]	; (e24c <am_bsp_itm_printf_enable+0x3c>)
    e234:	f7fe f924 	bl	c480 <am_util_stdio_printf_init>
    e238:	b007      	add	sp, #28
    e23a:	f85d fb04 	ldr.w	pc, [sp], #4
    e23e:	bf00      	nop
    e240:	10001158 	.word	0x10001158
    e244:	000f4240 	.word	0x000f4240
    e248:	0000eafc 	.word	0x0000eafc
    e24c:	0000e34d 	.word	0x0000e34d

0000e250 <am_hal_itm_enable>:
    e250:	4a0e      	ldr	r2, [pc, #56]	; (e28c <am_hal_itm_enable+0x3c>)
    e252:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    e256:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    e25a:	b410      	push	{r4}
    e25c:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    e260:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    e264:	01db      	lsls	r3, r3, #7
    e266:	d5fb      	bpl.n	e260 <am_hal_itm_enable+0x10>
    e268:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
    e26c:	4c08      	ldr	r4, [pc, #32]	; (e290 <am_hal_itm_enable+0x40>)
    e26e:	4a09      	ldr	r2, [pc, #36]	; (e294 <am_hal_itm_enable+0x44>)
    e270:	f8c3 4fb0 	str.w	r4, [r3, #4016]	; 0xfb0
    e274:	200f      	movs	r0, #15
    e276:	f04f 31ff 	mov.w	r1, #4294967295
    e27a:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
    e27e:	f85d 4b04 	ldr.w	r4, [sp], #4
    e282:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
    e286:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
    e28a:	4770      	bx	lr
    e28c:	e000ed00 	.word	0xe000ed00
    e290:	c5acce55 	.word	0xc5acce55
    e294:	00150511 	.word	0x00150511

0000e298 <am_hal_itm_disable>:
    e298:	4b27      	ldr	r3, [pc, #156]	; (e338 <am_hal_itm_disable+0xa0>)
    e29a:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
    e29e:	b510      	push	{r4, lr}
    e2a0:	b9cb      	cbnz	r3, e2d6 <am_hal_itm_disable+0x3e>
    e2a2:	4a26      	ldr	r2, [pc, #152]	; (e33c <am_hal_itm_disable+0xa4>)
    e2a4:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    e2a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    e2ac:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    e2b0:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    e2b4:	01d9      	lsls	r1, r3, #7
    e2b6:	d5fb      	bpl.n	e2b0 <am_hal_itm_disable+0x18>
    e2b8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
    e2bc:	4c20      	ldr	r4, [pc, #128]	; (e340 <am_hal_itm_disable+0xa8>)
    e2be:	4a21      	ldr	r2, [pc, #132]	; (e344 <am_hal_itm_disable+0xac>)
    e2c0:	f8c3 4fb0 	str.w	r4, [r3, #4016]	; 0xfb0
    e2c4:	200f      	movs	r0, #15
    e2c6:	f04f 31ff 	mov.w	r1, #4294967295
    e2ca:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
    e2ce:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
    e2d2:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
    e2d6:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
    e2da:	f8d4 3e80 	ldr.w	r3, [r4, #3712]	; 0xe80
    e2de:	021b      	lsls	r3, r3, #8
    e2e0:	d4fb      	bmi.n	e2da <am_hal_itm_disable+0x42>
    e2e2:	f44f 7048 	mov.w	r0, #800	; 0x320
    e2e6:	f7ff fc97 	bl	dc18 <am_hal_flash_delay>
    e2ea:	4b15      	ldr	r3, [pc, #84]	; (e340 <am_hal_itm_disable+0xa8>)
    e2ec:	4916      	ldr	r1, [pc, #88]	; (e348 <am_hal_itm_disable+0xb0>)
    e2ee:	f8c4 3fb0 	str.w	r3, [r4, #4016]	; 0xfb0
    e2f2:	2064      	movs	r0, #100	; 0x64
    e2f4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    e2f8:	f8d2 3e80 	ldr.w	r3, [r2, #3712]	; 0xe80
    e2fc:	f023 0301 	bic.w	r3, r3, #1
    e300:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80
    e304:	f8d2 3e80 	ldr.w	r3, [r2, #3712]	; 0xe80
    e308:	420b      	tst	r3, r1
    e30a:	d1fb      	bne.n	e304 <am_hal_itm_disable+0x6c>
    e30c:	3801      	subs	r0, #1
    e30e:	d1f3      	bne.n	e2f8 <am_hal_itm_disable+0x60>
    e310:	4a0a      	ldr	r2, [pc, #40]	; (e33c <am_hal_itm_disable+0xa4>)
    e312:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    e316:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    e31a:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    e31e:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    e322:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
    e326:	d1fa      	bne.n	e31e <am_hal_itm_disable+0x86>
    e328:	4a03      	ldr	r2, [pc, #12]	; (e338 <am_hal_itm_disable+0xa0>)
    e32a:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
    e32e:	f8d2 3250 	ldr.w	r3, [r2, #592]	; 0x250
    e332:	2b00      	cmp	r3, #0
    e334:	d1fb      	bne.n	e32e <am_hal_itm_disable+0x96>
    e336:	bd10      	pop	{r4, pc}
    e338:	40020000 	.word	0x40020000
    e33c:	e000ed00 	.word	0xe000ed00
    e340:	c5acce55 	.word	0xc5acce55
    e344:	00150511 	.word	0x00150511
    e348:	00800001 	.word	0x00800001

0000e34c <am_hal_itm_print>:
    e34c:	7803      	ldrb	r3, [r0, #0]
    e34e:	b1a3      	cbz	r3, e37a <am_hal_itm_print+0x2e>
    e350:	4603      	mov	r3, r0
    e352:	f1c0 0c01 	rsb	ip, r0, #1
    e356:	eb0c 0103 	add.w	r1, ip, r3
    e35a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    e35e:	2a00      	cmp	r2, #0
    e360:	d1f9      	bne.n	e356 <am_hal_itm_print+0xa>
    e362:	4401      	add	r1, r0
    e364:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    e368:	f810 cb01 	ldrb.w	ip, [r0], #1
    e36c:	6813      	ldr	r3, [r2, #0]
    e36e:	2b00      	cmp	r3, #0
    e370:	d0fc      	beq.n	e36c <am_hal_itm_print+0x20>
    e372:	4288      	cmp	r0, r1
    e374:	f882 c000 	strb.w	ip, [r2]
    e378:	d1f6      	bne.n	e368 <am_hal_itm_print+0x1c>
    e37a:	4770      	bx	lr

0000e37c <am_hal_pwrctrl_periph_enable>:
    e37c:	b570      	push	{r4, r5, r6, lr}
    e37e:	b082      	sub	sp, #8
    e380:	4604      	mov	r4, r0
    e382:	f7ff fe13 	bl	dfac <am_hal_interrupt_master_disable>
    e386:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    e38a:	4e0f      	ldr	r6, [pc, #60]	; (e3c8 <am_hal_pwrctrl_periph_enable+0x4c>)
    e38c:	4d0f      	ldr	r5, [pc, #60]	; (e3cc <am_hal_pwrctrl_periph_enable+0x50>)
    e38e:	9001      	str	r0, [sp, #4]
    e390:	00a4      	lsls	r4, r4, #2
    e392:	68b3      	ldr	r3, [r6, #8]
    e394:	592a      	ldr	r2, [r5, r4]
    e396:	4313      	orrs	r3, r2
    e398:	60b3      	str	r3, [r6, #8]
    e39a:	9801      	ldr	r0, [sp, #4]
    e39c:	442c      	add	r4, r5
    e39e:	f7ff fe09 	bl	dfb4 <am_hal_interrupt_master_set>
    e3a2:	20a0      	movs	r0, #160	; 0xa0
    e3a4:	f7ff fc38 	bl	dc18 <am_hal_flash_delay>
    e3a8:	69b3      	ldr	r3, [r6, #24]
    e3aa:	6864      	ldr	r4, [r4, #4]
    e3ac:	4223      	tst	r3, r4
    e3ae:	d103      	bne.n	e3b8 <am_hal_pwrctrl_periph_enable+0x3c>
    e3b0:	20a0      	movs	r0, #160	; 0xa0
    e3b2:	f7ff fc31 	bl	dc18 <am_hal_flash_delay>
    e3b6:	69b3      	ldr	r3, [r6, #24]
    e3b8:	4b03      	ldr	r3, [pc, #12]	; (e3c8 <am_hal_pwrctrl_periph_enable+0x4c>)
    e3ba:	699b      	ldr	r3, [r3, #24]
    e3bc:	4223      	tst	r3, r4
    e3be:	bf0c      	ite	eq
    e3c0:	2001      	moveq	r0, #1
    e3c2:	2000      	movne	r0, #0
    e3c4:	b002      	add	sp, #8
    e3c6:	bd70      	pop	{r4, r5, r6, pc}
    e3c8:	40021000 	.word	0x40021000
    e3cc:	0000eb00 	.word	0x0000eb00

0000e3d0 <am_hal_pwrctrl_periph_disable>:
    e3d0:	b570      	push	{r4, r5, r6, lr}
    e3d2:	b082      	sub	sp, #8
    e3d4:	4604      	mov	r4, r0
    e3d6:	f7ff fde9 	bl	dfac <am_hal_interrupt_master_disable>
    e3da:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    e3de:	4e10      	ldr	r6, [pc, #64]	; (e420 <am_hal_pwrctrl_periph_disable+0x50>)
    e3e0:	4d10      	ldr	r5, [pc, #64]	; (e424 <am_hal_pwrctrl_periph_disable+0x54>)
    e3e2:	9001      	str	r0, [sp, #4]
    e3e4:	00a4      	lsls	r4, r4, #2
    e3e6:	68b3      	ldr	r3, [r6, #8]
    e3e8:	592a      	ldr	r2, [r5, r4]
    e3ea:	ea23 0302 	bic.w	r3, r3, r2
    e3ee:	60b3      	str	r3, [r6, #8]
    e3f0:	9801      	ldr	r0, [sp, #4]
    e3f2:	442c      	add	r4, r5
    e3f4:	f7ff fdde 	bl	dfb4 <am_hal_interrupt_master_set>
    e3f8:	20a0      	movs	r0, #160	; 0xa0
    e3fa:	f7ff fc0d 	bl	dc18 <am_hal_flash_delay>
    e3fe:	69b3      	ldr	r3, [r6, #24]
    e400:	6864      	ldr	r4, [r4, #4]
    e402:	4223      	tst	r3, r4
    e404:	d003      	beq.n	e40e <am_hal_pwrctrl_periph_disable+0x3e>
    e406:	20a0      	movs	r0, #160	; 0xa0
    e408:	f7ff fc06 	bl	dc18 <am_hal_flash_delay>
    e40c:	69b3      	ldr	r3, [r6, #24]
    e40e:	4b04      	ldr	r3, [pc, #16]	; (e420 <am_hal_pwrctrl_periph_disable+0x50>)
    e410:	699b      	ldr	r3, [r3, #24]
    e412:	4223      	tst	r3, r4
    e414:	bf14      	ite	ne
    e416:	2001      	movne	r0, #1
    e418:	2000      	moveq	r0, #0
    e41a:	b002      	add	sp, #8
    e41c:	bd70      	pop	{r4, r5, r6, pc}
    e41e:	bf00      	nop
    e420:	40021000 	.word	0x40021000
    e424:	0000eb00 	.word	0x0000eb00

0000e428 <am_hal_pwrctrl_low_power_init>:
    e428:	b530      	push	{r4, r5, lr}
    e42a:	4b69      	ldr	r3, [pc, #420]	; (e5d0 <am_hal_pwrctrl_low_power_init+0x1a8>)
    e42c:	681a      	ldr	r2, [r3, #0]
    e42e:	b085      	sub	sp, #20
    e430:	b912      	cbnz	r2, e438 <am_hal_pwrctrl_low_power_init+0x10>
    e432:	4a68      	ldr	r2, [pc, #416]	; (e5d4 <am_hal_pwrctrl_low_power_init+0x1ac>)
    e434:	6812      	ldr	r2, [r2, #0]
    e436:	601a      	str	r2, [r3, #0]
    e438:	4b67      	ldr	r3, [pc, #412]	; (e5d8 <am_hal_pwrctrl_low_power_init+0x1b0>)
    e43a:	68db      	ldr	r3, [r3, #12]
    e43c:	b2db      	uxtb	r3, r3
    e43e:	2b12      	cmp	r3, #18
    e440:	d104      	bne.n	e44c <am_hal_pwrctrl_low_power_init+0x24>
    e442:	4c66      	ldr	r4, [pc, #408]	; (e5dc <am_hal_pwrctrl_low_power_init+0x1b4>)
    e444:	6863      	ldr	r3, [r4, #4]
    e446:	07d8      	lsls	r0, r3, #31
    e448:	f100 8088 	bmi.w	e55c <am_hal_pwrctrl_low_power_init+0x134>
    e44c:	4b62      	ldr	r3, [pc, #392]	; (e5d8 <am_hal_pwrctrl_low_power_init+0x1b0>)
    e44e:	68da      	ldr	r2, [r3, #12]
    e450:	b2d2      	uxtb	r2, r2
    e452:	2a20      	cmp	r2, #32
    e454:	d934      	bls.n	e4c0 <am_hal_pwrctrl_low_power_init+0x98>
    e456:	f8d3 2354 	ldr.w	r2, [r3, #852]	; 0x354
    e45a:	2002      	movs	r0, #2
    e45c:	f360 4213 	bfi	r2, r0, #16, #4
    e460:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    e464:	f8d3 1354 	ldr.w	r1, [r3, #852]	; 0x354
    e468:	2203      	movs	r2, #3
    e46a:	f362 5117 	bfi	r1, r2, #20, #4
    e46e:	f8c3 1354 	str.w	r1, [r3, #852]	; 0x354
    e472:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    e476:	2405      	movs	r4, #5
    e478:	f364 0103 	bfi	r1, r4, #0, #4
    e47c:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    e480:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    e484:	f360 1107 	bfi	r1, r0, #4, #4
    e488:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    e48c:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    e490:	2406      	movs	r4, #6
    e492:	f364 210b 	bfi	r1, r4, #8, #4
    e496:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    e49a:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    e49e:	2001      	movs	r0, #1
    e4a0:	f360 310f 	bfi	r1, r0, #12, #4
    e4a4:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    e4a8:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    e4ac:	f362 61de 	bfi	r1, r2, #27, #4
    e4b0:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    e4b4:	f8d3 135c 	ldr.w	r1, [r3, #860]	; 0x35c
    e4b8:	f362 0103 	bfi	r1, r2, #0, #4
    e4bc:	f8c3 135c 	str.w	r1, [r3, #860]	; 0x35c
    e4c0:	4a45      	ldr	r2, [pc, #276]	; (e5d8 <am_hal_pwrctrl_low_power_init+0x1b0>)
    e4c2:	68d3      	ldr	r3, [r2, #12]
    e4c4:	b2db      	uxtb	r3, r3
    e4c6:	2b11      	cmp	r3, #17
    e4c8:	d905      	bls.n	e4d6 <am_hal_pwrctrl_low_power_init+0xae>
    e4ca:	f8d2 335c 	ldr.w	r3, [r2, #860]	; 0x35c
    e4ce:	f36f 6318 	bfc	r3, #24, #1
    e4d2:	f8c2 335c 	str.w	r3, [r2, #860]	; 0x35c
    e4d6:	2100      	movs	r1, #0
    e4d8:	200c      	movs	r0, #12
    e4da:	f7fe fee7 	bl	d2ac <am_hal_cachectrl_control>
    e4de:	4b3f      	ldr	r3, [pc, #252]	; (e5dc <am_hal_pwrctrl_low_power_init+0x1b4>)
    e4e0:	699b      	ldr	r3, [r3, #24]
    e4e2:	f3c3 2500 	ubfx	r5, r3, #8, #1
    e4e6:	05db      	lsls	r3, r3, #23
    e4e8:	d420      	bmi.n	e52c <am_hal_pwrctrl_low_power_init+0x104>
    e4ea:	4c3b      	ldr	r4, [pc, #236]	; (e5d8 <am_hal_pwrctrl_low_power_init+0x1b0>)
    e4ec:	68e3      	ldr	r3, [r4, #12]
    e4ee:	b2db      	uxtb	r3, r3
    e4f0:	2b11      	cmp	r3, #17
    e4f2:	d84e      	bhi.n	e592 <am_hal_pwrctrl_low_power_init+0x16a>
    e4f4:	4c38      	ldr	r4, [pc, #224]	; (e5d8 <am_hal_pwrctrl_low_power_init+0x1b0>)
    e4f6:	493a      	ldr	r1, [pc, #232]	; (e5e0 <am_hal_pwrctrl_low_power_init+0x1b8>)
    e4f8:	7e22      	ldrb	r2, [r4, #24]
    e4fa:	2001      	movs	r0, #1
    e4fc:	4302      	orrs	r2, r0
    e4fe:	2307      	movs	r3, #7
    e500:	7622      	strb	r2, [r4, #24]
    e502:	9000      	str	r0, [sp, #0]
    e504:	461a      	mov	r2, r3
    e506:	f242 7010 	movw	r0, #10000	; 0x2710
    e50a:	f7ff fb95 	bl	dc38 <am_hal_flash_delay_status_check>
    e50e:	2800      	cmp	r0, #0
    e510:	d15a      	bne.n	e5c8 <am_hal_pwrctrl_low_power_init+0x1a0>
    e512:	4b32      	ldr	r3, [pc, #200]	; (e5dc <am_hal_pwrctrl_low_power_init+0x1b4>)
    e514:	681a      	ldr	r2, [r3, #0]
    e516:	f042 0201 	orr.w	r2, r2, #1
    e51a:	601a      	str	r2, [r3, #0]
    e51c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    e51e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    e522:	625a      	str	r2, [r3, #36]	; 0x24
    e524:	68e3      	ldr	r3, [r4, #12]
    e526:	b2db      	uxtb	r3, r3
    e528:	2b11      	cmp	r3, #17
    e52a:	d002      	beq.n	e532 <am_hal_pwrctrl_low_power_init+0x10a>
    e52c:	2000      	movs	r0, #0
    e52e:	b005      	add	sp, #20
    e530:	bd30      	pop	{r4, r5, pc}
    e532:	f8d4 335c 	ldr.w	r3, [r4, #860]	; 0x35c
    e536:	f360 5356 	bfi	r3, r0, #21, #2
    e53a:	f8c4 335c 	str.w	r3, [r4, #860]	; 0x35c
    e53e:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    e542:	220f      	movs	r2, #15
    e544:	f362 138b 	bfi	r3, r2, #6, #6
    e548:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    e54c:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    e550:	f362 0305 	bfi	r3, r2, #0, #6
    e554:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    e558:	b005      	add	sp, #20
    e55a:	bd30      	pop	{r4, r5, pc}
    e55c:	f7ff fd26 	bl	dfac <am_hal_interrupt_master_disable>
    e560:	9002      	str	r0, [sp, #8]
    e562:	68a3      	ldr	r3, [r4, #8]
    e564:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    e568:	60a3      	str	r3, [r4, #8]
    e56a:	9802      	ldr	r0, [sp, #8]
    e56c:	f7ff fd22 	bl	dfb4 <am_hal_interrupt_master_set>
    e570:	20a0      	movs	r0, #160	; 0xa0
    e572:	f7ff fb51 	bl	dc18 <am_hal_flash_delay>
    e576:	69a3      	ldr	r3, [r4, #24]
    e578:	0619      	lsls	r1, r3, #24
    e57a:	d403      	bmi.n	e584 <am_hal_pwrctrl_low_power_init+0x15c>
    e57c:	20a0      	movs	r0, #160	; 0xa0
    e57e:	f7ff fb4b 	bl	dc18 <am_hal_flash_delay>
    e582:	69a3      	ldr	r3, [r4, #24]
    e584:	4b15      	ldr	r3, [pc, #84]	; (e5dc <am_hal_pwrctrl_low_power_init+0x1b4>)
    e586:	699b      	ldr	r3, [r3, #24]
    e588:	061a      	lsls	r2, r3, #24
    e58a:	f53f af5f 	bmi.w	e44c <am_hal_pwrctrl_low_power_init+0x24>
    e58e:	2001      	movs	r0, #1
    e590:	e7cd      	b.n	e52e <am_hal_pwrctrl_low_power_init+0x106>
    e592:	f7ff fd0b 	bl	dfac <am_hal_interrupt_master_disable>
    e596:	9003      	str	r0, [sp, #12]
    e598:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    e59c:	2219      	movs	r2, #25
    e59e:	f362 138b 	bfi	r3, r2, #6, #6
    e5a2:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    e5a6:	f8d4 2368 	ldr.w	r2, [r4, #872]	; 0x368
    e5aa:	210c      	movs	r1, #12
    e5ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e5b0:	f361 0205 	bfi	r2, r1, #0, #6
    e5b4:	f8c4 2368 	str.w	r2, [r4, #872]	; 0x368
    e5b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    e5ba:	f365 5296 	bfi	r2, r5, #22, #1
    e5be:	63da      	str	r2, [r3, #60]	; 0x3c
    e5c0:	9803      	ldr	r0, [sp, #12]
    e5c2:	f7ff fcf7 	bl	dfb4 <am_hal_interrupt_master_set>
    e5c6:	e795      	b.n	e4f4 <am_hal_pwrctrl_low_power_init+0xcc>
    e5c8:	2004      	movs	r0, #4
    e5ca:	b005      	add	sp, #20
    e5cc:	bd30      	pop	{r4, r5, pc}
    e5ce:	bf00      	nop
    e5d0:	1000114c 	.word	0x1000114c
    e5d4:	4ffff000 	.word	0x4ffff000
    e5d8:	40020000 	.word	0x40020000
    e5dc:	40021000 	.word	0x40021000
    e5e0:	40020018 	.word	0x40020018

0000e5e4 <am_hal_rtc_osc_disable>:
    e5e4:	4a03      	ldr	r2, [pc, #12]	; (e5f4 <am_hal_rtc_osc_disable+0x10>)
    e5e6:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    e5ea:	f043 0310 	orr.w	r3, r3, #16
    e5ee:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
    e5f2:	4770      	bx	lr
    e5f4:	40004200 	.word	0x40004200

0000e5f8 <am_hal_tpiu_enable>:
    e5f8:	b510      	push	{r4, lr}
    e5fa:	4b23      	ldr	r3, [pc, #140]	; (e688 <am_hal_tpiu_enable+0x90>)
    e5fc:	6804      	ldr	r4, [r0, #0]
    e5fe:	2200      	movs	r2, #0
    e600:	b084      	sub	sp, #16
    e602:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    e606:	b334      	cbz	r4, e656 <am_hal_tpiu_enable+0x5e>
    e608:	4a20      	ldr	r2, [pc, #128]	; (e68c <am_hal_tpiu_enable+0x94>)
    e60a:	4921      	ldr	r1, [pc, #132]	; (e690 <am_hal_tpiu_enable+0x98>)
    e60c:	2001      	movs	r0, #1
    e60e:	6058      	str	r0, [r3, #4]
    e610:	f5a4 4361 	sub.w	r3, r4, #57600	; 0xe100
    e614:	a801      	add	r0, sp, #4
    e616:	428b      	cmp	r3, r1
    e618:	bf88      	it	hi
    e61a:	4614      	movhi	r4, r2
    e61c:	f7ff f85c 	bl	d6d8 <am_hal_clkgen_status_get>
    e620:	9b01      	ldr	r3, [sp, #4]
    e622:	1c5a      	adds	r2, r3, #1
    e624:	d02d      	beq.n	e682 <am_hal_tpiu_enable+0x8a>
    e626:	08db      	lsrs	r3, r3, #3
    e628:	fbb3 f4f4 	udiv	r4, r3, r4
    e62c:	3c01      	subs	r4, #1
    e62e:	b2a4      	uxth	r4, r4
    e630:	4b15      	ldr	r3, [pc, #84]	; (e688 <am_hal_tpiu_enable+0x90>)
    e632:	4a18      	ldr	r2, [pc, #96]	; (e694 <am_hal_tpiu_enable+0x9c>)
    e634:	611c      	str	r4, [r3, #16]
    e636:	2102      	movs	r1, #2
    e638:	f8c3 10f0 	str.w	r1, [r3, #240]	; 0xf0
    e63c:	2000      	movs	r0, #0
    e63e:	f240 2101 	movw	r1, #513	; 0x201
    e642:	f8c3 0f00 	str.w	r0, [r3, #3840]	; 0xf00
    e646:	f8c2 1250 	str.w	r1, [r2, #592]	; 0x250
    e64a:	f44f 7048 	mov.w	r0, #800	; 0x320
    e64e:	f7ff fae3 	bl	dc18 <am_hal_flash_delay>
    e652:	b004      	add	sp, #16
    e654:	bd10      	pop	{r4, pc}
    e656:	6902      	ldr	r2, [r0, #16]
    e658:	611a      	str	r2, [r3, #16]
    e65a:	6882      	ldr	r2, [r0, #8]
    e65c:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
    e660:	68c1      	ldr	r1, [r0, #12]
    e662:	2201      	movs	r2, #1
    e664:	3901      	subs	r1, #1
    e666:	408a      	lsls	r2, r1
    e668:	605a      	str	r2, [r3, #4]
    e66a:	f8c3 4f00 	str.w	r4, [r3, #3840]	; 0xf00
    e66e:	4a09      	ldr	r2, [pc, #36]	; (e694 <am_hal_tpiu_enable+0x9c>)
    e670:	6843      	ldr	r3, [r0, #4]
    e672:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
    e676:	f44f 7048 	mov.w	r0, #800	; 0x320
    e67a:	f7ff facd 	bl	dc18 <am_hal_flash_delay>
    e67e:	b004      	add	sp, #16
    e680:	bd10      	pop	{r4, pc}
    e682:	2405      	movs	r4, #5
    e684:	e7d4      	b.n	e630 <am_hal_tpiu_enable+0x38>
    e686:	bf00      	nop
    e688:	e0040000 	.word	0xe0040000
    e68c:	000f4240 	.word	0x000f4240
    e690:	001da380 	.word	0x001da380
    e694:	40020000 	.word	0x40020000

0000e698 <am_hal_uart_deinitialize>:
    e698:	b170      	cbz	r0, e6b8 <am_hal_uart_deinitialize+0x20>
    e69a:	6803      	ldr	r3, [r0, #0]
    e69c:	4a07      	ldr	r2, [pc, #28]	; (e6bc <am_hal_uart_deinitialize+0x24>)
    e69e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e6a2:	4293      	cmp	r3, r2
    e6a4:	d108      	bne.n	e6b8 <am_hal_uart_deinitialize+0x20>
    e6a6:	78c2      	ldrb	r2, [r0, #3]
    e6a8:	2300      	movs	r3, #0
    e6aa:	f36f 0200 	bfc	r2, #0, #1
    e6ae:	70c2      	strb	r2, [r0, #3]
    e6b0:	6243      	str	r3, [r0, #36]	; 0x24
    e6b2:	7103      	strb	r3, [r0, #4]
    e6b4:	4618      	mov	r0, r3
    e6b6:	4770      	bx	lr
    e6b8:	2002      	movs	r0, #2
    e6ba:	4770      	bx	lr
    e6bc:	01ea9e06 	.word	0x01ea9e06

0000e6c0 <am_hal_uart_power_control>:
    e6c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    e6c2:	4604      	mov	r4, r0
    e6c4:	6800      	ldr	r0, [r0, #0]
    e6c6:	4b39      	ldr	r3, [pc, #228]	; (e7ac <am_hal_uart_power_control+0xec>)
    e6c8:	f020 467e 	bic.w	r6, r0, #4261412864	; 0xfe000000
    e6cc:	429e      	cmp	r6, r3
    e6ce:	b085      	sub	sp, #20
    e6d0:	d13f      	bne.n	e752 <am_hal_uart_power_control+0x92>
    e6d2:	6a65      	ldr	r5, [r4, #36]	; 0x24
    e6d4:	f105 0008 	add.w	r0, r5, #8
    e6d8:	b2c7      	uxtb	r7, r0
    e6da:	b189      	cbz	r1, e700 <am_hal_uart_power_control+0x40>
    e6dc:	3901      	subs	r1, #1
    e6de:	2901      	cmp	r1, #1
    e6e0:	d834      	bhi.n	e74c <am_hal_uart_power_control+0x8c>
    e6e2:	2a00      	cmp	r2, #0
    e6e4:	d138      	bne.n	e758 <am_hal_uart_power_control+0x98>
    e6e6:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    e6ea:	351c      	adds	r5, #28
    e6ec:	032d      	lsls	r5, r5, #12
    e6ee:	f04f 33ff 	mov.w	r3, #4294967295
    e6f2:	646b      	str	r3, [r5, #68]	; 0x44
    e6f4:	4638      	mov	r0, r7
    e6f6:	f7ff fe6b 	bl	e3d0 <am_hal_pwrctrl_periph_disable>
    e6fa:	2000      	movs	r0, #0
    e6fc:	b005      	add	sp, #20
    e6fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e700:	2a00      	cmp	r2, #0
    e702:	d04a      	beq.n	e79a <am_hal_uart_power_control+0xda>
    e704:	7923      	ldrb	r3, [r4, #4]
    e706:	2b00      	cmp	r3, #0
    e708:	d04e      	beq.n	e7a8 <am_hal_uart_power_control+0xe8>
    e70a:	4638      	mov	r0, r7
    e70c:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    e710:	9101      	str	r1, [sp, #4]
    e712:	351c      	adds	r5, #28
    e714:	f7ff fe32 	bl	e37c <am_hal_pwrctrl_periph_enable>
    e718:	f7ff fc48 	bl	dfac <am_hal_interrupt_master_disable>
    e71c:	032d      	lsls	r5, r5, #12
    e71e:	68a3      	ldr	r3, [r4, #8]
    e720:	9002      	str	r0, [sp, #8]
    e722:	622b      	str	r3, [r5, #32]
    e724:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    e728:	626a      	str	r2, [r5, #36]	; 0x24
    e72a:	62ab      	str	r3, [r5, #40]	; 0x28
    e72c:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
    e730:	62ea      	str	r2, [r5, #44]	; 0x2c
    e732:	632b      	str	r3, [r5, #48]	; 0x30
    e734:	e9d4 2307 	ldrd	r2, r3, [r4, #28]
    e738:	9901      	ldr	r1, [sp, #4]
    e73a:	636a      	str	r2, [r5, #52]	; 0x34
    e73c:	63ab      	str	r3, [r5, #56]	; 0x38
    e73e:	9802      	ldr	r0, [sp, #8]
    e740:	7121      	strb	r1, [r4, #4]
    e742:	f7ff fc37 	bl	dfb4 <am_hal_interrupt_master_set>
    e746:	9901      	ldr	r1, [sp, #4]
    e748:	4608      	mov	r0, r1
    e74a:	e000      	b.n	e74e <am_hal_uart_power_control+0x8e>
    e74c:	2006      	movs	r0, #6
    e74e:	b005      	add	sp, #20
    e750:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e752:	2002      	movs	r0, #2
    e754:	b005      	add	sp, #20
    e756:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e758:	f7ff fc28 	bl	dfac <am_hal_interrupt_master_disable>
    e75c:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    e760:	351c      	adds	r5, #28
    e762:	032d      	lsls	r5, r5, #12
    e764:	9003      	str	r0, [sp, #12]
    e766:	6a2b      	ldr	r3, [r5, #32]
    e768:	60a3      	str	r3, [r4, #8]
    e76a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e76c:	60e3      	str	r3, [r4, #12]
    e76e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    e770:	6123      	str	r3, [r4, #16]
    e772:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    e774:	6163      	str	r3, [r4, #20]
    e776:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    e778:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    e77a:	61a3      	str	r3, [r4, #24]
    e77c:	6bab      	ldr	r3, [r5, #56]	; 0x38
    e77e:	61e2      	str	r2, [r4, #28]
    e780:	2201      	movs	r2, #1
    e782:	6223      	str	r3, [r4, #32]
    e784:	9803      	ldr	r0, [sp, #12]
    e786:	7122      	strb	r2, [r4, #4]
    e788:	f7ff fc14 	bl	dfb4 <am_hal_interrupt_master_set>
    e78c:	6823      	ldr	r3, [r4, #0]
    e78e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e792:	42b3      	cmp	r3, r6
    e794:	d1ae      	bne.n	e6f4 <am_hal_uart_power_control+0x34>
    e796:	6a65      	ldr	r5, [r4, #36]	; 0x24
    e798:	e7a5      	b.n	e6e6 <am_hal_uart_power_control+0x26>
    e79a:	4638      	mov	r0, r7
    e79c:	9201      	str	r2, [sp, #4]
    e79e:	f7ff fded 	bl	e37c <am_hal_pwrctrl_periph_enable>
    e7a2:	9a01      	ldr	r2, [sp, #4]
    e7a4:	4610      	mov	r0, r2
    e7a6:	e7d2      	b.n	e74e <am_hal_uart_power_control+0x8e>
    e7a8:	2007      	movs	r0, #7
    e7aa:	e7d0      	b.n	e74e <am_hal_uart_power_control+0x8e>
    e7ac:	01ea9e06 	.word	0x01ea9e06

0000e7b0 <am_hal_uart_tx_flush>:
    e7b0:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
    e7b4:	b570      	push	{r4, r5, r6, lr}
    e7b6:	6a45      	ldr	r5, [r0, #36]	; 0x24
    e7b8:	4604      	mov	r4, r0
    e7ba:	b15b      	cbz	r3, e7d4 <am_hal_uart_tx_flush+0x24>
    e7bc:	6b43      	ldr	r3, [r0, #52]	; 0x34
    e7be:	b14b      	cbz	r3, e7d4 <am_hal_uart_tx_flush+0x24>
    e7c0:	4e0e      	ldr	r6, [pc, #56]	; (e7fc <am_hal_uart_tx_flush+0x4c>)
    e7c2:	6e20      	ldr	r0, [r4, #96]	; 0x60
    e7c4:	fbb6 f0f0 	udiv	r0, r6, r0
    e7c8:	0100      	lsls	r0, r0, #4
    e7ca:	f7ff fa25 	bl	dc18 <am_hal_flash_delay>
    e7ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
    e7d0:	2b00      	cmp	r3, #0
    e7d2:	d1f6      	bne.n	e7c2 <am_hal_uart_tx_flush+0x12>
    e7d4:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    e7d8:	351c      	adds	r5, #28
    e7da:	032d      	lsls	r5, r5, #12
    e7dc:	69ab      	ldr	r3, [r5, #24]
    e7de:	071a      	lsls	r2, r3, #28
    e7e0:	d509      	bpl.n	e7f6 <am_hal_uart_tx_flush+0x46>
    e7e2:	4e06      	ldr	r6, [pc, #24]	; (e7fc <am_hal_uart_tx_flush+0x4c>)
    e7e4:	6e23      	ldr	r3, [r4, #96]	; 0x60
    e7e6:	fbb6 f3f3 	udiv	r3, r6, r3
    e7ea:	0118      	lsls	r0, r3, #4
    e7ec:	f7ff fa14 	bl	dc18 <am_hal_flash_delay>
    e7f0:	69ab      	ldr	r3, [r5, #24]
    e7f2:	071b      	lsls	r3, r3, #28
    e7f4:	d4f6      	bmi.n	e7e4 <am_hal_uart_tx_flush+0x34>
    e7f6:	2000      	movs	r0, #0
    e7f8:	bd70      	pop	{r4, r5, r6, pc}
    e7fa:	bf00      	nop
    e7fc:	00b71b00 	.word	0x00b71b00
    e800:	6d695443 	.word	0x6d695443
    e804:	6d207265 	.word	0x6d207265
    e808:	69746c75 	.word	0x69746c75
    e80c:	20656c70 	.word	0x20656c70
    e810:	69646962 	.word	0x69646962
    e814:	74636572 	.word	0x74636572
    e818:	616e6f69 	.word	0x616e6f69
    e81c:	7473206c 	.word	0x7473206c
    e820:	65707065 	.word	0x65707065
    e824:	6f6d2072 	.word	0x6f6d2072
    e828:	20726f74 	.word	0x20726f74
    e82c:	6d617865 	.word	0x6d617865
    e830:	0a656c70 	.word	0x0a656c70
    e834:	00000000 	.word	0x00000000
    e838:	0a0a0a0a 	.word	0x0a0a0a0a
    e83c:	0a0a0a0a 	.word	0x0a0a0a0a
    e840:	0a0a0a0a 	.word	0x0a0a0a0a
    e844:	0a0a0a0a 	.word	0x0a0a0a0a
    e848:	00000a0a 	.word	0x00000a0a

0000e84c <am_hal_cachectrl_defaults>:
    e84c:	00000308                                ....

0000e850 <CTx_tbl>:
    e850:	0219020c 021a020d 021b0212 021c0213     ................
    e860:	021d0705 021e0506 021f0216 02200217     .............. .
    e870:	0604022a 0707022b 0518022c 0621022d     *...+...,...-.!.
    e880:	0227022e 0523022f 07250230 020b0231     ..'./.#.0.%.1...

0000e890 <outcfg_tbl>:
    e890:	06151a00 1f050010 071e1908 06010818     ................
    e8a0:	0d151201 070e0111 0f1d0109 070d0919     ................
    e8b0:	0e141302 08040212 061c1b0a 1d0c0a1a     ................
    e8c0:	1e180903 1c060313 071f090b 14070b1b     ................
    e8d0:	1b100004 11040f14 1300080c 190c021c     ................
    e8e0:	1a110105 100d0115 1201060d 1805071d     ................
    e8f0:	19010206 12060a1c 11050a0e 1a0e011e     ................
    e900:	18150307 1307011d 10140b0f 1b0f061f     ................

0000e910 <g_AM_HAL_GPIO_DISABLE>:
    e910:	00000003                                ....

0000e914 <g_AM_HAL_GPIO_OUTPUT>:
    e914:	00000403                                ....

0000e918 <g_ui8Bit76Capabilities>:
    e918:	02800101 80010180 80800101 80808080     ................
    e928:	80808080 80808008 01800180 80808080     ................
    e938:	80808080 01800402 01010401 80808080     ................
    e948:	00000101                                ....

0000e94c <g_ui8Inpen>:
    e94c:	62272323 108703a1 e1005303 55418151     ##'b.....S..Q.AU
    e95c:	4080c405 4140b101 31a03114 1180f100     ...@..@A.1.1....
    e96c:	11c12191 304511e5 31300037 40007100     .!....E07.01.q.@
    e97c:	00003130                                01..

0000e980 <g_ui8NCEtable>:
    e980:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
    e990:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
    e9a0:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
    e9b0:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
    e9c0:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
    e9d0:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
    e9e0:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
    e9f0:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
    ea00:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
    ea10:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
    ea20:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
    ea30:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
    ea40:	32221202 43231303                       .."2..#C

0000ea48 <g_ui8nCEpins>:
    ea48:	02070707 00080802 01020202 01010101     ................
    ea58:	01010101 01010101 01010101 01010101     ................
    ea68:	01010101 08010101 01010008 01010101     ................
    ea78:	00000101                                ....

0000ea7c <g_am_hal_mcuctrl_flash_size>:
    ea7c:	00004000 00008000 00010000 00020000     .@..............
    ea8c:	00040000 00080000 00100000 00200000     .............. .
    ea9c:	00180000 00000000 00000000 00000000     ................
	...

0000eabc <g_am_hal_mcuctrl_sram_size>:
    eabc:	00004000 00008000 00010000 00020000     .@..............
    eacc:	00040000 00080000 00100000 00060000     ................
    eadc:	000c0000 00000000 00000000 00000000     ................
	...

0000eafc <g_AM_BSP_GPIO_ITM_SWO>:
    eafc:	00000002                                ....

0000eb00 <am_hal_pwrctrl_peripheral_control>:
	...
    eb0c:	00000001 00000004 00000004 00000002     ................
    eb1c:	00000008 00000008 00000004 00000008     ................
    eb2c:	00000008 00000008 00000008 00000008     ................
    eb3c:	00000010 00000010 00000010 00000020     ............ ...
    eb4c:	00000010 00000010 00000040 00000010     ........@.......
    eb5c:	00000010 00000080 00000004 00000004     ................
    eb6c:	00000100 00000004 00000004 00000200     ................
    eb7c:	00000020 00000020 00000400 00000004      ... ...........
    eb8c:	00000004 00000800 00000040 00000040     ........@...@...
    eb9c:	00001000 00000080 00000080 00002000     ............. ..
    ebac:	00000100 00000100                       ........
