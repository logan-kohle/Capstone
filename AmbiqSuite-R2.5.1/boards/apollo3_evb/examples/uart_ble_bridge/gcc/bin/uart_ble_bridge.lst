
bin/uart_ble_bridge.axf:     file format elf32-littlearm


Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 10 00 10 4d db 00 00 b5 db 00 00 f1 cc 00 00     ....M...........
    c010:	b7 db 00 00 b7 db 00 00 b7 db 00 00 00 00 00 00     ................
	...
    c02c:	b9 db 00 00 b9 db 00 00 00 00 00 00 b9 db 00 00     ................
    c03c:	b9 db 00 00 b9 db 00 00 b9 db 00 00 b9 db 00 00     ................
    c04c:	b9 db 00 00 b9 db 00 00 b9 db 00 00 b9 db 00 00     ................
    c05c:	b9 db 00 00 b9 db 00 00 b9 db 00 00 b9 db 00 00     ................
    c06c:	b9 db 00 00 b9 db 00 00 b9 db 00 00 b9 db 00 00     ................
    c07c:	b9 c5 00 00 b9 db 00 00 b9 db 00 00 b9 db 00 00     ................
    c08c:	b9 db 00 00 b9 db 00 00 b9 db 00 00 b9 db 00 00     ................
    c09c:	b9 db 00 00 b9 db 00 00 b9 db 00 00 b9 db 00 00     ................
    c0ac:	b9 db 00 00 b9 db 00 00 b9 db 00 00 b9 db 00 00     ................
    c0bc:	b9 db 00 00                                         ....

0000c0c0 <__Patchable>:
	...

0000c100 <__aeabi_d2f>:
    c100:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c104:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c108:	bf24      	itt	cs
    c10a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c10e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c112:	d90d      	bls.n	c130 <__aeabi_d2f+0x30>
    c114:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c118:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c11c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c120:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c124:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c128:	bf08      	it	eq
    c12a:	f020 0001 	biceq.w	r0, r0, #1
    c12e:	4770      	bx	lr
    c130:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c134:	d121      	bne.n	c17a <__aeabi_d2f+0x7a>
    c136:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c13a:	bfbc      	itt	lt
    c13c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c140:	4770      	bxlt	lr
    c142:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c146:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c14a:	f1c2 0218 	rsb	r2, r2, #24
    c14e:	f1c2 0c20 	rsb	ip, r2, #32
    c152:	fa10 f30c 	lsls.w	r3, r0, ip
    c156:	fa20 f002 	lsr.w	r0, r0, r2
    c15a:	bf18      	it	ne
    c15c:	f040 0001 	orrne.w	r0, r0, #1
    c160:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c164:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c168:	fa03 fc0c 	lsl.w	ip, r3, ip
    c16c:	ea40 000c 	orr.w	r0, r0, ip
    c170:	fa23 f302 	lsr.w	r3, r3, r2
    c174:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c178:	e7cc      	b.n	c114 <__aeabi_d2f+0x14>
    c17a:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c17e:	d107      	bne.n	c190 <__aeabi_d2f+0x90>
    c180:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c184:	bf1e      	ittt	ne
    c186:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c18a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c18e:	4770      	bxne	lr
    c190:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c194:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c198:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c19c:	4770      	bx	lr
    c19e:	bf00      	nop

0000c1a0 <memcpy>:
    c1a0:	4684      	mov	ip, r0
    c1a2:	ea41 0300 	orr.w	r3, r1, r0
    c1a6:	f013 0303 	ands.w	r3, r3, #3
    c1aa:	d16d      	bne.n	c288 <memcpy+0xe8>
    c1ac:	3a40      	subs	r2, #64	; 0x40
    c1ae:	d341      	bcc.n	c234 <memcpy+0x94>
    c1b0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1b4:	f840 3b04 	str.w	r3, [r0], #4
    c1b8:	f851 3b04 	ldr.w	r3, [r1], #4
    c1bc:	f840 3b04 	str.w	r3, [r0], #4
    c1c0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1c4:	f840 3b04 	str.w	r3, [r0], #4
    c1c8:	f851 3b04 	ldr.w	r3, [r1], #4
    c1cc:	f840 3b04 	str.w	r3, [r0], #4
    c1d0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1d4:	f840 3b04 	str.w	r3, [r0], #4
    c1d8:	f851 3b04 	ldr.w	r3, [r1], #4
    c1dc:	f840 3b04 	str.w	r3, [r0], #4
    c1e0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1e4:	f840 3b04 	str.w	r3, [r0], #4
    c1e8:	f851 3b04 	ldr.w	r3, [r1], #4
    c1ec:	f840 3b04 	str.w	r3, [r0], #4
    c1f0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1f4:	f840 3b04 	str.w	r3, [r0], #4
    c1f8:	f851 3b04 	ldr.w	r3, [r1], #4
    c1fc:	f840 3b04 	str.w	r3, [r0], #4
    c200:	f851 3b04 	ldr.w	r3, [r1], #4
    c204:	f840 3b04 	str.w	r3, [r0], #4
    c208:	f851 3b04 	ldr.w	r3, [r1], #4
    c20c:	f840 3b04 	str.w	r3, [r0], #4
    c210:	f851 3b04 	ldr.w	r3, [r1], #4
    c214:	f840 3b04 	str.w	r3, [r0], #4
    c218:	f851 3b04 	ldr.w	r3, [r1], #4
    c21c:	f840 3b04 	str.w	r3, [r0], #4
    c220:	f851 3b04 	ldr.w	r3, [r1], #4
    c224:	f840 3b04 	str.w	r3, [r0], #4
    c228:	f851 3b04 	ldr.w	r3, [r1], #4
    c22c:	f840 3b04 	str.w	r3, [r0], #4
    c230:	3a40      	subs	r2, #64	; 0x40
    c232:	d2bd      	bcs.n	c1b0 <memcpy+0x10>
    c234:	3230      	adds	r2, #48	; 0x30
    c236:	d311      	bcc.n	c25c <memcpy+0xbc>
    c238:	f851 3b04 	ldr.w	r3, [r1], #4
    c23c:	f840 3b04 	str.w	r3, [r0], #4
    c240:	f851 3b04 	ldr.w	r3, [r1], #4
    c244:	f840 3b04 	str.w	r3, [r0], #4
    c248:	f851 3b04 	ldr.w	r3, [r1], #4
    c24c:	f840 3b04 	str.w	r3, [r0], #4
    c250:	f851 3b04 	ldr.w	r3, [r1], #4
    c254:	f840 3b04 	str.w	r3, [r0], #4
    c258:	3a10      	subs	r2, #16
    c25a:	d2ed      	bcs.n	c238 <memcpy+0x98>
    c25c:	320c      	adds	r2, #12
    c25e:	d305      	bcc.n	c26c <memcpy+0xcc>
    c260:	f851 3b04 	ldr.w	r3, [r1], #4
    c264:	f840 3b04 	str.w	r3, [r0], #4
    c268:	3a04      	subs	r2, #4
    c26a:	d2f9      	bcs.n	c260 <memcpy+0xc0>
    c26c:	3204      	adds	r2, #4
    c26e:	d008      	beq.n	c282 <memcpy+0xe2>
    c270:	07d2      	lsls	r2, r2, #31
    c272:	bf1c      	itt	ne
    c274:	f811 3b01 	ldrbne.w	r3, [r1], #1
    c278:	f800 3b01 	strbne.w	r3, [r0], #1
    c27c:	d301      	bcc.n	c282 <memcpy+0xe2>
    c27e:	880b      	ldrh	r3, [r1, #0]
    c280:	8003      	strh	r3, [r0, #0]
    c282:	4660      	mov	r0, ip
    c284:	4770      	bx	lr
    c286:	bf00      	nop
    c288:	2a08      	cmp	r2, #8
    c28a:	d313      	bcc.n	c2b4 <memcpy+0x114>
    c28c:	078b      	lsls	r3, r1, #30
    c28e:	d08d      	beq.n	c1ac <memcpy+0xc>
    c290:	f010 0303 	ands.w	r3, r0, #3
    c294:	d08a      	beq.n	c1ac <memcpy+0xc>
    c296:	f1c3 0304 	rsb	r3, r3, #4
    c29a:	1ad2      	subs	r2, r2, r3
    c29c:	07db      	lsls	r3, r3, #31
    c29e:	bf1c      	itt	ne
    c2a0:	f811 3b01 	ldrbne.w	r3, [r1], #1
    c2a4:	f800 3b01 	strbne.w	r3, [r0], #1
    c2a8:	d380      	bcc.n	c1ac <memcpy+0xc>
    c2aa:	f831 3b02 	ldrh.w	r3, [r1], #2
    c2ae:	f820 3b02 	strh.w	r3, [r0], #2
    c2b2:	e77b      	b.n	c1ac <memcpy+0xc>
    c2b4:	3a04      	subs	r2, #4
    c2b6:	d3d9      	bcc.n	c26c <memcpy+0xcc>
    c2b8:	3a01      	subs	r2, #1
    c2ba:	f811 3b01 	ldrb.w	r3, [r1], #1
    c2be:	f800 3b01 	strb.w	r3, [r0], #1
    c2c2:	d2f9      	bcs.n	c2b8 <memcpy+0x118>
    c2c4:	780b      	ldrb	r3, [r1, #0]
    c2c6:	7003      	strb	r3, [r0, #0]
    c2c8:	784b      	ldrb	r3, [r1, #1]
    c2ca:	7043      	strb	r3, [r0, #1]
    c2cc:	788b      	ldrb	r3, [r1, #2]
    c2ce:	7083      	strb	r3, [r0, #2]
    c2d0:	4660      	mov	r0, ip
    c2d2:	4770      	bx	lr

0000c2d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    c2d4:	b082      	sub	sp, #8
    c2d6:	4603      	mov	r3, r0
    c2d8:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) >= 0)
    c2dc:	f99d 3007 	ldrsb.w	r3, [sp, #7]
    c2e0:	2b00      	cmp	r3, #0
    c2e2:	db0c      	blt.n	c2fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c2e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c2e8:	f003 021f 	and.w	r2, r3, #31
    c2ec:	4905      	ldr	r1, [pc, #20]	; (c304 <__NVIC_EnableIRQ+0x30>)
    c2ee:	f99d 3007 	ldrsb.w	r3, [sp, #7]
    c2f2:	095b      	lsrs	r3, r3, #5
    c2f4:	2001      	movs	r0, #1
    c2f6:	fa00 f202 	lsl.w	r2, r0, r2
    c2fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
    c2fe:	bf00      	nop
    c300:	b002      	add	sp, #8
    c302:	4770      	bx	lr
    c304:	e000e100 	.word	0xe000e100

0000c308 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    c308:	b082      	sub	sp, #8
    c30a:	4603      	mov	r3, r0
    c30c:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) >= 0)
    c310:	f99d 3007 	ldrsb.w	r3, [sp, #7]
    c314:	2b00      	cmp	r3, #0
    c316:	db13      	blt.n	c340 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c318:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c31c:	f003 021f 	and.w	r2, r3, #31
    c320:	4909      	ldr	r1, [pc, #36]	; (c348 <__NVIC_DisableIRQ+0x40>)
    c322:	f99d 3007 	ldrsb.w	r3, [sp, #7]
    c326:	095b      	lsrs	r3, r3, #5
    c328:	2001      	movs	r0, #1
    c32a:	fa00 f202 	lsl.w	r2, r0, r2
    c32e:	3320      	adds	r3, #32
    c330:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    c334:	f3bf 8f4f 	dsb	sy
}
    c338:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
    c33a:	f3bf 8f6f 	isb	sy
}
    c33e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
    c340:	bf00      	nop
    c342:	b002      	add	sp, #8
    c344:	4770      	bx	lr
    c346:	bf00      	nop
    c348:	e000e100 	.word	0xe000e100

0000c34c <cmd_handler>:
void *g_pvBLEHandle;
void *g_pvUART;
uint8_t carrier_wave_mode = 0;

static void cmd_handler(uint8_t *pBuffer, uint32_t len)
{
    c34c:	b500      	push	{lr}
    c34e:	b085      	sub	sp, #20
    c350:	9001      	str	r0, [sp, #4]
    c352:	9100      	str	r1, [sp, #0]
    uint16_t value;

#ifndef AM_DEBUG_BLE_TIMING
    for ( uint32_t i = 0; i < len; i++ )
    c354:	2300      	movs	r3, #0
    c356:	9303      	str	r3, [sp, #12]
    c358:	e00a      	b.n	c370 <cmd_handler+0x24>
    {
        am_util_stdio_printf("%02x ", pBuffer[i]);
    c35a:	9a01      	ldr	r2, [sp, #4]
    c35c:	9b03      	ldr	r3, [sp, #12]
    c35e:	4413      	add	r3, r2
    c360:	781b      	ldrb	r3, [r3, #0]
    c362:	4619      	mov	r1, r3
    c364:	486f      	ldr	r0, [pc, #444]	; (c524 <cmd_handler+0x1d8>)
    c366:	f001 fbd1 	bl	db0c <am_util_stdio_printf>
    for ( uint32_t i = 0; i < len; i++ )
    c36a:	9b03      	ldr	r3, [sp, #12]
    c36c:	3301      	adds	r3, #1
    c36e:	9303      	str	r3, [sp, #12]
    c370:	9a03      	ldr	r2, [sp, #12]
    c372:	9b00      	ldr	r3, [sp, #0]
    c374:	429a      	cmp	r2, r3
    c376:	d3f0      	bcc.n	c35a <cmd_handler+0xe>
    }
    am_util_stdio_printf("\n");
    c378:	486b      	ldr	r0, [pc, #428]	; (c528 <cmd_handler+0x1dc>)
    c37a:	f001 fbc7 	bl	db0c <am_util_stdio_printf>
#endif

    carrier_wave_mode = 0;
    c37e:	4b6b      	ldr	r3, [pc, #428]	; (c52c <cmd_handler+0x1e0>)
    c380:	2200      	movs	r2, #0
    c382:	701a      	strb	r2, [r3, #0]

    if ( (NULL != pBuffer) && (pBuffer[0] == 0x01) && (pBuffer[1] == 0x1e) && (pBuffer[2] == 0x20) )
    c384:	9b01      	ldr	r3, [sp, #4]
    c386:	2b00      	cmp	r3, #0
    c388:	d038      	beq.n	c3fc <cmd_handler+0xb0>
    c38a:	9b01      	ldr	r3, [sp, #4]
    c38c:	781b      	ldrb	r3, [r3, #0]
    c38e:	2b01      	cmp	r3, #1
    c390:	d134      	bne.n	c3fc <cmd_handler+0xb0>
    c392:	9b01      	ldr	r3, [sp, #4]
    c394:	3301      	adds	r3, #1
    c396:	781b      	ldrb	r3, [r3, #0]
    c398:	2b1e      	cmp	r3, #30
    c39a:	d12f      	bne.n	c3fc <cmd_handler+0xb0>
    c39c:	9b01      	ldr	r3, [sp, #4]
    c39e:	3302      	adds	r3, #2
    c3a0:	781b      	ldrb	r3, [r3, #0]
    c3a2:	2b20      	cmp	r3, #32
    c3a4:	d12a      	bne.n	c3fc <cmd_handler+0xb0>
    {
        switch(pBuffer[6])
    c3a6:	9b01      	ldr	r3, [sp, #4]
    c3a8:	3306      	adds	r3, #6
    c3aa:	781b      	ldrb	r3, [r3, #0]
    c3ac:	2bff      	cmp	r3, #255	; 0xff
    c3ae:	d018      	beq.n	c3e2 <cmd_handler+0x96>
    c3b0:	2bff      	cmp	r3, #255	; 0xff
    c3b2:	dc25      	bgt.n	c400 <cmd_handler+0xb4>
    c3b4:	2b08      	cmp	r3, #8
    c3b6:	d00c      	beq.n	c3d2 <cmd_handler+0x86>
    c3b8:	2b09      	cmp	r3, #9
    c3ba:	d121      	bne.n	c400 <cmd_handler+0xb4>
        {
            case 0x09:      // constant transmission mode
            {
                am_util_ble_set_constant_transmission(g_pvBLEHandle, true);  // set constant transmission
    c3bc:	4b5c      	ldr	r3, [pc, #368]	; (c530 <cmd_handler+0x1e4>)
    c3be:	681b      	ldr	r3, [r3, #0]
    c3c0:	2101      	movs	r1, #1
    c3c2:	4618      	mov	r0, r3
    c3c4:	f000 fa74 	bl	c8b0 <am_util_ble_set_constant_transmission>
                pBuffer[6] = 0x00;
    c3c8:	9b01      	ldr	r3, [sp, #4]
    c3ca:	3306      	adds	r3, #6
    c3cc:	2200      	movs	r2, #0
    c3ce:	701a      	strb	r2, [r3, #0]
            }
            break;
    c3d0:	e017      	b.n	c402 <cmd_handler+0xb6>

            case 0x08:      // carrier wave mode
            {
                carrier_wave_mode = 1;  //set  carrier wave mode
    c3d2:	4b56      	ldr	r3, [pc, #344]	; (c52c <cmd_handler+0x1e0>)
    c3d4:	2201      	movs	r2, #1
    c3d6:	701a      	strb	r2, [r3, #0]
                pBuffer[6] = 0x00;
    c3d8:	9b01      	ldr	r3, [sp, #4]
    c3da:	3306      	adds	r3, #6
    c3dc:	2200      	movs	r2, #0
    c3de:	701a      	strb	r2, [r3, #0]
            }
            break;
    c3e0:	e00f      	b.n	c402 <cmd_handler+0xb6>

            /*added a new command for stopping carrier wave mode transmitting if needed*/
            case 0xff:
                am_util_ble_transmitter_control(g_pvBLEHandle, 0);           //disable carrier_wave_mode
    c3e2:	4b53      	ldr	r3, [pc, #332]	; (c530 <cmd_handler+0x1e4>)
    c3e4:	681b      	ldr	r3, [r3, #0]
    c3e6:	2100      	movs	r1, #0
    c3e8:	4618      	mov	r0, r3
    c3ea:	f000 fa8d 	bl	c908 <am_util_ble_transmitter_control>
                am_util_ble_set_constant_transmission(g_pvBLEHandle, false); //disable constant transmission mode
    c3ee:	4b50      	ldr	r3, [pc, #320]	; (c530 <cmd_handler+0x1e4>)
    c3f0:	681b      	ldr	r3, [r3, #0]
    c3f2:	2100      	movs	r1, #0
    c3f4:	4618      	mov	r0, r3
    c3f6:	f000 fa5b 	bl	c8b0 <am_util_ble_set_constant_transmission>

           break;
    c3fa:	e002      	b.n	c402 <cmd_handler+0xb6>

            default:
            break;
        }
    }
    c3fc:	bf00      	nop
    c3fe:	e000      	b.n	c402 <cmd_handler+0xb6>
            break;
    c400:	bf00      	nop


    //
    // Check the parameters and the UART command format.
    //
    if ( (NULL != pBuffer) && (len == 5) && (pBuffer[0] == 'A') && (pBuffer[1] == 'M') )
    c402:	9b01      	ldr	r3, [sp, #4]
    c404:	2b00      	cmp	r3, #0
    c406:	f000 8085 	beq.w	c514 <cmd_handler+0x1c8>
    c40a:	9b00      	ldr	r3, [sp, #0]
    c40c:	2b05      	cmp	r3, #5
    c40e:	f040 8081 	bne.w	c514 <cmd_handler+0x1c8>
    c412:	9b01      	ldr	r3, [sp, #4]
    c414:	781b      	ldrb	r3, [r3, #0]
    c416:	2b41      	cmp	r3, #65	; 0x41
    c418:	d17c      	bne.n	c514 <cmd_handler+0x1c8>
    c41a:	9b01      	ldr	r3, [sp, #4]
    c41c:	3301      	adds	r3, #1
    c41e:	781b      	ldrb	r3, [r3, #0]
    c420:	2b4d      	cmp	r3, #77	; 0x4d
    c422:	d177      	bne.n	c514 <cmd_handler+0x1c8>
    {
        //
        // Compute the value.
        //
        value = pBuffer[3] << 8 | pBuffer[4];
    c424:	9b01      	ldr	r3, [sp, #4]
    c426:	3303      	adds	r3, #3
    c428:	781b      	ldrb	r3, [r3, #0]
    c42a:	021b      	lsls	r3, r3, #8
    c42c:	b21a      	sxth	r2, r3
    c42e:	9b01      	ldr	r3, [sp, #4]
    c430:	3304      	adds	r3, #4
    c432:	781b      	ldrb	r3, [r3, #0]
    c434:	b21b      	sxth	r3, r3
    c436:	4313      	orrs	r3, r2
    c438:	b21b      	sxth	r3, r3
    c43a:	f8ad 300a 	strh.w	r3, [sp, #10]

        //
        // Interpret the Command 'Y'
        //
        switch (pBuffer[2])
    c43e:	9b01      	ldr	r3, [sp, #4]
    c440:	3302      	adds	r3, #2
    c442:	781b      	ldrb	r3, [r3, #0]
    c444:	3b30      	subs	r3, #48	; 0x30
    c446:	2b04      	cmp	r3, #4
    c448:	d85b      	bhi.n	c502 <cmd_handler+0x1b6>
    c44a:	a201      	add	r2, pc, #4	; (adr r2, c450 <cmd_handler+0x104>)
    c44c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c450:	0000c465 	.word	0x0000c465
    c454:	0000c49d 	.word	0x0000c49d
    c458:	0000c4b5 	.word	0x0000c4b5
    c45c:	0000c4cf 	.word	0x0000c4cf
    c460:	0000c4e9 	.word	0x0000c4e9
        {
            case '0':   // handle the tx power setting command.
            {
                // Check the TX power range value.
                if ((value > 0) && (value <= 0xF))
    c464:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    c468:	2b00      	cmp	r3, #0
    c46a:	d010      	beq.n	c48e <cmd_handler+0x142>
    c46c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    c470:	2b0f      	cmp	r3, #15
    c472:	d80c      	bhi.n	c48e <cmd_handler+0x142>
                {
                    am_hal_ble_tx_power_set(g_pvBLEHandle, (uint8_t)value);
    c474:	4b2e      	ldr	r3, [pc, #184]	; (c530 <cmd_handler+0x1e4>)
    c476:	681b      	ldr	r3, [r3, #0]
    c478:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    c47c:	b2d2      	uxtb	r2, r2
    c47e:	4611      	mov	r1, r2
    c480:	4618      	mov	r0, r3
    c482:	f002 fddf 	bl	f044 <am_hal_ble_tx_power_set>
#ifndef AM_DEBUG_BLE_TIMING
                    am_util_stdio_printf("TX Power Setting Command OK\n");
    c486:	482b      	ldr	r0, [pc, #172]	; (c534 <cmd_handler+0x1e8>)
    c488:	f001 fb40 	bl	db0c <am_util_stdio_printf>
#ifndef AM_DEBUG_BLE_TIMING
                    am_util_stdio_printf("Invalid TX Power Value %d\n", value);
#endif
                }
            }
            break;
    c48c:	e03e      	b.n	c50c <cmd_handler+0x1c0>
                    am_util_stdio_printf("Invalid TX Power Value %d\n", value);
    c48e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    c492:	4619      	mov	r1, r3
    c494:	4828      	ldr	r0, [pc, #160]	; (c538 <cmd_handler+0x1ec>)
    c496:	f001 fb39 	bl	db0c <am_util_stdio_printf>
            break;
    c49a:	e037      	b.n	c50c <cmd_handler+0x1c0>

            case '1':   // handle the 32MHz crystal trim setting command.
            {
                am_util_ble_crystal_trim_set(g_pvBLEHandle, value);
    c49c:	4b24      	ldr	r3, [pc, #144]	; (c530 <cmd_handler+0x1e4>)
    c49e:	681b      	ldr	r3, [r3, #0]
    c4a0:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    c4a4:	4611      	mov	r1, r2
    c4a6:	4618      	mov	r0, r3
    c4a8:	f000 fada 	bl	ca60 <am_util_ble_crystal_trim_set>
#ifndef AM_DEBUG_BLE_TIMING
                am_util_stdio_printf("32MHz Crystal Trim Command OK\n");
    c4ac:	4823      	ldr	r0, [pc, #140]	; (c53c <cmd_handler+0x1f0>)
    c4ae:	f001 fb2d 	bl	db0c <am_util_stdio_printf>
#endif
            }
            break;
    c4b2:	e02b      	b.n	c50c <cmd_handler+0x1c0>

            case '2':   // handle modulation index setting command.
            {
                am_hal_ble_transmitter_modex_set(g_pvBLEHandle, (uint8_t)value);
    c4b4:	4b1e      	ldr	r3, [pc, #120]	; (c530 <cmd_handler+0x1e4>)
    c4b6:	681b      	ldr	r3, [r3, #0]
    c4b8:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    c4bc:	b2d2      	uxtb	r2, r2
    c4be:	4611      	mov	r1, r2
    c4c0:	4618      	mov	r0, r3
    c4c2:	f002 fc03 	bl	eccc <am_hal_ble_transmitter_modex_set>
#ifndef AM_DEBUG_BLE_TIMING
                am_util_stdio_printf("Modulation Index Command OK\n");
    c4c6:	481e      	ldr	r0, [pc, #120]	; (c540 <cmd_handler+0x1f4>)
    c4c8:	f001 fb20 	bl	db0c <am_util_stdio_printf>
#endif
            }
            break;
    c4cc:	e01e      	b.n	c50c <cmd_handler+0x1c0>

            case '3':  // handle the carrier wave output command
            {
                am_util_ble_transmitter_control_ex(g_pvBLEHandle, (uint8_t)value);
    c4ce:	4b18      	ldr	r3, [pc, #96]	; (c530 <cmd_handler+0x1e4>)
    c4d0:	681b      	ldr	r3, [r3, #0]
    c4d2:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    c4d6:	b2d2      	uxtb	r2, r2
    c4d8:	4611      	mov	r1, r2
    c4da:	4618      	mov	r0, r3
    c4dc:	f000 fb64 	bl	cba8 <am_util_ble_transmitter_control_ex>
#ifndef AM_DEBUG_BLE_TIMING
                am_util_stdio_printf("generate carrier wave OK\n");
    c4e0:	4818      	ldr	r0, [pc, #96]	; (c544 <cmd_handler+0x1f8>)
    c4e2:	f001 fb13 	bl	db0c <am_util_stdio_printf>
#endif
            }
            break;
    c4e6:	e011      	b.n	c50c <cmd_handler+0x1c0>

            case '4':  // handle the continually transmitting output command
            {
                am_util_ble_set_constant_transmission_ex(g_pvBLEHandle, (uint8_t)value);
    c4e8:	4b11      	ldr	r3, [pc, #68]	; (c530 <cmd_handler+0x1e4>)
    c4ea:	681b      	ldr	r3, [r3, #0]
    c4ec:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    c4f0:	b2d2      	uxtb	r2, r2
    c4f2:	4611      	mov	r1, r2
    c4f4:	4618      	mov	r0, r3
    c4f6:	f000 fb69 	bl	cbcc <am_util_ble_set_constant_transmission_ex>
#ifndef AM_DEBUG_BLE_TIMING
                am_util_stdio_printf("generate constant moderated signal wave OK\n");
    c4fa:	4813      	ldr	r0, [pc, #76]	; (c548 <cmd_handler+0x1fc>)
    c4fc:	f001 fb06 	bl	db0c <am_util_stdio_printf>
#endif
            }
            break;
    c500:	e004      	b.n	c50c <cmd_handler+0x1c0>

            default:
            {
#ifndef AM_DEBUG_BLE_TIMING
                am_util_stdio_printf("Invalid UART Special Command %s\r\n", pBuffer);
    c502:	9901      	ldr	r1, [sp, #4]
    c504:	4811      	ldr	r0, [pc, #68]	; (c54c <cmd_handler+0x200>)
    c506:	f001 fb01 	bl	db0c <am_util_stdio_printf>
#endif
            }
            break;
    c50a:	bf00      	nop

        }
        g_bCmdProcessedFlag = true;
    c50c:	4b10      	ldr	r3, [pc, #64]	; (c550 <cmd_handler+0x204>)
    c50e:	2201      	movs	r2, #1
    c510:	701a      	strb	r2, [r3, #0]
    c512:	e003      	b.n	c51c <cmd_handler+0x1d0>
    }
    else
    {
        g_bCmdProcessedFlag = false;
    c514:	4b0e      	ldr	r3, [pc, #56]	; (c550 <cmd_handler+0x204>)
    c516:	2200      	movs	r2, #0
    c518:	701a      	strb	r2, [r3, #0]
    }
}
    c51a:	bf00      	nop
    c51c:	bf00      	nop
    c51e:	b005      	add	sp, #20
    c520:	f85d fb04 	ldr.w	pc, [sp], #4
    c524:	000107b8 	.word	0x000107b8
    c528:	000107c0 	.word	0x000107c0
    c52c:	10003208 	.word	0x10003208
    c530:	10003200 	.word	0x10003200
    c534:	000107c4 	.word	0x000107c4
    c538:	000107e4 	.word	0x000107e4
    c53c:	00010800 	.word	0x00010800
    c540:	00010820 	.word	0x00010820
    c544:	00010840 	.word	0x00010840
    c548:	0001085c 	.word	0x0001085c
    c54c:	00010888 	.word	0x00010888
    c550:	100031fd 	.word	0x100031fd

0000c554 <fix_trans_mode>:


//setting transmission mode and fix channel 1 bug in DTM mode
static void fix_trans_mode(uint8_t *recvdata)
{
    c554:	b500      	push	{lr}
    c556:	b083      	sub	sp, #12
    c558:	9001      	str	r0, [sp, #4]
    if ( carrier_wave_mode == 1 )
    c55a:	4b14      	ldr	r3, [pc, #80]	; (c5ac <fix_trans_mode+0x58>)
    c55c:	781b      	ldrb	r3, [r3, #0]
    c55e:	2b01      	cmp	r3, #1
    c560:	d106      	bne.n	c570 <fix_trans_mode+0x1c>
    {
        am_util_ble_transmitter_control(g_pvBLEHandle, 1);   //set carrier wave mode
    c562:	4b13      	ldr	r3, [pc, #76]	; (c5b0 <fix_trans_mode+0x5c>)
    c564:	681b      	ldr	r3, [r3, #0]
    c566:	2101      	movs	r1, #1
    c568:	4618      	mov	r0, r3
    c56a:	f000 f9cd 	bl	c908 <am_util_ble_transmitter_control>
      if ((recvdata[4] == 0x03) && (recvdata[5] == 0x0c))
      {
          am_util_ble_init_rf_channel(g_pvBLEHandle);        //fix channel 1 bug
      }
    }
}
    c56e:	e018      	b.n	c5a2 <fix_trans_mode+0x4e>
    else if (APOLLO3_A0 || APOLLO3_A1)
    c570:	4b10      	ldr	r3, [pc, #64]	; (c5b4 <fix_trans_mode+0x60>)
    c572:	68db      	ldr	r3, [r3, #12]
    c574:	b2db      	uxtb	r3, r3
    c576:	2b11      	cmp	r3, #17
    c578:	d004      	beq.n	c584 <fix_trans_mode+0x30>
    c57a:	4b0e      	ldr	r3, [pc, #56]	; (c5b4 <fix_trans_mode+0x60>)
    c57c:	68db      	ldr	r3, [r3, #12]
    c57e:	b2db      	uxtb	r3, r3
    c580:	2b12      	cmp	r3, #18
    c582:	d10e      	bne.n	c5a2 <fix_trans_mode+0x4e>
      if ((recvdata[4] == 0x03) && (recvdata[5] == 0x0c))
    c584:	9b01      	ldr	r3, [sp, #4]
    c586:	3304      	adds	r3, #4
    c588:	781b      	ldrb	r3, [r3, #0]
    c58a:	2b03      	cmp	r3, #3
    c58c:	d109      	bne.n	c5a2 <fix_trans_mode+0x4e>
    c58e:	9b01      	ldr	r3, [sp, #4]
    c590:	3305      	adds	r3, #5
    c592:	781b      	ldrb	r3, [r3, #0]
    c594:	2b0c      	cmp	r3, #12
    c596:	d104      	bne.n	c5a2 <fix_trans_mode+0x4e>
          am_util_ble_init_rf_channel(g_pvBLEHandle);        //fix channel 1 bug
    c598:	4b05      	ldr	r3, [pc, #20]	; (c5b0 <fix_trans_mode+0x5c>)
    c59a:	681b      	ldr	r3, [r3, #0]
    c59c:	4618      	mov	r0, r3
    c59e:	f000 f9df 	bl	c960 <am_util_ble_init_rf_channel>
}
    c5a2:	bf00      	nop
    c5a4:	b003      	add	sp, #12
    c5a6:	f85d fb04 	ldr.w	pc, [sp], #4
    c5aa:	bf00      	nop
    c5ac:	10003208 	.word	0x10003208
    c5b0:	10003200 	.word	0x10003200
    c5b4:	40020000 	.word	0x40020000

0000c5b8 <am_uart_isr>:
#if UART_HCI_BRIDGE == 0
void am_uart_isr(void)
#else
void am_uart1_isr(void)
#endif
{
    c5b8:	b500      	push	{lr}
    c5ba:	b089      	sub	sp, #36	; 0x24
  uint32_t ui32Status;

  //
  // Read the masked interrupt status from the UART.
  //
  am_hal_uart_interrupt_status_get(g_pvUART, &ui32Status, true);
    c5bc:	4b24      	ldr	r3, [pc, #144]	; (c650 <am_uart_isr+0x98>)
    c5be:	681b      	ldr	r3, [r3, #0]
    c5c0:	a907      	add	r1, sp, #28
    c5c2:	2201      	movs	r2, #1
    c5c4:	4618      	mov	r0, r3
    c5c6:	f003 fed9 	bl	1037c <am_hal_uart_interrupt_status_get>
  am_hal_uart_interrupt_clear(g_pvUART, ui32Status);
    c5ca:	4b21      	ldr	r3, [pc, #132]	; (c650 <am_uart_isr+0x98>)
    c5cc:	681b      	ldr	r3, [r3, #0]
    c5ce:	9a07      	ldr	r2, [sp, #28]
    c5d0:	4611      	mov	r1, r2
    c5d2:	4618      	mov	r0, r3
    c5d4:	f003 fec0 	bl	10358 <am_hal_uart_interrupt_clear>
  am_hal_uart_interrupt_service(g_pvUART, ui32Status, 0);
    c5d8:	4b1d      	ldr	r3, [pc, #116]	; (c650 <am_uart_isr+0x98>)
    c5da:	681b      	ldr	r3, [r3, #0]
    c5dc:	9907      	ldr	r1, [sp, #28]
    c5de:	2200      	movs	r2, #0
    c5e0:	4618      	mov	r0, r3
    c5e2:	f003 fe09 	bl	101f8 <am_hal_uart_interrupt_service>

  //
  // If there's an RX interrupt, handle it in a way that preserves the
  // timeout interrupt on gaps between packets.
  //
  if (ui32Status & (AM_HAL_UART_INT_RX_TMOUT | AM_HAL_UART_INT_RX))
    c5e6:	9b07      	ldr	r3, [sp, #28]
    c5e8:	f003 0350 	and.w	r3, r3, #80	; 0x50
    c5ec:	2b00      	cmp	r3, #0
    c5ee:	d02a      	beq.n	c646 <am_uart_isr+0x8e>
  {
    uint32_t ui32BytesRead;

    am_hal_uart_transfer_t sRead =
    c5f0:	2301      	movs	r3, #1
    c5f2:	9301      	str	r3, [sp, #4]
    {
      .ui32Direction = AM_HAL_UART_READ,
      .pui8Data = (uint8_t *) &(g_psWriteData.bytes[g_ui32UARTRxIndex]),
    c5f4:	4b17      	ldr	r3, [pc, #92]	; (c654 <am_uart_isr+0x9c>)
    c5f6:	681b      	ldr	r3, [r3, #0]
    c5f8:	4a17      	ldr	r2, [pc, #92]	; (c658 <am_uart_isr+0xa0>)
    c5fa:	4413      	add	r3, r2
    am_hal_uart_transfer_t sRead =
    c5fc:	9302      	str	r3, [sp, #8]
    c5fe:	2317      	movs	r3, #23
    c600:	9303      	str	r3, [sp, #12]
    c602:	2300      	movs	r3, #0
    c604:	9304      	str	r3, [sp, #16]
    c606:	ab06      	add	r3, sp, #24
    c608:	9305      	str	r3, [sp, #20]
      .ui32NumBytes = 23,
      .ui32TimeoutMs = 0,
      .pui32BytesTransferred = &ui32BytesRead,
    };

    am_hal_uart_transfer(g_pvUART, &sRead);
    c60a:	4b11      	ldr	r3, [pc, #68]	; (c650 <am_uart_isr+0x98>)
    c60c:	681b      	ldr	r3, [r3, #0]
    c60e:	aa01      	add	r2, sp, #4
    c610:	4611      	mov	r1, r2
    c612:	4618      	mov	r0, r3
    c614:	f003 fbf0 	bl	fdf8 <am_hal_uart_transfer>

    g_ui32UARTRxIndex += ui32BytesRead;
    c618:	4b0e      	ldr	r3, [pc, #56]	; (c654 <am_uart_isr+0x9c>)
    c61a:	681a      	ldr	r2, [r3, #0]
    c61c:	9b06      	ldr	r3, [sp, #24]
    c61e:	4413      	add	r3, r2
    c620:	4a0c      	ldr	r2, [pc, #48]	; (c654 <am_uart_isr+0x9c>)
    c622:	6013      	str	r3, [r2, #0]

    //
    // If there is a TMOUT interrupt, assume we have a compete packet, and
    // send it over SPI.
    //
    if (ui32Status & (AM_HAL_UART_INT_RX_TMOUT))
    c624:	9b07      	ldr	r3, [sp, #28]
    c626:	f003 0340 	and.w	r3, r3, #64	; 0x40
    c62a:	2b00      	cmp	r3, #0
    c62c:	d00b      	beq.n	c646 <am_uart_isr+0x8e>
    {
      NVIC_DisableIRQ((IRQn_Type)(UART0_IRQn + UART_HCI_BRIDGE));
    c62e:	200f      	movs	r0, #15
    c630:	f7ff fe6a 	bl	c308 <__NVIC_DisableIRQ>
      cmd_handler(g_psWriteData.bytes, g_ui32UARTRxIndex);
    c634:	4b07      	ldr	r3, [pc, #28]	; (c654 <am_uart_isr+0x9c>)
    c636:	681b      	ldr	r3, [r3, #0]
    c638:	4619      	mov	r1, r3
    c63a:	4807      	ldr	r0, [pc, #28]	; (c658 <am_uart_isr+0xa0>)
    c63c:	f7ff fe86 	bl	c34c <cmd_handler>
      g_bRxTimeoutFlag = true;
    c640:	4b06      	ldr	r3, [pc, #24]	; (c65c <am_uart_isr+0xa4>)
    c642:	2201      	movs	r2, #1
    c644:	701a      	strb	r2, [r3, #0]
    }
  }
}
    c646:	bf00      	nop
    c648:	b009      	add	sp, #36	; 0x24
    c64a:	f85d fb04 	ldr.w	pc, [sp], #4
    c64e:	bf00      	nop
    c650:	10003204 	.word	0x10003204
    c654:	100031f8 	.word	0x100031f8
    c658:	100029f8 	.word	0x100029f8
    c65c:	100031fc 	.word	0x100031fc

0000c660 <main>:
// Main
//
//*****************************************************************************
int
main(void)
{
    c660:	b530      	push	{r4, r5, lr}
    c662:	b095      	sub	sp, #84	; 0x54
    uint32_t ui32IntStatus;

    //
    // Default setup.
    //
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    c664:	2100      	movs	r1, #0
    c666:	2000      	movs	r0, #0
    c668:	f002 fd32 	bl	f0d0 <am_hal_clkgen_control>
    am_bsp_low_power_init();
    c66c:	f001 faa6 	bl	dbbc <am_bsp_low_power_init>
    am_hal_gpio_pinconfig(BLE_DEBUG_TRACE_08, g_AM_HAL_GPIO_OUTPUT);
#else  // !AM_DEBUG_BLE_TIMING
    //
    // Enable the ITM
    //
    am_bsp_itm_printf_enable();
    c670:	f001 fac4 	bl	dbfc <am_bsp_itm_printf_enable>
    am_util_stdio_printf("Apollo3 UART to SPI Bridge\n");
    c674:	487e      	ldr	r0, [pc, #504]	; (c870 <main+0x210>)
    c676:	f001 fa49 	bl	db0c <am_util_stdio_printf>
#endif // AM_DEBUG_BLE_TIMING

    //
    // Start the BLE interface.
    //
    am_hal_ble_initialize(0, &g_pvBLEHandle);
    c67a:	497e      	ldr	r1, [pc, #504]	; (c874 <main+0x214>)
    c67c:	2000      	movs	r0, #0
    c67e:	f001 fd6d 	bl	e15c <am_hal_ble_initialize>
    am_hal_ble_power_control(g_pvBLEHandle, AM_HAL_BLE_POWER_ACTIVE);
    c682:	4b7c      	ldr	r3, [pc, #496]	; (c874 <main+0x214>)
    c684:	681b      	ldr	r3, [r3, #0]
    c686:	2100      	movs	r1, #0
    c688:	4618      	mov	r0, r3
    c68a:	f001 fe29 	bl	e2e0 <am_hal_ble_power_control>
    am_hal_ble_config(g_pvBLEHandle, &am_hal_ble_default_config);
    c68e:	4b79      	ldr	r3, [pc, #484]	; (c874 <main+0x214>)
    c690:	681b      	ldr	r3, [r3, #0]
    c692:	4979      	ldr	r1, [pc, #484]	; (c878 <main+0x218>)
    c694:	4618      	mov	r0, r3
    c696:	f001 fd97 	bl	e1c8 <am_hal_ble_config>

    /*delay 1s for 32768Hz clock stability*/
    am_util_delay_ms(1000);
    c69a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    c69e:	f000 fb0b 	bl	ccb8 <am_util_delay_ms>


#if (AM_PART_APOLLO3)
    if (APOLLO3_A0 || APOLLO3_A1)  //for B0 chip, don't load copy patch
    c6a2:	4b76      	ldr	r3, [pc, #472]	; (c87c <main+0x21c>)
    c6a4:	68db      	ldr	r3, [r3, #12]
    c6a6:	b2db      	uxtb	r3, r3
    c6a8:	2b11      	cmp	r3, #17
    c6aa:	d004      	beq.n	c6b6 <main+0x56>
    c6ac:	4b73      	ldr	r3, [pc, #460]	; (c87c <main+0x21c>)
    c6ae:	68db      	ldr	r3, [r3, #12]
    c6b0:	b2db      	uxtb	r3, r3
    c6b2:	2b12      	cmp	r3, #18
    c6b4:	d104      	bne.n	c6c0 <main+0x60>
    {
        am_hal_ble_default_copy_patch_apply(g_pvBLEHandle);
    c6b6:	4b6f      	ldr	r3, [pc, #444]	; (c874 <main+0x214>)
    c6b8:	681b      	ldr	r3, [r3, #0]
    c6ba:	4618      	mov	r0, r3
    c6bc:	f002 f8ea 	bl	e894 <am_hal_ble_default_copy_patch_apply>
    }
#endif


    am_hal_ble_default_trim_set_ramcode(g_pvBLEHandle);
    c6c0:	4b6c      	ldr	r3, [pc, #432]	; (c874 <main+0x214>)
    c6c2:	681b      	ldr	r3, [r3, #0]
    c6c4:	4618      	mov	r0, r3
    c6c6:	f002 f955 	bl	e974 <am_hal_ble_default_trim_set_ramcode>
    am_hal_ble_default_patch_apply(g_pvBLEHandle);
    c6ca:	4b6a      	ldr	r3, [pc, #424]	; (c874 <main+0x214>)
    c6cc:	681b      	ldr	r3, [r3, #0]
    c6ce:	4618      	mov	r0, r3
    c6d0:	f002 f90a 	bl	e8e8 <am_hal_ble_default_patch_apply>
    am_hal_ble_patch_complete(g_pvBLEHandle);
    c6d4:	4b67      	ldr	r3, [pc, #412]	; (c874 <main+0x214>)
    c6d6:	681b      	ldr	r3, [r3, #0]
    c6d8:	4618      	mov	r0, r3
    c6da:	f002 fc77 	bl	efcc <am_hal_ble_patch_complete>

    //
    // Setting the TX power to the highest power value.
    //
    am_hal_ble_tx_power_set(g_pvBLEHandle, 0xf);
    c6de:	4b65      	ldr	r3, [pc, #404]	; (c874 <main+0x214>)
    c6e0:	681b      	ldr	r3, [r3, #0]
    c6e2:	210f      	movs	r1, #15
    c6e4:	4618      	mov	r0, r3
    c6e6:	f002 fcad 	bl	f044 <am_hal_ble_tx_power_set>

    am_hal_ble_int_clear(g_pvBLEHandle, BLEIF_INTSTAT_BLECIRQ_Msk);
    c6ea:	4b62      	ldr	r3, [pc, #392]	; (c874 <main+0x214>)
    c6ec:	681b      	ldr	r3, [r3, #0]
    c6ee:	2180      	movs	r1, #128	; 0x80
    c6f0:	4618      	mov	r0, r3
    c6f2:	f002 f9f7 	bl	eae4 <am_hal_ble_int_clear>

    //
    // Start the UART.
    //
    am_hal_uart_config_t sUartConfig =
    c6f6:	4b62      	ldr	r3, [pc, #392]	; (c880 <main+0x220>)
    c6f8:	ac06      	add	r4, sp, #24
    c6fa:	461d      	mov	r5, r3
    c6fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    c6fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    c700:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    c702:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    c704:	e895 0003 	ldmia.w	r5, {r0, r1}
    c708:	e884 0003 	stmia.w	r4, {r0, r1}
        .ui32TxBufferSize = sizeof(g_pui8UARTTXBuffer),
        .pui8RxBuffer = 0,
        .ui32RxBufferSize = 0,
    };

    am_hal_uart_initialize(UART_HCI_BRIDGE, &g_pvUART);
    c70c:	495d      	ldr	r1, [pc, #372]	; (c884 <main+0x224>)
    c70e:	2000      	movs	r0, #0
    c710:	f003 f9d4 	bl	fabc <am_hal_uart_initialize>
    am_hal_uart_power_control(g_pvUART, AM_HAL_SYSCTRL_WAKE, false);
    c714:	4b5b      	ldr	r3, [pc, #364]	; (c884 <main+0x224>)
    c716:	681b      	ldr	r3, [r3, #0]
    c718:	2200      	movs	r2, #0
    c71a:	2100      	movs	r1, #0
    c71c:	4618      	mov	r0, r3
    c71e:	f003 f9f5 	bl	fb0c <am_hal_uart_power_control>
    am_hal_uart_configure(g_pvUART, &sUartConfig);
    c722:	4b58      	ldr	r3, [pc, #352]	; (c884 <main+0x224>)
    c724:	681b      	ldr	r3, [r3, #0]
    c726:	aa06      	add	r2, sp, #24
    c728:	4611      	mov	r1, r2
    c72a:	4618      	mov	r0, r3
    c72c:	f003 fa66 	bl	fbfc <am_hal_uart_configure>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_COM_UART_TX, g_AM_BSP_GPIO_COM_UART_TX);
    c730:	4b55      	ldr	r3, [pc, #340]	; (c888 <main+0x228>)
    c732:	6819      	ldr	r1, [r3, #0]
    c734:	2016      	movs	r0, #22
    c736:	f002 fdd5 	bl	f2e4 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_COM_UART_RX, g_AM_BSP_GPIO_COM_UART_RX);
    c73a:	4b54      	ldr	r3, [pc, #336]	; (c88c <main+0x22c>)
    c73c:	6819      	ldr	r1, [r3, #0]
    c73e:	2017      	movs	r0, #23
    c740:	f002 fdd0 	bl	f2e4 <am_hal_gpio_pinconfig>

    //
    // Make sure to enable the interrupts for RX, since the HAL doesn't already
    // know we intend to use them.
    //
    NVIC_EnableIRQ((IRQn_Type)(UART0_IRQn + UART_HCI_BRIDGE));
    c744:	200f      	movs	r0, #15
    c746:	f7ff fdc5 	bl	c2d4 <__NVIC_EnableIRQ>
    am_hal_uart_interrupt_enable(g_pvUART, (AM_HAL_UART_INT_RX |
    c74a:	4b4e      	ldr	r3, [pc, #312]	; (c884 <main+0x224>)
    c74c:	681b      	ldr	r3, [r3, #0]
    c74e:	2150      	movs	r1, #80	; 0x50
    c750:	4618      	mov	r0, r3
    c752:	f003 fded 	bl	10330 <am_hal_uart_interrupt_enable>
                                 AM_HAL_UART_INT_RX_TMOUT));

    am_hal_interrupt_master_enable();
    c756:	f002 ff3f 	bl	f5d8 <am_hal_interrupt_master_enable>
    while (1)
    {
        //
        // Check for incoming traffic from either the UART or the BLE interface.
        //
        ui32IntStatus = am_hal_ble_int_status(g_pvBLEHandle, false);
    c75a:	4b46      	ldr	r3, [pc, #280]	; (c874 <main+0x214>)
    c75c:	681b      	ldr	r3, [r3, #0]
    c75e:	2100      	movs	r1, #0
    c760:	4618      	mov	r0, r3
    c762:	f002 f9b1 	bl	eac8 <am_hal_ble_int_status>
    c766:	9012      	str	r0, [sp, #72]	; 0x48
        am_hal_ble_int_clear(g_pvBLEHandle, ui32IntStatus);
    c768:	4b42      	ldr	r3, [pc, #264]	; (c874 <main+0x214>)
    c76a:	681b      	ldr	r3, [r3, #0]
    c76c:	9912      	ldr	r1, [sp, #72]	; 0x48
    c76e:	4618      	mov	r0, r3
    c770:	f002 f9b8 	bl	eae4 <am_hal_ble_int_clear>

        if ( ui32IntStatus & BLEIF_INTSTAT_BLECIRQ_Msk )
    c774:	9b12      	ldr	r3, [sp, #72]	; 0x48
    c776:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c77a:	2b00      	cmp	r3, #0
    c77c:	d031      	beq.n	c7e2 <main+0x182>
        {
            //
            // If we have incoming BLE traffic, read it into a buffer.
            //
            ui32Status = am_hal_ble_blocking_hci_read(g_pvBLEHandle,
    c77e:	4b3d      	ldr	r3, [pc, #244]	; (c874 <main+0x214>)
    c780:	681b      	ldr	r3, [r3, #0]
    c782:	aa10      	add	r2, sp, #64	; 0x40
    c784:	4942      	ldr	r1, [pc, #264]	; (c890 <main+0x230>)
    c786:	4618      	mov	r0, r3
    c788:	f002 f946 	bl	ea18 <am_hal_ble_blocking_hci_read>
    c78c:	9011      	str	r0, [sp, #68]	; 0x44
                                                      &ui32NumChars);

            //
            // Clocking workaround for the BLE IRQ signal.
            //
            BLEIF->BLEDBG_b.IOCLKON = 1;
    c78e:	4a41      	ldr	r2, [pc, #260]	; (c894 <main+0x234>)
    c790:	f8d2 3410 	ldr.w	r3, [r2, #1040]	; 0x410
    c794:	f043 0302 	orr.w	r3, r3, #2
    c798:	f8c2 3410 	str.w	r3, [r2, #1040]	; 0x410

            //
            // If the read was successful, echo it back out over the UART.
            //
            if ( ui32Status == AM_HAL_STATUS_SUCCESS )
    c79c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c79e:	2b00      	cmp	r3, #0
    c7a0:	d11b      	bne.n	c7da <main+0x17a>
            {
                if (ui32NumChars > 0)
    c7a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c7a4:	2b00      	cmp	r3, #0
    c7a6:	d0d8      	beq.n	c75a <main+0xfa>
                {
                    am_hal_uart_transfer_t sWrite =
    c7a8:	2300      	movs	r3, #0
    c7aa:	9301      	str	r3, [sp, #4]
    c7ac:	4b38      	ldr	r3, [pc, #224]	; (c890 <main+0x230>)
    c7ae:	9302      	str	r3, [sp, #8]
    c7b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c7b2:	9303      	str	r3, [sp, #12]
    c7b4:	f04f 33ff 	mov.w	r3, #4294967295
    c7b8:	9304      	str	r3, [sp, #16]
    c7ba:	2300      	movs	r3, #0
    c7bc:	9305      	str	r3, [sp, #20]
                        .ui32TimeoutMs = AM_HAL_UART_WAIT_FOREVER,
                        .pui32BytesTransferred = 0,
                    };

                    //please enable here for transmission mode set
                    fix_trans_mode(g_psReadData.bytes);
    c7be:	4834      	ldr	r0, [pc, #208]	; (c890 <main+0x230>)
    c7c0:	f7ff fec8 	bl	c554 <fix_trans_mode>

                    //then send the response to UART
                    am_hal_uart_transfer(g_pvUART, &sWrite);
    c7c4:	4b2f      	ldr	r3, [pc, #188]	; (c884 <main+0x224>)
    c7c6:	681b      	ldr	r3, [r3, #0]
    c7c8:	aa01      	add	r2, sp, #4
    c7ca:	4611      	mov	r1, r2
    c7cc:	4618      	mov	r0, r3
    c7ce:	f003 fb13 	bl	fdf8 <am_hal_uart_transfer>
                    am_util_delay_ms(1);
    c7d2:	2001      	movs	r0, #1
    c7d4:	f000 fa70 	bl	ccb8 <am_util_delay_ms>
    c7d8:	e7bf      	b.n	c75a <main+0xfa>
            else
            {
                //
                // Handle the error here.
                //
                am_util_stdio_printf("Read from BLE Controller failed\n");
    c7da:	482f      	ldr	r0, [pc, #188]	; (c898 <main+0x238>)
    c7dc:	f001 f996 	bl	db0c <am_util_stdio_printf>
                while(1);
    c7e0:	e7fe      	b.n	c7e0 <main+0x180>
            }
        }
        else if (g_bRxTimeoutFlag)
    c7e2:	4b2e      	ldr	r3, [pc, #184]	; (c89c <main+0x23c>)
    c7e4:	781b      	ldrb	r3, [r3, #0]
    c7e6:	b2db      	uxtb	r3, r3
    c7e8:	2b00      	cmp	r3, #0
    c7ea:	d0b6      	beq.n	c75a <main+0xfa>
            //
            // If we have incoming UART traffic, the interrupt handler will
            // read it out for us, but we will need to echo it back out to the
            // radio manually.
            //
            if (false == g_bCmdProcessedFlag)
    c7ec:	4b2c      	ldr	r3, [pc, #176]	; (c8a0 <main+0x240>)
    c7ee:	781b      	ldrb	r3, [r3, #0]
    c7f0:	b2db      	uxtb	r3, r3
    c7f2:	f083 0301 	eor.w	r3, r3, #1
    c7f6:	b2db      	uxtb	r3, r3
    c7f8:	2b00      	cmp	r3, #0
    c7fa:	d02f      	beq.n	c85c <main+0x1fc>
            {
                am_hal_ble_blocking_hci_write(g_pvBLEHandle, AM_HAL_BLE_RAW,
    c7fc:	4b1d      	ldr	r3, [pc, #116]	; (c874 <main+0x214>)
    c7fe:	6818      	ldr	r0, [r3, #0]
    c800:	4b28      	ldr	r3, [pc, #160]	; (c8a4 <main+0x244>)
    c802:	681b      	ldr	r3, [r3, #0]
    c804:	4a28      	ldr	r2, [pc, #160]	; (c8a8 <main+0x248>)
    c806:	2100      	movs	r1, #0
    c808:	f002 f8dc 	bl	e9c4 <am_hal_ble_blocking_hci_write>
                                              g_psWriteData.words,
                                              g_ui32UARTRxIndex);

                //am_util_stdio_printf("\r\nWaiting response...");
                uint32_t wakeupCount = 0;
    c80c:	2300      	movs	r3, #0
    c80e:	9313      	str	r3, [sp, #76]	; 0x4c

                 while( !BLEIF->BSTATUS_b.BLEIRQ )
    c810:	e01c      	b.n	c84c <main+0x1ec>
                  {

                     am_util_delay_ms(5);
    c812:	2005      	movs	r0, #5
    c814:	f000 fa50 	bl	ccb8 <am_util_delay_ms>
                     am_hal_ble_wakeup_set(g_pvBLEHandle, 1);
    c818:	4b16      	ldr	r3, [pc, #88]	; (c874 <main+0x214>)
    c81a:	681b      	ldr	r3, [r3, #0]
    c81c:	2101      	movs	r1, #1
    c81e:	4618      	mov	r0, r3
    c820:	f001 fc7a 	bl	e118 <am_hal_ble_wakeup_set>
                     am_util_delay_ms(5);
    c824:	2005      	movs	r0, #5
    c826:	f000 fa47 	bl	ccb8 <am_util_delay_ms>
                     am_hal_ble_wakeup_set(g_pvBLEHandle, 0);
    c82a:	4b12      	ldr	r3, [pc, #72]	; (c874 <main+0x214>)
    c82c:	681b      	ldr	r3, [r3, #0]
    c82e:	2100      	movs	r1, #0
    c830:	4618      	mov	r0, r3
    c832:	f001 fc71 	bl	e118 <am_hal_ble_wakeup_set>
                     if (wakeupCount++ >1000)
    c836:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    c838:	1c5a      	adds	r2, r3, #1
    c83a:	9213      	str	r2, [sp, #76]	; 0x4c
    c83c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    c840:	d904      	bls.n	c84c <main+0x1ec>
                     {
                        am_util_stdio_printf("\r\n BLE controller response timeout! wakeupCount=%d,", wakeupCount);
    c842:	9913      	ldr	r1, [sp, #76]	; 0x4c
    c844:	4819      	ldr	r0, [pc, #100]	; (c8ac <main+0x24c>)
    c846:	f001 f961 	bl	db0c <am_util_stdio_printf>
                        while(1);
    c84a:	e7fe      	b.n	c84a <main+0x1ea>
                 while( !BLEIF->BSTATUS_b.BLEIRQ )
    c84c:	4b11      	ldr	r3, [pc, #68]	; (c894 <main+0x234>)
    c84e:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
    c852:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    c856:	b2db      	uxtb	r3, r3
    c858:	2b00      	cmp	r3, #0
    c85a:	d0da      	beq.n	c812 <main+0x1b2>



            }

            g_ui32UARTRxIndex = 0;
    c85c:	4b11      	ldr	r3, [pc, #68]	; (c8a4 <main+0x244>)
    c85e:	2200      	movs	r2, #0
    c860:	601a      	str	r2, [r3, #0]
            g_bRxTimeoutFlag = false;
    c862:	4b0e      	ldr	r3, [pc, #56]	; (c89c <main+0x23c>)
    c864:	2200      	movs	r2, #0
    c866:	701a      	strb	r2, [r3, #0]
            NVIC_EnableIRQ((IRQn_Type)(UART0_IRQn + UART_HCI_BRIDGE));
    c868:	200f      	movs	r0, #15
    c86a:	f7ff fd33 	bl	c2d4 <__NVIC_EnableIRQ>
        ui32IntStatus = am_hal_ble_int_status(g_pvBLEHandle, false);
    c86e:	e774      	b.n	c75a <main+0xfa>
    c870:	000108ac 	.word	0x000108ac
    c874:	10003200 	.word	0x10003200
    c878:	00010958 	.word	0x00010958
    c87c:	40020000 	.word	0x40020000
    c880:	00010920 	.word	0x00010920
    c884:	10003204 	.word	0x10003204
    c888:	00010950 	.word	0x00010950
    c88c:	0001094c 	.word	0x0001094c
    c890:	10002df8 	.word	0x10002df8
    c894:	5000c000 	.word	0x5000c000
    c898:	000108c8 	.word	0x000108c8
    c89c:	100031fc 	.word	0x100031fc
    c8a0:	100031fd 	.word	0x100031fd
    c8a4:	100031f8 	.word	0x100031f8
    c8a8:	100029f8 	.word	0x100029f8
    c8ac:	000108ec 	.word	0x000108ec

0000c8b0 <am_util_ble_set_constant_transmission>:
// In DTM mode, set TX to constant trans mode for SRRC/FCC/CE
//set enable as 'true' to constant trans mode, 'false' back to normal
//*****************************************************************************
uint32_t
am_util_ble_set_constant_transmission(void *pHandle, bool enable)
{
    c8b0:	b500      	push	{lr}
    c8b2:	b085      	sub	sp, #20
    c8b4:	9001      	str	r0, [sp, #4]
    c8b6:	460b      	mov	r3, r1
    c8b8:	f88d 3003 	strb.w	r3, [sp, #3]
    am_hal_ble_state_t *pBLE = pHandle;
    c8bc:	9b01      	ldr	r3, [sp, #4]
    c8be:	9303      	str	r3, [sp, #12]

    am_hal_ble_sleep_set(pBLE, false);
    c8c0:	2100      	movs	r1, #0
    c8c2:	9803      	ldr	r0, [sp, #12]
    c8c4:	f002 fb90 	bl	efe8 <am_hal_ble_sleep_set>
    am_hal_ble_plf_reg_write(pBLE, 0x43000004, 0xFFFFFFFF);
    c8c8:	f04f 32ff 	mov.w	r2, #4294967295
    c8cc:	490c      	ldr	r1, [pc, #48]	; (c900 <am_util_ble_set_constant_transmission+0x50>)
    c8ce:	9803      	ldr	r0, [sp, #12]
    c8d0:	f002 f98e 	bl	ebf0 <am_hal_ble_plf_reg_write>
    if ( enable )
    c8d4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c8d8:	2b00      	cmp	r3, #0
    c8da:	d006      	beq.n	c8ea <am_util_ble_set_constant_transmission+0x3a>
    {
        am_hal_ble_plf_reg_write(pBLE, 0x508000E0, 0x00008000);
    c8dc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    c8e0:	4908      	ldr	r1, [pc, #32]	; (c904 <am_util_ble_set_constant_transmission+0x54>)
    c8e2:	9803      	ldr	r0, [sp, #12]
    c8e4:	f002 f984 	bl	ebf0 <am_hal_ble_plf_reg_write>
    c8e8:	e004      	b.n	c8f4 <am_util_ble_set_constant_transmission+0x44>
    }
    else
    {
        am_hal_ble_plf_reg_write(pBLE, 0x508000E0, 0x00000000);
    c8ea:	2200      	movs	r2, #0
    c8ec:	4905      	ldr	r1, [pc, #20]	; (c904 <am_util_ble_set_constant_transmission+0x54>)
    c8ee:	9803      	ldr	r0, [sp, #12]
    c8f0:	f002 f97e 	bl	ebf0 <am_hal_ble_plf_reg_write>
    }

    return AM_HAL_STATUS_SUCCESS;
    c8f4:	2300      	movs	r3, #0
}
    c8f6:	4618      	mov	r0, r3
    c8f8:	b005      	add	sp, #20
    c8fa:	f85d fb04 	ldr.w	pc, [sp], #4
    c8fe:	bf00      	nop
    c900:	43000004 	.word	0x43000004
    c904:	508000e0 	.word	0x508000e0

0000c908 <am_util_ble_transmitter_control>:
// set ui8TxCtrl as 1 to manually enable transmitter, 0 back to default
//
//*****************************************************************************
uint32_t
am_util_ble_transmitter_control(void *pHandle, uint8_t ui8TxCtrl)
{
    c908:	b500      	push	{lr}
    c90a:	b085      	sub	sp, #20
    c90c:	9001      	str	r0, [sp, #4]
    c90e:	460b      	mov	r3, r1
    c910:	f88d 3003 	strb.w	r3, [sp, #3]
    am_hal_ble_state_t *pBLE = pHandle;
    c914:	9b01      	ldr	r3, [sp, #4]
    c916:	9302      	str	r3, [sp, #8]
    uint32_t RegValueTRX;

    am_hal_ble_sleep_set(pBLE, false);
    c918:	2100      	movs	r1, #0
    c91a:	9802      	ldr	r0, [sp, #8]
    c91c:	f002 fb64 	bl	efe8 <am_hal_ble_sleep_set>
    if (ui8TxCtrl)
    c920:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c924:	2b00      	cmp	r3, #0
    c926:	d002      	beq.n	c92e <am_util_ble_transmitter_control+0x26>
    {
        RegValueTRX = 0x2000A;
    c928:	4b0a      	ldr	r3, [pc, #40]	; (c954 <am_util_ble_transmitter_control+0x4c>)
    c92a:	9303      	str	r3, [sp, #12]
    c92c:	e001      	b.n	c932 <am_util_ble_transmitter_control+0x2a>
    }
    else
    {
        RegValueTRX = 0x8;
    c92e:	2308      	movs	r3, #8
    c930:	9303      	str	r3, [sp, #12]
    }

    //
    // Unlock the BLE registers.
    //
    am_hal_ble_plf_reg_write(pBLE, 0x43000004, 0xFFFFFFFF);
    c932:	f04f 32ff 	mov.w	r2, #4294967295
    c936:	4908      	ldr	r1, [pc, #32]	; (c958 <am_util_ble_transmitter_control+0x50>)
    c938:	9802      	ldr	r0, [sp, #8]
    c93a:	f002 f959 	bl	ebf0 <am_hal_ble_plf_reg_write>
    am_hal_ble_plf_reg_write(pBLE, 0x52400000, RegValueTRX);
    c93e:	9a03      	ldr	r2, [sp, #12]
    c940:	4906      	ldr	r1, [pc, #24]	; (c95c <am_util_ble_transmitter_control+0x54>)
    c942:	9802      	ldr	r0, [sp, #8]
    c944:	f002 f954 	bl	ebf0 <am_hal_ble_plf_reg_write>

    return AM_HAL_STATUS_SUCCESS;
    c948:	2300      	movs	r3, #0
}
    c94a:	4618      	mov	r0, r3
    c94c:	b005      	add	sp, #20
    c94e:	f85d fb04 	ldr.w	pc, [sp], #4
    c952:	bf00      	nop
    c954:	0002000a 	.word	0x0002000a
    c958:	43000004 	.word	0x43000004
    c95c:	52400000 	.word	0x52400000

0000c960 <am_util_ble_init_rf_channel>:
//
//*****************************************************************************

uint32_t
am_util_ble_init_rf_channel(void *pHandle)
{
    c960:	b500      	push	{lr}
    c962:	b08f      	sub	sp, #60	; 0x3c
    c964:	9001      	str	r0, [sp, #4]
    if (!APOLLO3_GE_B0)
    c966:	4b3c      	ldr	r3, [pc, #240]	; (ca58 <am_util_ble_init_rf_channel+0xf8>)
    c968:	68db      	ldr	r3, [r3, #12]
    c96a:	b2db      	uxtb	r3, r3
    c96c:	2b20      	cmp	r3, #32
    c96e:	d86e      	bhi.n	ca4e <am_util_ble_init_rf_channel+0xee>
    {
        am_hal_ble_buffer(16) sWriteCommand;
        am_hal_ble_buffer(16) sResponse;
        am_hal_ble_state_t *pBLE = pHandle;
    c970:	9b01      	ldr	r3, [sp, #4]
    c972:	930d      	str	r3, [sp, #52]	; 0x34
        uint32_t ui32IntEnable;

        uint32_t ui32Module = pBLE->ui32Module;
    c974:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c976:	685b      	ldr	r3, [r3, #4]
    c978:	930c      	str	r3, [sp, #48]	; 0x30
        am_hal_ble_sleep_set(pBLE, false);
    c97a:	2100      	movs	r1, #0
    c97c:	980d      	ldr	r0, [sp, #52]	; 0x34
    c97e:	f002 fb33 	bl	efe8 <am_hal_ble_sleep_set>

        //issue the HCI command with to init for the channel 1
        sWriteCommand.bytes[0] = 0x01;
    c982:	2301      	movs	r3, #1
    c984:	f88d 301c 	strb.w	r3, [sp, #28]
        sWriteCommand.bytes[1] = 0x1d;
    c988:	231d      	movs	r3, #29
    c98a:	f88d 301d 	strb.w	r3, [sp, #29]
        sWriteCommand.bytes[2] = 0x20;
    c98e:	2320      	movs	r3, #32
    c990:	f88d 301e 	strb.w	r3, [sp, #30]
        sWriteCommand.bytes[3] = 0x01;
    c994:	2301      	movs	r3, #1
    c996:	f88d 301f 	strb.w	r3, [sp, #31]
        sWriteCommand.bytes[4] = 0x00;
    c99a:	2300      	movs	r3, #0
    c99c:	f88d 3020 	strb.w	r3, [sp, #32]

        //
        // Temporarily disable BLE interrupts.
        //
        ui32IntEnable = BLEIFn(ui32Module)->INTEN;
    c9a0:	4b2e      	ldr	r3, [pc, #184]	; (ca5c <am_util_ble_init_rf_channel+0xfc>)
    c9a2:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
    c9a6:	930b      	str	r3, [sp, #44]	; 0x2c
        BLEIFn(ui32Module)->INTEN = 0;
    c9a8:	4b2c      	ldr	r3, [pc, #176]	; (ca5c <am_util_ble_init_rf_channel+0xfc>)
    c9aa:	2200      	movs	r2, #0
    c9ac:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220

        // reserved packet_payload
        am_hal_ble_blocking_hci_write(pBLE,
    c9b0:	aa07      	add	r2, sp, #28
    c9b2:	2305      	movs	r3, #5
    c9b4:	2100      	movs	r1, #0
    c9b6:	980d      	ldr	r0, [sp, #52]	; 0x34
    c9b8:	f002 f804 	bl	e9c4 <am_hal_ble_blocking_hci_write>
                                      AM_HAL_BLE_RAW,
                                      sWriteCommand.words,
                                      5);
        BLEIFn(ui32Module)->BLEDBG_b.IOCLKON = 1;
    c9bc:	4a27      	ldr	r2, [pc, #156]	; (ca5c <am_util_ble_init_rf_channel+0xfc>)
    c9be:	f8d2 3410 	ldr.w	r3, [r2, #1040]	; 0x410
    c9c2:	f043 0302 	orr.w	r3, r3, #2
    c9c6:	f8c2 3410 	str.w	r3, [r2, #1040]	; 0x410

        //
        // Wait for the response.
        //
        while ( BLEIFn(ui32Module)->BSTATUS_b.BLEIRQ == 0 );
    c9ca:	bf00      	nop
    c9cc:	4b23      	ldr	r3, [pc, #140]	; (ca5c <am_util_ble_init_rf_channel+0xfc>)
    c9ce:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
    c9d2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    c9d6:	b2db      	uxtb	r3, r3
    c9d8:	2b00      	cmp	r3, #0
    c9da:	d0f7      	beq.n	c9cc <am_util_ble_init_rf_channel+0x6c>
        am_hal_ble_blocking_hci_read(pBLE, sResponse.words, 0);
    c9dc:	ab03      	add	r3, sp, #12
    c9de:	2200      	movs	r2, #0
    c9e0:	4619      	mov	r1, r3
    c9e2:	980d      	ldr	r0, [sp, #52]	; 0x34
    c9e4:	f002 f818 	bl	ea18 <am_hal_ble_blocking_hci_read>

        am_util_delay_ms(10);
    c9e8:	200a      	movs	r0, #10
    c9ea:	f000 f965 	bl	ccb8 <am_util_delay_ms>

        // issue the HCI command with to stop test for the channel 1
        sWriteCommand.bytes[0] = 0x01;
    c9ee:	2301      	movs	r3, #1
    c9f0:	f88d 301c 	strb.w	r3, [sp, #28]
        sWriteCommand.bytes[1] = 0x1f;
    c9f4:	231f      	movs	r3, #31
    c9f6:	f88d 301d 	strb.w	r3, [sp, #29]
        sWriteCommand.bytes[2] = 0x20;
    c9fa:	2320      	movs	r3, #32
    c9fc:	f88d 301e 	strb.w	r3, [sp, #30]
        sWriteCommand.bytes[3] = 0x00;
    ca00:	2300      	movs	r3, #0
    ca02:	f88d 301f 	strb.w	r3, [sp, #31]
        // reserved packet_payload
        am_hal_ble_blocking_hci_write(pBLE,
    ca06:	aa07      	add	r2, sp, #28
    ca08:	2304      	movs	r3, #4
    ca0a:	2100      	movs	r1, #0
    ca0c:	980d      	ldr	r0, [sp, #52]	; 0x34
    ca0e:	f001 ffd9 	bl	e9c4 <am_hal_ble_blocking_hci_write>
                                      AM_HAL_BLE_RAW,
                                      sWriteCommand.words,
                                      4);
        BLEIFn(ui32Module)->BLEDBG_b.IOCLKON = 1;
    ca12:	4a12      	ldr	r2, [pc, #72]	; (ca5c <am_util_ble_init_rf_channel+0xfc>)
    ca14:	f8d2 3410 	ldr.w	r3, [r2, #1040]	; 0x410
    ca18:	f043 0302 	orr.w	r3, r3, #2
    ca1c:	f8c2 3410 	str.w	r3, [r2, #1040]	; 0x410

        //
        // Wait for the response.
        //
        while ( BLEIFn(ui32Module)->BSTATUS_b.BLEIRQ == 0 );
    ca20:	bf00      	nop
    ca22:	4b0e      	ldr	r3, [pc, #56]	; (ca5c <am_util_ble_init_rf_channel+0xfc>)
    ca24:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
    ca28:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    ca2c:	b2db      	uxtb	r3, r3
    ca2e:	2b00      	cmp	r3, #0
    ca30:	d0f7      	beq.n	ca22 <am_util_ble_init_rf_channel+0xc2>

        am_hal_ble_blocking_hci_read(pBLE, sResponse.words, 0);
    ca32:	ab03      	add	r3, sp, #12
    ca34:	2200      	movs	r2, #0
    ca36:	4619      	mov	r1, r3
    ca38:	980d      	ldr	r0, [sp, #52]	; 0x34
    ca3a:	f001 ffed 	bl	ea18 <am_hal_ble_blocking_hci_read>

        //
        // Re-enable BLE interrupts.
        //
        BLEIFn(ui32Module)->INTCLR = ui32IntEnable;
    ca3e:	4a07      	ldr	r2, [pc, #28]	; (ca5c <am_util_ble_init_rf_channel+0xfc>)
    ca40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ca42:	f8c2 3228 	str.w	r3, [r2, #552]	; 0x228
        BLEIFn(ui32Module)->INTEN = ui32IntEnable;
    ca46:	4a05      	ldr	r2, [pc, #20]	; (ca5c <am_util_ble_init_rf_channel+0xfc>)
    ca48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ca4a:	f8c2 3220 	str.w	r3, [r2, #544]	; 0x220
    }

    return AM_HAL_STATUS_SUCCESS;
    ca4e:	2300      	movs	r3, #0
}
    ca50:	4618      	mov	r0, r3
    ca52:	b00f      	add	sp, #60	; 0x3c
    ca54:	f85d fb04 	ldr.w	pc, [sp], #4
    ca58:	40020000 	.word	0x40020000
    ca5c:	5000c000 	.word	0x5000c000

0000ca60 <am_util_ble_crystal_trim_set>:
// set trim value smaller in case of negative frequency offset
// ui32TrimValue: default is 0x400
//*****************************************************************************
uint32_t
am_util_ble_crystal_trim_set(void *pHandle, uint32_t ui32TrimValue)
{
    ca60:	b500      	push	{lr}
    ca62:	b085      	sub	sp, #20
    ca64:	9001      	str	r0, [sp, #4]
    ca66:	9100      	str	r1, [sp, #0]
    am_hal_ble_state_t *pBLE = pHandle;
    ca68:	9b01      	ldr	r3, [sp, #4]
    ca6a:	9303      	str	r3, [sp, #12]
    uint32_t RegValueMCGR;

    ui32TrimValue &= 0x7FF;
    ca6c:	9b00      	ldr	r3, [sp, #0]
    ca6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
    ca72:	9300      	str	r3, [sp, #0]

    am_hal_ble_plf_reg_read(pBLE, 0x43000004, &RegValueMCGR);
    ca74:	ab02      	add	r3, sp, #8
    ca76:	461a      	mov	r2, r3
    ca78:	490c      	ldr	r1, [pc, #48]	; (caac <am_util_ble_crystal_trim_set+0x4c>)
    ca7a:	9803      	ldr	r0, [sp, #12]
    ca7c:	f002 f844 	bl	eb08 <am_hal_ble_plf_reg_read>
    //
    // Unlock the BLE registers.
    //
    am_hal_ble_plf_reg_write(pBLE, 0x43000004, 0xFFFFFFFF);
    ca80:	f04f 32ff 	mov.w	r2, #4294967295
    ca84:	4909      	ldr	r1, [pc, #36]	; (caac <am_util_ble_crystal_trim_set+0x4c>)
    ca86:	9803      	ldr	r0, [sp, #12]
    ca88:	f002 f8b2 	bl	ebf0 <am_hal_ble_plf_reg_write>
    am_hal_ble_plf_reg_write(pBLE, 0x43800004, ui32TrimValue);
    ca8c:	9a00      	ldr	r2, [sp, #0]
    ca8e:	4908      	ldr	r1, [pc, #32]	; (cab0 <am_util_ble_crystal_trim_set+0x50>)
    ca90:	9803      	ldr	r0, [sp, #12]
    ca92:	f002 f8ad 	bl	ebf0 <am_hal_ble_plf_reg_write>
    am_hal_ble_plf_reg_write(pBLE, 0x43000004, RegValueMCGR);
    ca96:	9b02      	ldr	r3, [sp, #8]
    ca98:	461a      	mov	r2, r3
    ca9a:	4904      	ldr	r1, [pc, #16]	; (caac <am_util_ble_crystal_trim_set+0x4c>)
    ca9c:	9803      	ldr	r0, [sp, #12]
    ca9e:	f002 f8a7 	bl	ebf0 <am_hal_ble_plf_reg_write>

    return AM_HAL_STATUS_SUCCESS;
    caa2:	2300      	movs	r3, #0
}
    caa4:	4618      	mov	r0, r3
    caa6:	b005      	add	sp, #20
    caa8:	f85d fb04 	ldr.w	pc, [sp], #4
    caac:	43000004 	.word	0x43000004
    cab0:	43800004 	.word	0x43800004

0000cab4 <am_util_ble_set_carrier_wave_ex>:
//to directly output carrier wave. change channel ranges from 0 to 0x27.
//
//*****************************************************************************
uint32_t
am_util_ble_set_carrier_wave_ex(void *pHandle, uint8_t channel)
{
    cab4:	b500      	push	{lr}
    cab6:	b08f      	sub	sp, #60	; 0x3c
    cab8:	9001      	str	r0, [sp, #4]
    caba:	460b      	mov	r3, r1
    cabc:	f88d 3003 	strb.w	r3, [sp, #3]
    am_hal_ble_buffer(16) sWriteCommand;
    am_hal_ble_buffer(16) sResponse;
    am_hal_ble_state_t *pBLE = pHandle;
    cac0:	9b01      	ldr	r3, [sp, #4]
    cac2:	930c      	str	r3, [sp, #48]	; 0x30
    uint32_t ui32IntEnable;

    // channel 0xFF to disable the constant transmission
    if ( channel == 0xFF )
    cac4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    cac8:	2bff      	cmp	r3, #255	; 0xff
    caca:	d105      	bne.n	cad8 <am_util_ble_set_carrier_wave_ex+0x24>
    {
        am_util_ble_transmitter_control(pBLE, false);
    cacc:	2100      	movs	r1, #0
    cace:	980c      	ldr	r0, [sp, #48]	; 0x30
    cad0:	f7ff ff1a 	bl	c908 <am_util_ble_transmitter_control>
        return AM_HAL_STATUS_SUCCESS;
    cad4:	2300      	movs	r3, #0
    cad6:	e05f      	b.n	cb98 <am_util_ble_set_carrier_wave_ex+0xe4>
    }

    am_hal_ble_sleep_set(pBLE, false);
    cad8:	2100      	movs	r1, #0
    cada:	980c      	ldr	r0, [sp, #48]	; 0x30
    cadc:	f002 fa84 	bl	efe8 <am_hal_ble_sleep_set>
    uint32_t ui32Module = pBLE->ui32Module;
    cae0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cae2:	685b      	ldr	r3, [r3, #4]
    cae4:	930b      	str	r3, [sp, #44]	; 0x2c

    // issue the HCI command with to TX carrier wave
    sWriteCommand.bytes[0] = 0x01;
    cae6:	2301      	movs	r3, #1
    cae8:	f88d 3018 	strb.w	r3, [sp, #24]
    sWriteCommand.bytes[1] = 0x1E;
    caec:	231e      	movs	r3, #30
    caee:	f88d 3019 	strb.w	r3, [sp, #25]
    sWriteCommand.bytes[2] = 0x20;
    caf2:	2320      	movs	r3, #32
    caf4:	f88d 301a 	strb.w	r3, [sp, #26]
    sWriteCommand.bytes[3] = 0x03;
    caf8:	2303      	movs	r3, #3
    cafa:	f88d 301b 	strb.w	r3, [sp, #27]
    sWriteCommand.bytes[4] = channel;
    cafe:	f89d 3003 	ldrb.w	r3, [sp, #3]
    cb02:	f88d 301c 	strb.w	r3, [sp, #28]
    sWriteCommand.bytes[5] = 0x25;
    cb06:	2325      	movs	r3, #37	; 0x25
    cb08:	f88d 301d 	strb.w	r3, [sp, #29]
    sWriteCommand.bytes[6] = 0x00;
    cb0c:	2300      	movs	r3, #0
    cb0e:	f88d 301e 	strb.w	r3, [sp, #30]

    //
    // Temporarily disable BLE interrupts.
    //
    ui32IntEnable = BLEIFn(ui32Module)->INTEN;
    cb12:	4b23      	ldr	r3, [pc, #140]	; (cba0 <am_util_ble_set_carrier_wave_ex+0xec>)
    cb14:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
    cb18:	930a      	str	r3, [sp, #40]	; 0x28
    BLEIFn(ui32Module)->INTEN = 0;
    cb1a:	4b21      	ldr	r3, [pc, #132]	; (cba0 <am_util_ble_set_carrier_wave_ex+0xec>)
    cb1c:	2200      	movs	r2, #0
    cb1e:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220

    am_hal_ble_blocking_hci_write(pBLE,
    cb22:	aa06      	add	r2, sp, #24
    cb24:	2307      	movs	r3, #7
    cb26:	2100      	movs	r1, #0
    cb28:	980c      	ldr	r0, [sp, #48]	; 0x30
    cb2a:	f001 ff4b 	bl	e9c4 <am_hal_ble_blocking_hci_write>
                                  AM_HAL_BLE_RAW,
                                  sWriteCommand.words,
                                  7);
    BLEIFn(ui32Module)->BLEDBG_b.IOCLKON = 1;
    cb2e:	4a1c      	ldr	r2, [pc, #112]	; (cba0 <am_util_ble_set_carrier_wave_ex+0xec>)
    cb30:	f8d2 3410 	ldr.w	r3, [r2, #1040]	; 0x410
    cb34:	f043 0302 	orr.w	r3, r3, #2
    cb38:	f8c2 3410 	str.w	r3, [r2, #1040]	; 0x410

    //
    // Wait for the response.
    //
    for (uint32_t i = 0; i < 100; i++)
    cb3c:	2300      	movs	r3, #0
    cb3e:	930d      	str	r3, [sp, #52]	; 0x34
    cb40:	e012      	b.n	cb68 <am_util_ble_set_carrier_wave_ex+0xb4>
    {
        if (BLEIFn(ui32Module)->BSTATUS_b.BLEIRQ != 0)
    cb42:	4b17      	ldr	r3, [pc, #92]	; (cba0 <am_util_ble_set_carrier_wave_ex+0xec>)
    cb44:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
    cb48:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    cb4c:	b2db      	uxtb	r3, r3
    cb4e:	2b00      	cmp	r3, #0
    cb50:	d10e      	bne.n	cb70 <am_util_ble_set_carrier_wave_ex+0xbc>
        {
            break;
        }
        else if (i == (100 - 1))
    cb52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cb54:	2b63      	cmp	r3, #99	; 0x63
    cb56:	d101      	bne.n	cb5c <am_util_ble_set_carrier_wave_ex+0xa8>
        {
            return AM_HAL_BLE_NO_HCI_RESPONSE;
    cb58:	4b12      	ldr	r3, [pc, #72]	; (cba4 <am_util_ble_set_carrier_wave_ex+0xf0>)
    cb5a:	e01d      	b.n	cb98 <am_util_ble_set_carrier_wave_ex+0xe4>
        }
        else
        {
            am_util_delay_ms(1);
    cb5c:	2001      	movs	r0, #1
    cb5e:	f000 f8ab 	bl	ccb8 <am_util_delay_ms>
    for (uint32_t i = 0; i < 100; i++)
    cb62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cb64:	3301      	adds	r3, #1
    cb66:	930d      	str	r3, [sp, #52]	; 0x34
    cb68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cb6a:	2b63      	cmp	r3, #99	; 0x63
    cb6c:	d9e9      	bls.n	cb42 <am_util_ble_set_carrier_wave_ex+0x8e>
    cb6e:	e000      	b.n	cb72 <am_util_ble_set_carrier_wave_ex+0xbe>
            break;
    cb70:	bf00      	nop
        }
    }

    am_hal_ble_blocking_hci_read(pBLE, sResponse.words, 0);
    cb72:	ab02      	add	r3, sp, #8
    cb74:	2200      	movs	r2, #0
    cb76:	4619      	mov	r1, r3
    cb78:	980c      	ldr	r0, [sp, #48]	; 0x30
    cb7a:	f001 ff4d 	bl	ea18 <am_hal_ble_blocking_hci_read>

    //
    // Re-enable BLE interrupts.
    //
    BLEIFn(ui32Module)->INTCLR = ui32IntEnable;
    cb7e:	4a08      	ldr	r2, [pc, #32]	; (cba0 <am_util_ble_set_carrier_wave_ex+0xec>)
    cb80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cb82:	f8c2 3228 	str.w	r3, [r2, #552]	; 0x228
    BLEIFn(ui32Module)->INTEN = ui32IntEnable;
    cb86:	4a06      	ldr	r2, [pc, #24]	; (cba0 <am_util_ble_set_carrier_wave_ex+0xec>)
    cb88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cb8a:	f8c2 3220 	str.w	r3, [r2, #544]	; 0x220

    am_util_ble_transmitter_control(pBLE, true);
    cb8e:	2101      	movs	r1, #1
    cb90:	980c      	ldr	r0, [sp, #48]	; 0x30
    cb92:	f7ff feb9 	bl	c908 <am_util_ble_transmitter_control>

    return AM_HAL_STATUS_SUCCESS;
    cb96:	2300      	movs	r3, #0
}
    cb98:	4618      	mov	r0, r3
    cb9a:	b00f      	add	sp, #60	; 0x3c
    cb9c:	f85d fb04 	ldr.w	pc, [sp], #4
    cba0:	5000c000 	.word	0x5000c000
    cba4:	08000004 	.word	0x08000004

0000cba8 <am_util_ble_transmitter_control_ex>:
// set ui8TxChannel as 0 to 0x27 for each transmit channel, 0xFF back to normal modulate mode
//
//*****************************************************************************
uint32_t
am_util_ble_transmitter_control_ex(void *pHandle, uint8_t ui8TxChannel)
{
    cba8:	b500      	push	{lr}
    cbaa:	b083      	sub	sp, #12
    cbac:	9001      	str	r0, [sp, #4]
    cbae:	460b      	mov	r3, r1
    cbb0:	f88d 3003 	strb.w	r3, [sp, #3]
    return am_util_ble_set_carrier_wave_ex(pHandle, ui8TxChannel);
    cbb4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    cbb8:	4619      	mov	r1, r3
    cbba:	9801      	ldr	r0, [sp, #4]
    cbbc:	f7ff ff7a 	bl	cab4 <am_util_ble_set_carrier_wave_ex>
    cbc0:	4603      	mov	r3, r0
}
    cbc2:	4618      	mov	r0, r3
    cbc4:	b003      	add	sp, #12
    cbc6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0000cbcc <am_util_ble_set_constant_transmission_ex>:
//to directly output constant modulation signal. change channel from 0 to 0x27.
//
//*****************************************************************************
uint32_t
am_util_ble_set_constant_transmission_ex(void *pHandle, uint8_t channel)
{
    cbcc:	b500      	push	{lr}
    cbce:	b08f      	sub	sp, #60	; 0x3c
    cbd0:	9001      	str	r0, [sp, #4]
    cbd2:	460b      	mov	r3, r1
    cbd4:	f88d 3003 	strb.w	r3, [sp, #3]
    am_hal_ble_buffer(16) sWriteCommand;
    am_hal_ble_buffer(16) sResponse;
    am_hal_ble_state_t *pBLE = pHandle;
    cbd8:	9b01      	ldr	r3, [sp, #4]
    cbda:	930c      	str	r3, [sp, #48]	; 0x30
    uint32_t ui32IntEnable;

    // channel 0xFF to disable the constant transmission
    if ( channel == 0xFF )
    cbdc:	f89d 3003 	ldrb.w	r3, [sp, #3]
    cbe0:	2bff      	cmp	r3, #255	; 0xff
    cbe2:	d105      	bne.n	cbf0 <am_util_ble_set_constant_transmission_ex+0x24>
    {
        am_util_ble_set_constant_transmission(pBLE, false);
    cbe4:	2100      	movs	r1, #0
    cbe6:	980c      	ldr	r0, [sp, #48]	; 0x30
    cbe8:	f7ff fe62 	bl	c8b0 <am_util_ble_set_constant_transmission>
        return AM_HAL_STATUS_SUCCESS;
    cbec:	2300      	movs	r3, #0
    cbee:	e05b      	b.n	cca8 <am_util_ble_set_constant_transmission_ex+0xdc>
    }

    uint32_t ui32Module = pBLE->ui32Module;
    cbf0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cbf2:	685b      	ldr	r3, [r3, #4]
    cbf4:	930b      	str	r3, [sp, #44]	; 0x2c
    am_util_ble_set_constant_transmission(pBLE, true);
    cbf6:	2101      	movs	r1, #1
    cbf8:	980c      	ldr	r0, [sp, #48]	; 0x30
    cbfa:	f7ff fe59 	bl	c8b0 <am_util_ble_set_constant_transmission>

    // issue the HCI command with to TX constant transmission
    sWriteCommand.bytes[0] = 0x01;
    cbfe:	2301      	movs	r3, #1
    cc00:	f88d 3018 	strb.w	r3, [sp, #24]
    sWriteCommand.bytes[1] = 0x1E;
    cc04:	231e      	movs	r3, #30
    cc06:	f88d 3019 	strb.w	r3, [sp, #25]
    sWriteCommand.bytes[2] = 0x20;
    cc0a:	2320      	movs	r3, #32
    cc0c:	f88d 301a 	strb.w	r3, [sp, #26]
    sWriteCommand.bytes[3] = 0x03;
    cc10:	2303      	movs	r3, #3
    cc12:	f88d 301b 	strb.w	r3, [sp, #27]
    sWriteCommand.bytes[4] = channel;
    cc16:	f89d 3003 	ldrb.w	r3, [sp, #3]
    cc1a:	f88d 301c 	strb.w	r3, [sp, #28]
    sWriteCommand.bytes[5] = 0x25;
    cc1e:	2325      	movs	r3, #37	; 0x25
    cc20:	f88d 301d 	strb.w	r3, [sp, #29]
    sWriteCommand.bytes[6] = 0x00;
    cc24:	2300      	movs	r3, #0
    cc26:	f88d 301e 	strb.w	r3, [sp, #30]

    //
    // Temporarily disable BLE interrupts.
    //
    ui32IntEnable = BLEIFn(ui32Module)->INTEN;
    cc2a:	4b21      	ldr	r3, [pc, #132]	; (ccb0 <am_util_ble_set_constant_transmission_ex+0xe4>)
    cc2c:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
    cc30:	930a      	str	r3, [sp, #40]	; 0x28
    BLEIFn(ui32Module)->INTEN = 0;
    cc32:	4b1f      	ldr	r3, [pc, #124]	; (ccb0 <am_util_ble_set_constant_transmission_ex+0xe4>)
    cc34:	2200      	movs	r2, #0
    cc36:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220

    am_hal_ble_blocking_hci_write(pBLE,
    cc3a:	aa06      	add	r2, sp, #24
    cc3c:	2307      	movs	r3, #7
    cc3e:	2100      	movs	r1, #0
    cc40:	980c      	ldr	r0, [sp, #48]	; 0x30
    cc42:	f001 febf 	bl	e9c4 <am_hal_ble_blocking_hci_write>
                                  AM_HAL_BLE_RAW,
                                  sWriteCommand.words,
                                  7);
    BLEIFn(ui32Module)->BLEDBG_b.IOCLKON = 1;
    cc46:	4a1a      	ldr	r2, [pc, #104]	; (ccb0 <am_util_ble_set_constant_transmission_ex+0xe4>)
    cc48:	f8d2 3410 	ldr.w	r3, [r2, #1040]	; 0x410
    cc4c:	f043 0302 	orr.w	r3, r3, #2
    cc50:	f8c2 3410 	str.w	r3, [r2, #1040]	; 0x410

    //
    // Wait for the response.
    //
    for (uint32_t i = 0; i < 100; i++)
    cc54:	2300      	movs	r3, #0
    cc56:	930d      	str	r3, [sp, #52]	; 0x34
    cc58:	e012      	b.n	cc80 <am_util_ble_set_constant_transmission_ex+0xb4>
    {
        if (BLEIFn(ui32Module)->BSTATUS_b.BLEIRQ != 0)
    cc5a:	4b15      	ldr	r3, [pc, #84]	; (ccb0 <am_util_ble_set_constant_transmission_ex+0xe4>)
    cc5c:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
    cc60:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    cc64:	b2db      	uxtb	r3, r3
    cc66:	2b00      	cmp	r3, #0
    cc68:	d10e      	bne.n	cc88 <am_util_ble_set_constant_transmission_ex+0xbc>
        {
            break;
        }
        else if (i == (100 - 1))
    cc6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cc6c:	2b63      	cmp	r3, #99	; 0x63
    cc6e:	d101      	bne.n	cc74 <am_util_ble_set_constant_transmission_ex+0xa8>
        {
            return AM_HAL_BLE_NO_HCI_RESPONSE;
    cc70:	4b10      	ldr	r3, [pc, #64]	; (ccb4 <am_util_ble_set_constant_transmission_ex+0xe8>)
    cc72:	e019      	b.n	cca8 <am_util_ble_set_constant_transmission_ex+0xdc>
        }
        else
        {
            am_util_delay_ms(1);
    cc74:	2001      	movs	r0, #1
    cc76:	f000 f81f 	bl	ccb8 <am_util_delay_ms>
    for (uint32_t i = 0; i < 100; i++)
    cc7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cc7c:	3301      	adds	r3, #1
    cc7e:	930d      	str	r3, [sp, #52]	; 0x34
    cc80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cc82:	2b63      	cmp	r3, #99	; 0x63
    cc84:	d9e9      	bls.n	cc5a <am_util_ble_set_constant_transmission_ex+0x8e>
    cc86:	e000      	b.n	cc8a <am_util_ble_set_constant_transmission_ex+0xbe>
            break;
    cc88:	bf00      	nop
        }
    }

    am_hal_ble_blocking_hci_read(pBLE, sResponse.words, 0);
    cc8a:	ab02      	add	r3, sp, #8
    cc8c:	2200      	movs	r2, #0
    cc8e:	4619      	mov	r1, r3
    cc90:	980c      	ldr	r0, [sp, #48]	; 0x30
    cc92:	f001 fec1 	bl	ea18 <am_hal_ble_blocking_hci_read>

    //
    // Re-enable BLE interrupts.
    //
    BLEIFn(ui32Module)->INTCLR = ui32IntEnable;
    cc96:	4a06      	ldr	r2, [pc, #24]	; (ccb0 <am_util_ble_set_constant_transmission_ex+0xe4>)
    cc98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cc9a:	f8c2 3228 	str.w	r3, [r2, #552]	; 0x228
    BLEIFn(ui32Module)->INTEN = ui32IntEnable;
    cc9e:	4a04      	ldr	r2, [pc, #16]	; (ccb0 <am_util_ble_set_constant_transmission_ex+0xe4>)
    cca0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cca2:	f8c2 3220 	str.w	r3, [r2, #544]	; 0x220

    return AM_HAL_STATUS_SUCCESS;
    cca6:	2300      	movs	r3, #0
}
    cca8:	4618      	mov	r0, r3
    ccaa:	b00f      	add	sp, #60	; 0x3c
    ccac:	f85d fb04 	ldr.w	pc, [sp], #4
    ccb0:	5000c000 	.word	0x5000c000
    ccb4:	08000004 	.word	0x08000004

0000ccb8 <am_util_delay_ms>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
    ccb8:	b500      	push	{lr}
    ccba:	b089      	sub	sp, #36	; 0x24
    ccbc:	9001      	str	r0, [sp, #4]
    am_hal_delay_us( ui32MilliSeconds * 1000);
#else // AM_PART_APOLLO4
    uint32_t ui32Loops, ui32HFRC;
#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
    ccbe:	ab03      	add	r3, sp, #12
    ccc0:	4618      	mov	r0, r3
    ccc2:	f002 faa1 	bl	f208 <am_hal_clkgen_status_get>
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
    ccc6:	9b03      	ldr	r3, [sp, #12]
    ccc8:	9307      	str	r3, [sp, #28]
#else // AM_APOLLO3_CLKGEN
    ui32HFRC = am_hal_clkgen_sysclk_get();
#endif // AM_APOLLO3_CLKGEN
    ui32Loops = ui32MilliSeconds * (ui32HFRC / 3000);
    ccca:	9b07      	ldr	r3, [sp, #28]
    cccc:	4a07      	ldr	r2, [pc, #28]	; (ccec <am_util_delay_ms+0x34>)
    ccce:	fba2 2303 	umull	r2, r3, r2, r3
    ccd2:	099a      	lsrs	r2, r3, #6
    ccd4:	9b01      	ldr	r3, [sp, #4]
    ccd6:	fb02 f303 	mul.w	r3, r2, r3
    ccda:	9306      	str	r3, [sp, #24]

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
    ccdc:	9806      	ldr	r0, [sp, #24]
    ccde:	f002 fab1 	bl	f244 <am_hal_flash_delay>
#endif // AM_PART_APOLLO4
}
    cce2:	bf00      	nop
    cce4:	b009      	add	sp, #36	; 0x24
    cce6:	f85d fb04 	ldr.w	pc, [sp], #4
    ccea:	bf00      	nop
    ccec:	057619f1 	.word	0x057619f1

0000ccf0 <HardFault_Handler>:
HardFault_Handler(void)
#else // AM_CMSIS_REGS
am_fault_isr(void)
#endif // AM_CMSIS_REGS
{
    __asm("    push    {r0,lr}");       // Always pushes to MSP stack
    ccf0:	b501      	push	{r0, lr}
    __asm("    tst     lr, #4");        // Check if we should use MSP or PSP
    ccf2:	f01e 0f04 	tst.w	lr, #4
    __asm("    itet    eq");            // Instrs executed when: eq,ne,eq
    ccf6:	bf0a      	itet	eq
    __asm("    mrseq   r0, msp");       //    bit2=0 indicating MSP stack
    ccf8:	f3ef 8008 	mrseq	r0, MSP
    __asm("    mrsne   r0, psp");       // e: bit2=1 indicating PSP stack
    ccfc:	f3ef 8009 	mrsne	r0, PSP
    __asm("    addseq  r0, r0, #8");    // t: bit2=0, adjust for pushes to MSP stack
    cd00:	f110 0008 	addseq.w	r0, r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
    cd04:	f000 f80a 	bl	cd1c <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");       // Restore from MSP stack
    cd08:	bd01      	pop	{r0, pc}
}
    cd0a:	bf00      	nop
    cd0c:	4618      	mov	r0, r3

0000cd0e <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
    cd0e:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
    cd10:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
    cd12:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
    cd14:	4770      	bx	lr
}
    cd16:	bf00      	nop
    cd18:	4618      	mov	r0, r3
	...

0000cd1c <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    cd1c:	b500      	push	{lr}
    cd1e:	b097      	sub	sp, #92	; 0x5c
    cd20:	9001      	str	r0, [sp, #4]
    volatile am_fault_t sFaultData;
#if (defined(AM_PART_APOLLO4) || defined(AM_PART_APOLLO4B))
    am_hal_fault_status_t  sHalFaultData = {0};
#else
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    cd22:	ab03      	add	r3, sp, #12
    cd24:	2200      	movs	r2, #0
    cd26:	601a      	str	r2, [r3, #0]
    cd28:	605a      	str	r2, [r3, #4]
    cd2a:	609a      	str	r2, [r3, #8]
    cd2c:	60da      	str	r2, [r3, #12]
    cd2e:	611a      	str	r2, [r3, #16]
    cd30:	615a      	str	r2, [r3, #20]
#endif // if defined(AM_PART_APOLLO4)

    uint32_t u32Mask = 0;
    cd32:	2300      	movs	r3, #0
    cd34:	9315      	str	r3, [sp, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    cd36:	9b15      	ldr	r3, [sp, #84]	; 0x54
    cd38:	9313      	str	r3, [sp, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    cd3a:	4b2e      	ldr	r3, [pc, #184]	; (cdf4 <am_util_faultisr_collect_data+0xd8>)
    cd3c:	681b      	ldr	r3, [r3, #0]
    cd3e:	9313      	str	r3, [sp, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    cd40:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    cd42:	b2db      	uxtb	r3, r3
    cd44:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    cd48:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    cd4a:	0a1b      	lsrs	r3, r3, #8
    cd4c:	b2db      	uxtb	r3, r3
    cd4e:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    cd52:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    cd54:	0c1b      	lsrs	r3, r3, #16
    cd56:	b29b      	uxth	r3, r3
    cd58:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    cd5c:	4b26      	ldr	r3, [pc, #152]	; (cdf8 <am_util_faultisr_collect_data+0xdc>)
    cd5e:	681b      	ldr	r3, [r3, #0]
    cd60:	9312      	str	r3, [sp, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    cd62:	f89d 3051 	ldrb.w	r3, [sp, #81]	; 0x51
    cd66:	b2db      	uxtb	r3, r3
    cd68:	f003 0302 	and.w	r3, r3, #2
    cd6c:	2b00      	cmp	r3, #0
    cd6e:	d005      	beq.n	cd7c <am_util_faultisr_collect_data+0x60>
    cd70:	9901      	ldr	r1, [sp, #4]
    cd72:	2006      	movs	r0, #6
    cd74:	f7ff ffcb 	bl	cd0e <getStackedReg>
    cd78:	4603      	mov	r3, r0
    cd7a:	e001      	b.n	cd80 <am_util_faultisr_collect_data+0x64>
    cd7c:	f04f 33ff 	mov.w	r3, #4294967295
    cd80:	9311      	str	r3, [sp, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    cd82:	9901      	ldr	r1, [sp, #4]
    cd84:	2000      	movs	r0, #0
    cd86:	f7ff ffc2 	bl	cd0e <getStackedReg>
    cd8a:	4603      	mov	r3, r0
    cd8c:	9309      	str	r3, [sp, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    cd8e:	9901      	ldr	r1, [sp, #4]
    cd90:	2001      	movs	r0, #1
    cd92:	f7ff ffbc 	bl	cd0e <getStackedReg>
    cd96:	4603      	mov	r3, r0
    cd98:	930a      	str	r3, [sp, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    cd9a:	9901      	ldr	r1, [sp, #4]
    cd9c:	2002      	movs	r0, #2
    cd9e:	f7ff ffb6 	bl	cd0e <getStackedReg>
    cda2:	4603      	mov	r3, r0
    cda4:	930b      	str	r3, [sp, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    cda6:	9901      	ldr	r1, [sp, #4]
    cda8:	2003      	movs	r0, #3
    cdaa:	f7ff ffb0 	bl	cd0e <getStackedReg>
    cdae:	4603      	mov	r3, r0
    cdb0:	930c      	str	r3, [sp, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    cdb2:	9901      	ldr	r1, [sp, #4]
    cdb4:	2004      	movs	r0, #4
    cdb6:	f7ff ffaa 	bl	cd0e <getStackedReg>
    cdba:	4603      	mov	r3, r0
    cdbc:	930d      	str	r3, [sp, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    cdbe:	9901      	ldr	r1, [sp, #4]
    cdc0:	2005      	movs	r0, #5
    cdc2:	f7ff ffa4 	bl	cd0e <getStackedReg>
    cdc6:	4603      	mov	r3, r0
    cdc8:	930e      	str	r3, [sp, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    cdca:	9901      	ldr	r1, [sp, #4]
    cdcc:	2006      	movs	r0, #6
    cdce:	f7ff ff9e 	bl	cd0e <getStackedReg>
    cdd2:	4603      	mov	r3, r0
    cdd4:	930f      	str	r3, [sp, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    cdd6:	9901      	ldr	r1, [sp, #4]
    cdd8:	2007      	movs	r0, #7
    cdda:	f7ff ff98 	bl	cd0e <getStackedReg>
    cdde:	4603      	mov	r3, r0
    cde0:	9310      	str	r3, [sp, #64]	; 0x40
    //
#if (defined(AM_PART_APOLLO4) || defined(AM_PART_APOLLO4B))
    am_hal_fault_status_get(&sHalFaultData);
#else
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    cde2:	ab03      	add	r3, sp, #12
    cde4:	4619      	mov	r1, r3
    cde6:	2002      	movs	r0, #2
    cde8:	f002 fc3e 	bl	f668 <am_hal_mcuctrl_info_get>
      am_util_stdio_printf("   SYS Fault Address: 0x%08X\n", sHalFaultData.ui32SYS);
    }

#endif

    u32Mask = 0;
    cdec:	2300      	movs	r3, #0
    cdee:	9315      	str	r3, [sp, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    cdf0:	e7fe      	b.n	cdf0 <am_util_faultisr_collect_data+0xd4>
    cdf2:	bf00      	nop
    cdf4:	e000ed28 	.word	0xe000ed28
    cdf8:	e000ed38 	.word	0xe000ed38

0000cdfc <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
    cdfc:	b082      	sub	sp, #8
    cdfe:	9001      	str	r0, [sp, #4]
    g_pfnCharPrint = pfnCharPrint;
    ce00:	4a02      	ldr	r2, [pc, #8]	; (ce0c <am_util_stdio_printf_init+0x10>)
    ce02:	9b01      	ldr	r3, [sp, #4]
    ce04:	6013      	str	r3, [r2, #0]
}
    ce06:	bf00      	nop
    ce08:	b002      	add	sp, #8
    ce0a:	4770      	bx	lr
    ce0c:	1000320c 	.word	0x1000320c

0000ce10 <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
    ce10:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    ce14:	b098      	sub	sp, #96	; 0x60
    ce16:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    ce1a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    ce1e:	f04f 0000 	mov.w	r0, #0
    ce22:	f04f 0100 	mov.w	r1, #0
    ce26:	0018      	movs	r0, r3
    ce28:	2100      	movs	r1, #0
    ce2a:	ea50 0301 	orrs.w	r3, r0, r1
    ce2e:	f000 80b0 	beq.w	cf92 <divu64_10+0x182>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
    ce32:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    ce36:	f04f 0400 	mov.w	r4, #0
    ce3a:	f04f 0500 	mov.w	r5, #0
    ce3e:	0854      	lsrs	r4, r2, #1
    ce40:	ea44 74c3 	orr.w	r4, r4, r3, lsl #31
    ce44:	085d      	lsrs	r5, r3, #1
    ce46:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    ce4a:	f04f 0000 	mov.w	r0, #0
    ce4e:	f04f 0100 	mov.w	r1, #0
    ce52:	0890      	lsrs	r0, r2, #2
    ce54:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
    ce58:	0899      	lsrs	r1, r3, #2
    ce5a:	eb14 0a00 	adds.w	sl, r4, r0
    ce5e:	eb45 0b01 	adc.w	fp, r5, r1
    ce62:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
        q64 += (q64 >> 4);
    ce66:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    ce6a:	f04f 0000 	mov.w	r0, #0
    ce6e:	f04f 0100 	mov.w	r1, #0
    ce72:	0910      	lsrs	r0, r2, #4
    ce74:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
    ce78:	0919      	lsrs	r1, r3, #4
    ce7a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    ce7e:	1814      	adds	r4, r2, r0
    ce80:	9402      	str	r4, [sp, #8]
    ce82:	414b      	adcs	r3, r1
    ce84:	9303      	str	r3, [sp, #12]
    ce86:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
    ce8a:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 += (q64 >> 8);
    ce8e:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    ce92:	f04f 0000 	mov.w	r0, #0
    ce96:	f04f 0100 	mov.w	r1, #0
    ce9a:	0a10      	lsrs	r0, r2, #8
    ce9c:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
    cea0:	0a19      	lsrs	r1, r3, #8
    cea2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    cea6:	1814      	adds	r4, r2, r0
    cea8:	9404      	str	r4, [sp, #16]
    ceaa:	414b      	adcs	r3, r1
    ceac:	9305      	str	r3, [sp, #20]
    ceae:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
    ceb2:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 += (q64 >> 16);
    ceb6:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    ceba:	f04f 0000 	mov.w	r0, #0
    cebe:	f04f 0100 	mov.w	r1, #0
    cec2:	0c10      	lsrs	r0, r2, #16
    cec4:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
    cec8:	0c19      	lsrs	r1, r3, #16
    ceca:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    cece:	1814      	adds	r4, r2, r0
    ced0:	9406      	str	r4, [sp, #24]
    ced2:	414b      	adcs	r3, r1
    ced4:	9307      	str	r3, [sp, #28]
    ced6:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
    ceda:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 += (q64 >> 32);
    cede:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    cee2:	f04f 0000 	mov.w	r0, #0
    cee6:	f04f 0100 	mov.w	r1, #0
    ceea:	0018      	movs	r0, r3
    ceec:	2100      	movs	r1, #0
    ceee:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    cef2:	1814      	adds	r4, r2, r0
    cef4:	9408      	str	r4, [sp, #32]
    cef6:	414b      	adcs	r3, r1
    cef8:	9309      	str	r3, [sp, #36]	; 0x24
    cefa:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
    cefe:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 >>= 3;
    cf02:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    cf06:	f04f 0200 	mov.w	r2, #0
    cf0a:	f04f 0300 	mov.w	r3, #0
    cf0e:	08c2      	lsrs	r2, r0, #3
    cf10:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
    cf14:	08cb      	lsrs	r3, r1, #3
    cf16:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
        r64 = ui64Val - q64*10;
    cf1a:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
    cf1e:	4622      	mov	r2, r4
    cf20:	462b      	mov	r3, r5
    cf22:	f04f 0000 	mov.w	r0, #0
    cf26:	f04f 0100 	mov.w	r1, #0
    cf2a:	0099      	lsls	r1, r3, #2
    cf2c:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
    cf30:	0090      	lsls	r0, r2, #2
    cf32:	4602      	mov	r2, r0
    cf34:	460b      	mov	r3, r1
    cf36:	1916      	adds	r6, r2, r4
    cf38:	eb43 0705 	adc.w	r7, r3, r5
    cf3c:	19b3      	adds	r3, r6, r6
    cf3e:	930a      	str	r3, [sp, #40]	; 0x28
    cf40:	eb47 0307 	adc.w	r3, r7, r7
    cf44:	930b      	str	r3, [sp, #44]	; 0x2c
    cf46:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
    cf4a:	4630      	mov	r0, r6
    cf4c:	4639      	mov	r1, r7
    cf4e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    cf52:	1a14      	subs	r4, r2, r0
    cf54:	940c      	str	r4, [sp, #48]	; 0x30
    cf56:	eb63 0301 	sbc.w	r3, r3, r1
    cf5a:	930d      	str	r3, [sp, #52]	; 0x34
    cf5c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    cf60:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
        return q64 + ((r64 + 6) >> 4);
    cf64:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    cf68:	f112 0806 	adds.w	r8, r2, #6
    cf6c:	f143 0900 	adc.w	r9, r3, #0
    cf70:	f04f 0200 	mov.w	r2, #0
    cf74:	f04f 0300 	mov.w	r3, #0
    cf78:	ea4f 1218 	mov.w	r2, r8, lsr #4
    cf7c:	ea42 7209 	orr.w	r2, r2, r9, lsl #28
    cf80:	ea4f 1319 	mov.w	r3, r9, lsr #4
    cf84:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    cf88:	1814      	adds	r4, r2, r0
    cf8a:	9400      	str	r4, [sp, #0]
    cf8c:	414b      	adcs	r3, r1
    cf8e:	9301      	str	r3, [sp, #4]
    cf90:	e02a      	b.n	cfe8 <divu64_10+0x1d8>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
    cf92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    cf94:	9317      	str	r3, [sp, #92]	; 0x5c
        q32 = (ui32Val>>1) + (ui32Val>>2);
    cf96:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    cf98:	085a      	lsrs	r2, r3, #1
    cf9a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    cf9c:	089b      	lsrs	r3, r3, #2
    cf9e:	4413      	add	r3, r2
    cfa0:	9316      	str	r3, [sp, #88]	; 0x58
        q32 += (q32 >> 4);
    cfa2:	9b16      	ldr	r3, [sp, #88]	; 0x58
    cfa4:	091b      	lsrs	r3, r3, #4
    cfa6:	9a16      	ldr	r2, [sp, #88]	; 0x58
    cfa8:	4413      	add	r3, r2
    cfaa:	9316      	str	r3, [sp, #88]	; 0x58
        q32 += (q32 >> 8);
    cfac:	9b16      	ldr	r3, [sp, #88]	; 0x58
    cfae:	0a1b      	lsrs	r3, r3, #8
    cfb0:	9a16      	ldr	r2, [sp, #88]	; 0x58
    cfb2:	4413      	add	r3, r2
    cfb4:	9316      	str	r3, [sp, #88]	; 0x58
        q32 += (q32 >> 16);
    cfb6:	9b16      	ldr	r3, [sp, #88]	; 0x58
    cfb8:	0c1b      	lsrs	r3, r3, #16
    cfba:	9a16      	ldr	r2, [sp, #88]	; 0x58
    cfbc:	4413      	add	r3, r2
    cfbe:	9316      	str	r3, [sp, #88]	; 0x58
        q32 >>= 3;
    cfc0:	9b16      	ldr	r3, [sp, #88]	; 0x58
    cfc2:	08db      	lsrs	r3, r3, #3
    cfc4:	9316      	str	r3, [sp, #88]	; 0x58
        r32 = ui32Val - q32*10;
    cfc6:	9a16      	ldr	r2, [sp, #88]	; 0x58
    cfc8:	4613      	mov	r3, r2
    cfca:	009b      	lsls	r3, r3, #2
    cfcc:	4413      	add	r3, r2
    cfce:	005b      	lsls	r3, r3, #1
    cfd0:	461a      	mov	r2, r3
    cfd2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    cfd4:	1a9b      	subs	r3, r3, r2
    cfd6:	9315      	str	r3, [sp, #84]	; 0x54
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    cfd8:	9b15      	ldr	r3, [sp, #84]	; 0x54
    cfda:	3306      	adds	r3, #6
    cfdc:	091a      	lsrs	r2, r3, #4
    cfde:	9b16      	ldr	r3, [sp, #88]	; 0x58
    cfe0:	4413      	add	r3, r2
    cfe2:	2200      	movs	r2, #0
    cfe4:	9300      	str	r3, [sp, #0]
    cfe6:	9201      	str	r2, [sp, #4]
    }
}
    cfe8:	e9dd 2300 	ldrd	r2, r3, [sp]
    cfec:	4610      	mov	r0, r2
    cfee:	4619      	mov	r1, r3
    cff0:	b018      	add	sp, #96	; 0x60
    cff2:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    cff6:	4770      	bx	lr

0000cff8 <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
    cff8:	b500      	push	{lr}
    cffa:	b085      	sub	sp, #20
    cffc:	e9cd 0100 	strd	r0, r1, [sp]
    int iNDigits = ui64Val ? 0 : 1;
    d000:	9a00      	ldr	r2, [sp, #0]
    d002:	9b01      	ldr	r3, [sp, #4]
    d004:	4313      	orrs	r3, r2
    d006:	2b00      	cmp	r3, #0
    d008:	bf0c      	ite	eq
    d00a:	2301      	moveq	r3, #1
    d00c:	2300      	movne	r3, #0
    d00e:	b2db      	uxtb	r3, r3
    d010:	9303      	str	r3, [sp, #12]

    while ( ui64Val )
    d012:	e008      	b.n	d026 <ndigits_in_u64+0x2e>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
    d014:	e9dd 0100 	ldrd	r0, r1, [sp]
    d018:	f7ff fefa 	bl	ce10 <divu64_10>
    d01c:	e9cd 0100 	strd	r0, r1, [sp]
        ++iNDigits;
    d020:	9b03      	ldr	r3, [sp, #12]
    d022:	3301      	adds	r3, #1
    d024:	9303      	str	r3, [sp, #12]
    while ( ui64Val )
    d026:	e9dd 2300 	ldrd	r2, r3, [sp]
    d02a:	4313      	orrs	r3, r2
    d02c:	d1f2      	bne.n	d014 <ndigits_in_u64+0x1c>
    }

    return iNDigits;
    d02e:	9b03      	ldr	r3, [sp, #12]
}
    d030:	4618      	mov	r0, r3
    d032:	b005      	add	sp, #20
    d034:	f85d fb04 	ldr.w	pc, [sp], #4

0000d038 <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
    d038:	b530      	push	{r4, r5, lr}
    d03a:	b083      	sub	sp, #12
    d03c:	e9cd 0100 	strd	r0, r1, [sp]
    if ( i64Val < 0 )
    d040:	e9dd 2300 	ldrd	r2, r3, [sp]
    d044:	2b00      	cmp	r3, #0
    d046:	da07      	bge.n	d058 <ndigits_in_i64+0x20>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
    d048:	e9dd 2300 	ldrd	r2, r3, [sp]
    d04c:	2100      	movs	r1, #0
    d04e:	4254      	negs	r4, r2
    d050:	eb61 0503 	sbc.w	r5, r1, r3
    d054:	e9cd 4500 	strd	r4, r5, [sp]
    }

    return ndigits_in_u64((uint64_t) i64Val);
    d058:	e9dd 2300 	ldrd	r2, r3, [sp]
    d05c:	4610      	mov	r0, r2
    d05e:	4619      	mov	r1, r3
    d060:	f7ff ffca 	bl	cff8 <ndigits_in_u64>
    d064:	4603      	mov	r3, r0
}
    d066:	4618      	mov	r0, r3
    d068:	b003      	add	sp, #12
    d06a:	bd30      	pop	{r4, r5, pc}

0000d06c <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
    d06c:	b084      	sub	sp, #16
    d06e:	e9cd 0100 	strd	r0, r1, [sp]
    int iDigits = ui64Val ? 0 : 1;
    d072:	9a00      	ldr	r2, [sp, #0]
    d074:	9b01      	ldr	r3, [sp, #4]
    d076:	4313      	orrs	r3, r2
    d078:	2b00      	cmp	r3, #0
    d07a:	bf0c      	ite	eq
    d07c:	2301      	moveq	r3, #1
    d07e:	2300      	movne	r3, #0
    d080:	b2db      	uxtb	r3, r3
    d082:	9303      	str	r3, [sp, #12]

    while ( ui64Val )
    d084:	e00e      	b.n	d0a4 <ndigits_in_hex+0x38>
    {
        ui64Val >>= 4;
    d086:	e9dd 0100 	ldrd	r0, r1, [sp]
    d08a:	f04f 0200 	mov.w	r2, #0
    d08e:	f04f 0300 	mov.w	r3, #0
    d092:	0902      	lsrs	r2, r0, #4
    d094:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    d098:	090b      	lsrs	r3, r1, #4
    d09a:	e9cd 2300 	strd	r2, r3, [sp]
        ++iDigits;
    d09e:	9b03      	ldr	r3, [sp, #12]
    d0a0:	3301      	adds	r3, #1
    d0a2:	9303      	str	r3, [sp, #12]
    while ( ui64Val )
    d0a4:	e9dd 2300 	ldrd	r2, r3, [sp]
    d0a8:	4313      	orrs	r3, r2
    d0aa:	d1ec      	bne.n	d086 <ndigits_in_hex+0x1a>
    }

    return iDigits;
    d0ac:	9b03      	ldr	r3, [sp, #12]
}
    d0ae:	4618      	mov	r0, r3
    d0b0:	b004      	add	sp, #16
    d0b2:	4770      	bx	lr

0000d0b4 <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
    d0b4:	b086      	sub	sp, #24
    d0b6:	9001      	str	r0, [sp, #4]
    d0b8:	9100      	str	r1, [sp, #0]
    bool bNeg = false;
    d0ba:	2300      	movs	r3, #0
    d0bc:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32_t ui32Val = 0, uCnt = 0;
    d0c0:	2300      	movs	r3, #0
    d0c2:	9304      	str	r3, [sp, #16]
    d0c4:	2300      	movs	r3, #0
    d0c6:	9303      	str	r3, [sp, #12]

    if ( *pcStr == '-')
    d0c8:	9b01      	ldr	r3, [sp, #4]
    d0ca:	781b      	ldrb	r3, [r3, #0]
    d0cc:	2b2d      	cmp	r3, #45	; 0x2d
    d0ce:	d11c      	bne.n	d10a <decstr_to_int+0x56>
    {
        bNeg = true;
    d0d0:	2301      	movs	r3, #1
    d0d2:	f88d 3017 	strb.w	r3, [sp, #23]
        pcStr++;
    d0d6:	9b01      	ldr	r3, [sp, #4]
    d0d8:	3301      	adds	r3, #1
    d0da:	9301      	str	r3, [sp, #4]
        uCnt++;
    d0dc:	9b03      	ldr	r3, [sp, #12]
    d0de:	3301      	adds	r3, #1
    d0e0:	9303      	str	r3, [sp, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d0e2:	e012      	b.n	d10a <decstr_to_int+0x56>
    {
        ++uCnt;
    d0e4:	9b03      	ldr	r3, [sp, #12]
    d0e6:	3301      	adds	r3, #1
    d0e8:	9303      	str	r3, [sp, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
    d0ea:	9a04      	ldr	r2, [sp, #16]
    d0ec:	4613      	mov	r3, r2
    d0ee:	009b      	lsls	r3, r3, #2
    d0f0:	4413      	add	r3, r2
    d0f2:	005b      	lsls	r3, r3, #1
    d0f4:	9304      	str	r3, [sp, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
    d0f6:	9b01      	ldr	r3, [sp, #4]
    d0f8:	781b      	ldrb	r3, [r3, #0]
    d0fa:	461a      	mov	r2, r3
    d0fc:	9b04      	ldr	r3, [sp, #16]
    d0fe:	4413      	add	r3, r2
    d100:	3b30      	subs	r3, #48	; 0x30
    d102:	9304      	str	r3, [sp, #16]
        pcStr++;
    d104:	9b01      	ldr	r3, [sp, #4]
    d106:	3301      	adds	r3, #1
    d108:	9301      	str	r3, [sp, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d10a:	9b01      	ldr	r3, [sp, #4]
    d10c:	781b      	ldrb	r3, [r3, #0]
    d10e:	2b2f      	cmp	r3, #47	; 0x2f
    d110:	d903      	bls.n	d11a <decstr_to_int+0x66>
    d112:	9b01      	ldr	r3, [sp, #4]
    d114:	781b      	ldrb	r3, [r3, #0]
    d116:	2b39      	cmp	r3, #57	; 0x39
    d118:	d9e4      	bls.n	d0e4 <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
    d11a:	9b00      	ldr	r3, [sp, #0]
    d11c:	2b00      	cmp	r3, #0
    d11e:	d002      	beq.n	d126 <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
    d120:	9b00      	ldr	r3, [sp, #0]
    d122:	9a03      	ldr	r2, [sp, #12]
    d124:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
    d126:	f89d 3017 	ldrb.w	r3, [sp, #23]
    d12a:	2b00      	cmp	r3, #0
    d12c:	d002      	beq.n	d134 <decstr_to_int+0x80>
    d12e:	9b04      	ldr	r3, [sp, #16]
    d130:	425b      	negs	r3, r3
    d132:	e000      	b.n	d136 <decstr_to_int+0x82>
    d134:	9b04      	ldr	r3, [sp, #16]
}
    d136:	4618      	mov	r0, r3
    d138:	b006      	add	sp, #24
    d13a:	4770      	bx	lr

0000d13c <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    d13c:	b500      	push	{lr}
    d13e:	b091      	sub	sp, #68	; 0x44
    d140:	e9cd 0102 	strd	r0, r1, [sp, #8]
    d144:	9201      	str	r2, [sp, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
    d146:	2300      	movs	r3, #0
    d148:	930f      	str	r3, [sp, #60]	; 0x3c
    d14a:	2300      	movs	r3, #0
    d14c:	930e      	str	r3, [sp, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
    d14e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    d152:	f7ff fe5d 	bl	ce10 <divu64_10>
    d156:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
    d15a:	9902      	ldr	r1, [sp, #8]
    d15c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d15e:	4613      	mov	r3, r2
    d160:	009b      	lsls	r3, r3, #2
    d162:	4413      	add	r3, r2
    d164:	005b      	lsls	r3, r3, #1
    d166:	1acb      	subs	r3, r1, r3
    d168:	930b      	str	r3, [sp, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
    d16a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d16c:	b2da      	uxtb	r2, r3
    d16e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d170:	1c59      	adds	r1, r3, #1
    d172:	910f      	str	r1, [sp, #60]	; 0x3c
    d174:	3230      	adds	r2, #48	; 0x30
    d176:	b2d2      	uxtb	r2, r2
    d178:	3340      	adds	r3, #64	; 0x40
    d17a:	446b      	add	r3, sp
    d17c:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
    d180:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    d184:	e9cd 2302 	strd	r2, r3, [sp, #8]
    } while ( ui64Val );
    d188:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    d18c:	4313      	orrs	r3, r2
    d18e:	d1de      	bne.n	d14e <uint64_to_str+0x12>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    d190:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d192:	930e      	str	r3, [sp, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    d194:	9b01      	ldr	r3, [sp, #4]
    d196:	2b00      	cmp	r3, #0
    d198:	d010      	beq.n	d1bc <uint64_to_str+0x80>
    {
        while ( ix-- )
    d19a:	e007      	b.n	d1ac <uint64_to_str+0x70>
        {
            *pcBuf++ = tbuf[ix];
    d19c:	9b01      	ldr	r3, [sp, #4]
    d19e:	1c5a      	adds	r2, r3, #1
    d1a0:	9201      	str	r2, [sp, #4]
    d1a2:	a904      	add	r1, sp, #16
    d1a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    d1a6:	440a      	add	r2, r1
    d1a8:	7812      	ldrb	r2, [r2, #0]
    d1aa:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
    d1ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d1ae:	1e5a      	subs	r2, r3, #1
    d1b0:	920f      	str	r2, [sp, #60]	; 0x3c
    d1b2:	2b00      	cmp	r3, #0
    d1b4:	d1f2      	bne.n	d19c <uint64_to_str+0x60>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
    d1b6:	9b01      	ldr	r3, [sp, #4]
    d1b8:	2200      	movs	r2, #0
    d1ba:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    d1bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
}
    d1be:	4618      	mov	r0, r3
    d1c0:	b011      	add	sp, #68	; 0x44
    d1c2:	f85d fb04 	ldr.w	pc, [sp], #4

0000d1c6 <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
    d1c6:	b08c      	sub	sp, #48	; 0x30
    d1c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
    d1cc:	9201      	str	r2, [sp, #4]
    d1ce:	f88d 3003 	strb.w	r3, [sp, #3]
    int iNumDig, ix = 0;
    d1d2:	2300      	movs	r3, #0
    d1d4:	930b      	str	r3, [sp, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
    d1d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    d1da:	4313      	orrs	r3, r2
    d1dc:	d135      	bne.n	d24a <uint64_to_hexstr+0x84>
    {
        tbuf[ix++] = '0';   // Print a '0'
    d1de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d1e0:	1c5a      	adds	r2, r3, #1
    d1e2:	920b      	str	r2, [sp, #44]	; 0x2c
    d1e4:	3330      	adds	r3, #48	; 0x30
    d1e6:	446b      	add	r3, sp
    d1e8:	2230      	movs	r2, #48	; 0x30
    d1ea:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
    d1ee:	e02c      	b.n	d24a <uint64_to_hexstr+0x84>
    {
        cCh = ui64Val & 0xf;
    d1f0:	f89d 3008 	ldrb.w	r3, [sp, #8]
    d1f4:	f003 030f 	and.w	r3, r3, #15
    d1f8:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
    d1fc:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    d200:	2b09      	cmp	r3, #9
    d202:	d90b      	bls.n	d21c <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
    d204:	f89d 3003 	ldrb.w	r3, [sp, #3]
    d208:	2b00      	cmp	r3, #0
    d20a:	d001      	beq.n	d210 <uint64_to_hexstr+0x4a>
    d20c:	2227      	movs	r2, #39	; 0x27
    d20e:	e000      	b.n	d212 <uint64_to_hexstr+0x4c>
    d210:	2207      	movs	r2, #7
    d212:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    d216:	4413      	add	r3, r2
    d218:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
    d21c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d21e:	1c5a      	adds	r2, r3, #1
    d220:	920b      	str	r2, [sp, #44]	; 0x2c
    d222:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
    d226:	3230      	adds	r2, #48	; 0x30
    d228:	b2d2      	uxtb	r2, r2
    d22a:	3330      	adds	r3, #48	; 0x30
    d22c:	446b      	add	r3, sp
    d22e:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
    d232:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    d236:	f04f 0200 	mov.w	r2, #0
    d23a:	f04f 0300 	mov.w	r3, #0
    d23e:	0902      	lsrs	r2, r0, #4
    d240:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    d244:	090b      	lsrs	r3, r1, #4
    d246:	e9cd 2302 	strd	r2, r3, [sp, #8]
    while ( ui64Val )
    d24a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    d24e:	4313      	orrs	r3, r2
    d250:	d1ce      	bne.n	d1f0 <uint64_to_hexstr+0x2a>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    d252:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d254:	9309      	str	r3, [sp, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    d256:	9b01      	ldr	r3, [sp, #4]
    d258:	2b00      	cmp	r3, #0
    d25a:	d010      	beq.n	d27e <uint64_to_hexstr+0xb8>
    {
        while (ix--)
    d25c:	e007      	b.n	d26e <uint64_to_hexstr+0xa8>
        {
            *pcBuf++ = tbuf[ix];
    d25e:	9b01      	ldr	r3, [sp, #4]
    d260:	1c5a      	adds	r2, r3, #1
    d262:	9201      	str	r2, [sp, #4]
    d264:	a904      	add	r1, sp, #16
    d266:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    d268:	440a      	add	r2, r1
    d26a:	7812      	ldrb	r2, [r2, #0]
    d26c:	701a      	strb	r2, [r3, #0]
        while (ix--)
    d26e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d270:	1e5a      	subs	r2, r3, #1
    d272:	920b      	str	r2, [sp, #44]	; 0x2c
    d274:	2b00      	cmp	r3, #0
    d276:	d1f2      	bne.n	d25e <uint64_to_hexstr+0x98>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
    d278:	9b01      	ldr	r3, [sp, #4]
    d27a:	2200      	movs	r2, #0
    d27c:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    d27e:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    d280:	4618      	mov	r0, r3
    d282:	b00c      	add	sp, #48	; 0x30
    d284:	4770      	bx	lr

0000d286 <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
    d286:	b084      	sub	sp, #16
    d288:	9001      	str	r0, [sp, #4]
    uint32_t ui32RetVal = 0;
    d28a:	2300      	movs	r3, #0
    d28c:	9303      	str	r3, [sp, #12]
    if ( !pcBuf )
    d28e:	9b01      	ldr	r3, [sp, #4]
    d290:	2b00      	cmp	r3, #0
    d292:	d104      	bne.n	d29e <simple_strlen+0x18>
    {
        return ui32RetVal;
    d294:	9b03      	ldr	r3, [sp, #12]
    d296:	e009      	b.n	d2ac <simple_strlen+0x26>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
    d298:	9b03      	ldr	r3, [sp, #12]
    d29a:	3301      	adds	r3, #1
    d29c:	9303      	str	r3, [sp, #12]
    while ( *pcBuf++ )
    d29e:	9b01      	ldr	r3, [sp, #4]
    d2a0:	1c5a      	adds	r2, r3, #1
    d2a2:	9201      	str	r2, [sp, #4]
    d2a4:	781b      	ldrb	r3, [r3, #0]
    d2a6:	2b00      	cmp	r3, #0
    d2a8:	d1f6      	bne.n	d298 <simple_strlen+0x12>
    }
    return ui32RetVal;
    d2aa:	9b03      	ldr	r3, [sp, #12]
}
    d2ac:	4618      	mov	r0, r3
    d2ae:	b004      	add	sp, #16
    d2b0:	4770      	bx	lr

0000d2b2 <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
    d2b2:	b086      	sub	sp, #24
    d2b4:	9003      	str	r0, [sp, #12]
    d2b6:	460b      	mov	r3, r1
    d2b8:	9201      	str	r2, [sp, #4]
    d2ba:	f88d 300b 	strb.w	r3, [sp, #11]
    int32_t i32Cnt = 0;
    d2be:	2300      	movs	r3, #0
    d2c0:	9305      	str	r3, [sp, #20]

    if ( i32NumChars <= 0 )
    d2c2:	9b01      	ldr	r3, [sp, #4]
    d2c4:	2b00      	cmp	r3, #0
    d2c6:	dc0d      	bgt.n	d2e4 <padbuffer+0x32>
    {
        return i32Cnt;
    d2c8:	9b05      	ldr	r3, [sp, #20]
    d2ca:	e011      	b.n	d2f0 <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    d2cc:	9b03      	ldr	r3, [sp, #12]
    d2ce:	2b00      	cmp	r3, #0
    d2d0:	d005      	beq.n	d2de <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
    d2d2:	9b03      	ldr	r3, [sp, #12]
    d2d4:	1c5a      	adds	r2, r3, #1
    d2d6:	9203      	str	r2, [sp, #12]
    d2d8:	f89d 200b 	ldrb.w	r2, [sp, #11]
    d2dc:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
    d2de:	9b05      	ldr	r3, [sp, #20]
    d2e0:	3301      	adds	r3, #1
    d2e2:	9305      	str	r3, [sp, #20]
    while ( i32NumChars-- )
    d2e4:	9b01      	ldr	r3, [sp, #4]
    d2e6:	1e5a      	subs	r2, r3, #1
    d2e8:	9201      	str	r2, [sp, #4]
    d2ea:	2b00      	cmp	r3, #0
    d2ec:	d1ee      	bne.n	d2cc <padbuffer+0x1a>
    }

    return i32Cnt;
    d2ee:	9b05      	ldr	r3, [sp, #20]
}
    d2f0:	4618      	mov	r0, r3
    d2f2:	b006      	add	sp, #24
    d2f4:	4770      	bx	lr
	...

0000d2f8 <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
    d2f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    d2fa:	b08f      	sub	sp, #60	; 0x3c
    d2fc:	ed8d 0a03 	vstr	s0, [sp, #12]
    d300:	9002      	str	r0, [sp, #8]
    d302:	9101      	str	r1, [sp, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
    d304:	9b02      	ldr	r3, [sp, #8]
    d306:	681b      	ldr	r3, [r3, #0]
    d308:	9309      	str	r3, [sp, #36]	; 0x24
    if (iBufSize < 4)
    d30a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d30c:	2b03      	cmp	r3, #3
    d30e:	dc02      	bgt.n	d316 <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
    d310:	f06f 0302 	mvn.w	r3, #2
    d314:	e0e9      	b.n	d4ea <ftoa+0x1f2>
    }

    if (fValue == 0.0f)
    d316:	eddd 7a03 	vldr	s15, [sp, #12]
    d31a:	eef5 7a40 	vcmp.f32	s15, #0.0
    d31e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d322:	d104      	bne.n	d32e <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    d324:	9b02      	ldr	r3, [sp, #8]
    d326:	4a72      	ldr	r2, [pc, #456]	; (d4f0 <ftoa+0x1f8>)
    d328:	601a      	str	r2, [r3, #0]
        return 3;
    d32a:	2303      	movs	r3, #3
    d32c:	e0dd      	b.n	d4ea <ftoa+0x1f2>
    }

    pcBufInitial = pcBuf;
    d32e:	9b02      	ldr	r3, [sp, #8]
    d330:	9308      	str	r3, [sp, #32]

    unFloatValue.F = fValue;
    d332:	9b03      	ldr	r3, [sp, #12]
    d334:	9304      	str	r3, [sp, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    d336:	9b04      	ldr	r3, [sp, #16]
    d338:	15db      	asrs	r3, r3, #23
    d33a:	b2db      	uxtb	r3, r3
    d33c:	3b7f      	subs	r3, #127	; 0x7f
    d33e:	9307      	str	r3, [sp, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    d340:	9b04      	ldr	r3, [sp, #16]
    d342:	f3c3 0316 	ubfx	r3, r3, #0, #23
    d346:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    d34a:	9306      	str	r3, [sp, #24]
    i32FracPart = 0;
    d34c:	2300      	movs	r3, #0
    d34e:	930c      	str	r3, [sp, #48]	; 0x30
    i32IntPart = 0;
    d350:	2300      	movs	r3, #0
    d352:	930d      	str	r3, [sp, #52]	; 0x34

    if (iExp2 >= 31)
    d354:	9b07      	ldr	r3, [sp, #28]
    d356:	2b1e      	cmp	r3, #30
    d358:	dd02      	ble.n	d360 <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
    d35a:	f06f 0301 	mvn.w	r3, #1
    d35e:	e0c4      	b.n	d4ea <ftoa+0x1f2>
    }
    else if (iExp2 < -23)
    d360:	9b07      	ldr	r3, [sp, #28]
    d362:	f113 0f17 	cmn.w	r3, #23
    d366:	da02      	bge.n	d36e <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
    d368:	f04f 33ff 	mov.w	r3, #4294967295
    d36c:	e0bd      	b.n	d4ea <ftoa+0x1f2>
    }
    else if (iExp2 >= 23)
    d36e:	9b07      	ldr	r3, [sp, #28]
    d370:	2b16      	cmp	r3, #22
    d372:	dd06      	ble.n	d382 <ftoa+0x8a>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
    d374:	9b07      	ldr	r3, [sp, #28]
    d376:	3b17      	subs	r3, #23
    d378:	9a06      	ldr	r2, [sp, #24]
    d37a:	fa02 f303 	lsl.w	r3, r2, r3
    d37e:	930d      	str	r3, [sp, #52]	; 0x34
    d380:	e01a      	b.n	d3b8 <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
    d382:	9b07      	ldr	r3, [sp, #28]
    d384:	2b00      	cmp	r3, #0
    d386:	db0f      	blt.n	d3a8 <ftoa+0xb0>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
    d388:	9b07      	ldr	r3, [sp, #28]
    d38a:	f1c3 0317 	rsb	r3, r3, #23
    d38e:	9a06      	ldr	r2, [sp, #24]
    d390:	fa42 f303 	asr.w	r3, r2, r3
    d394:	930d      	str	r3, [sp, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    d396:	9b07      	ldr	r3, [sp, #28]
    d398:	3301      	adds	r3, #1
    d39a:	9a06      	ldr	r2, [sp, #24]
    d39c:	fa02 f303 	lsl.w	r3, r2, r3
    d3a0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    d3a4:	930c      	str	r3, [sp, #48]	; 0x30
    d3a6:	e007      	b.n	d3b8 <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    d3a8:	9b06      	ldr	r3, [sp, #24]
    d3aa:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
    d3ae:	9b07      	ldr	r3, [sp, #28]
    d3b0:	43db      	mvns	r3, r3
    d3b2:	fa42 f303 	asr.w	r3, r2, r3
    d3b6:	930c      	str	r3, [sp, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
    d3b8:	9b04      	ldr	r3, [sp, #16]
    d3ba:	2b00      	cmp	r3, #0
    d3bc:	da04      	bge.n	d3c8 <ftoa+0xd0>
    {
        *pcBuf++ = '-';
    d3be:	9b02      	ldr	r3, [sp, #8]
    d3c0:	1c5a      	adds	r2, r3, #1
    d3c2:	9202      	str	r2, [sp, #8]
    d3c4:	222d      	movs	r2, #45	; 0x2d
    d3c6:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
    d3c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d3ca:	2b00      	cmp	r3, #0
    d3cc:	d105      	bne.n	d3da <ftoa+0xe2>
    {
        *pcBuf++ = '0';
    d3ce:	9b02      	ldr	r3, [sp, #8]
    d3d0:	1c5a      	adds	r2, r3, #1
    d3d2:	9202      	str	r2, [sp, #8]
    d3d4:	2230      	movs	r2, #48	; 0x30
    d3d6:	701a      	strb	r2, [r3, #0]
    d3d8:	e023      	b.n	d422 <ftoa+0x12a>
    }
    else
    {
        if (i32IntPart > 0)
    d3da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d3dc:	2b00      	cmp	r3, #0
    d3de:	dd09      	ble.n	d3f4 <ftoa+0xfc>
        {
            uint64_to_str(i32IntPart, pcBuf);
    d3e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d3e2:	17da      	asrs	r2, r3, #31
    d3e4:	461e      	mov	r6, r3
    d3e6:	4617      	mov	r7, r2
    d3e8:	9a02      	ldr	r2, [sp, #8]
    d3ea:	4630      	mov	r0, r6
    d3ec:	4639      	mov	r1, r7
    d3ee:	f7ff fea5 	bl	d13c <uint64_to_str>
    d3f2:	e012      	b.n	d41a <ftoa+0x122>
        }
        else
        {
            *pcBuf++ = '-';
    d3f4:	9b02      	ldr	r3, [sp, #8]
    d3f6:	1c5a      	adds	r2, r3, #1
    d3f8:	9202      	str	r2, [sp, #8]
    d3fa:	222d      	movs	r2, #45	; 0x2d
    d3fc:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
    d3fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d400:	425b      	negs	r3, r3
    d402:	17da      	asrs	r2, r3, #31
    d404:	461c      	mov	r4, r3
    d406:	4615      	mov	r5, r2
    d408:	9a02      	ldr	r2, [sp, #8]
    d40a:	4620      	mov	r0, r4
    d40c:	4629      	mov	r1, r5
    d40e:	f7ff fe95 	bl	d13c <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
    d412:	e002      	b.n	d41a <ftoa+0x122>
        {
            pcBuf++;
    d414:	9b02      	ldr	r3, [sp, #8]
    d416:	3301      	adds	r3, #1
    d418:	9302      	str	r3, [sp, #8]
        while (*pcBuf)    // Get to end of new string
    d41a:	9b02      	ldr	r3, [sp, #8]
    d41c:	781b      	ldrb	r3, [r3, #0]
    d41e:	2b00      	cmp	r3, #0
    d420:	d1f8      	bne.n	d414 <ftoa+0x11c>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
    d422:	9b02      	ldr	r3, [sp, #8]
    d424:	1c5a      	adds	r2, r3, #1
    d426:	9202      	str	r2, [sp, #8]
    d428:	222e      	movs	r2, #46	; 0x2e
    d42a:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
    d42c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d42e:	2b00      	cmp	r3, #0
    d430:	d105      	bne.n	d43e <ftoa+0x146>
    {
        *pcBuf++ = '0';
    d432:	9b02      	ldr	r3, [sp, #8]
    d434:	1c5a      	adds	r2, r3, #1
    d436:	9202      	str	r2, [sp, #8]
    d438:	2230      	movs	r2, #48	; 0x30
    d43a:	701a      	strb	r2, [r3, #0]
    d43c:	e04f      	b.n	d4de <ftoa+0x1e6>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    d43e:	9a02      	ldr	r2, [sp, #8]
    d440:	9b08      	ldr	r3, [sp, #32]
    d442:	1ad3      	subs	r3, r2, r3
    d444:	9a09      	ldr	r2, [sp, #36]	; 0x24
    d446:	1ad3      	subs	r3, r2, r3
    d448:	3b01      	subs	r3, #1
    d44a:	9305      	str	r3, [sp, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    d44c:	9a05      	ldr	r2, [sp, #20]
    d44e:	9b01      	ldr	r3, [sp, #4]
    d450:	4293      	cmp	r3, r2
    d452:	bfa8      	it	ge
    d454:	4613      	movge	r3, r2
    d456:	9305      	str	r3, [sp, #20]

        for (jx = 0; jx < iMax; jx++)
    d458:	2300      	movs	r3, #0
    d45a:	930a      	str	r3, [sp, #40]	; 0x28
    d45c:	e015      	b.n	d48a <ftoa+0x192>
        {
            i32FracPart *= 10;
    d45e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d460:	4613      	mov	r3, r2
    d462:	009b      	lsls	r3, r3, #2
    d464:	4413      	add	r3, r2
    d466:	005b      	lsls	r3, r3, #1
    d468:	930c      	str	r3, [sp, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
    d46a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d46c:	161b      	asrs	r3, r3, #24
    d46e:	b2da      	uxtb	r2, r3
    d470:	9b02      	ldr	r3, [sp, #8]
    d472:	1c59      	adds	r1, r3, #1
    d474:	9102      	str	r1, [sp, #8]
    d476:	3230      	adds	r2, #48	; 0x30
    d478:	b2d2      	uxtb	r2, r2
    d47a:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
    d47c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d47e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    d482:	930c      	str	r3, [sp, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
    d484:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d486:	3301      	adds	r3, #1
    d488:	930a      	str	r3, [sp, #40]	; 0x28
    d48a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    d48c:	9b05      	ldr	r3, [sp, #20]
    d48e:	429a      	cmp	r2, r3
    d490:	dbe5      	blt.n	d45e <ftoa+0x166>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    d492:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d494:	4613      	mov	r3, r2
    d496:	009b      	lsls	r3, r3, #2
    d498:	4413      	add	r3, r2
    d49a:	005b      	lsls	r3, r3, #1
    d49c:	161b      	asrs	r3, r3, #24
    d49e:	2b04      	cmp	r3, #4
    d4a0:	dd1d      	ble.n	d4de <ftoa+0x1e6>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
    d4a2:	9b02      	ldr	r3, [sp, #8]
    d4a4:	3b01      	subs	r3, #1
    d4a6:	930b      	str	r3, [sp, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    d4a8:	e015      	b.n	d4d6 <ftoa+0x1de>
            {
                if ( *pcBuftmp == '.' )
    d4aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d4ac:	781b      	ldrb	r3, [r3, #0]
    d4ae:	2b2e      	cmp	r3, #46	; 0x2e
    d4b0:	d00e      	beq.n	d4d0 <ftoa+0x1d8>
                {
                }
                else if ( *pcBuftmp == '9' )
    d4b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d4b4:	781b      	ldrb	r3, [r3, #0]
    d4b6:	2b39      	cmp	r3, #57	; 0x39
    d4b8:	d103      	bne.n	d4c2 <ftoa+0x1ca>
                {
                    *pcBuftmp = '0';
    d4ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d4bc:	2230      	movs	r2, #48	; 0x30
    d4be:	701a      	strb	r2, [r3, #0]
    d4c0:	e006      	b.n	d4d0 <ftoa+0x1d8>
                }
                else
                {
                    *pcBuftmp += 1;
    d4c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d4c4:	781b      	ldrb	r3, [r3, #0]
    d4c6:	3301      	adds	r3, #1
    d4c8:	b2da      	uxtb	r2, r3
    d4ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d4cc:	701a      	strb	r2, [r3, #0]
                    break;
    d4ce:	e006      	b.n	d4de <ftoa+0x1e6>
                }
                pcBuftmp--;
    d4d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d4d2:	3b01      	subs	r3, #1
    d4d4:	930b      	str	r3, [sp, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    d4d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    d4d8:	9b08      	ldr	r3, [sp, #32]
    d4da:	429a      	cmp	r2, r3
    d4dc:	d2e5      	bcs.n	d4aa <ftoa+0x1b2>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
    d4de:	9b02      	ldr	r3, [sp, #8]
    d4e0:	2200      	movs	r2, #0
    d4e2:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
    d4e4:	9a02      	ldr	r2, [sp, #8]
    d4e6:	9b08      	ldr	r3, [sp, #32]
    d4e8:	1ad3      	subs	r3, r2, r3
} // ftoa()
    d4ea:	4618      	mov	r0, r3
    d4ec:	b00f      	add	sp, #60	; 0x3c
    d4ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d4f0:	00302e30 	.word	0x00302e30

0000d4f4 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    d4f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d4f8:	b097      	sub	sp, #92	; 0x5c
    d4fa:	9003      	str	r0, [sp, #12]
    d4fc:	9102      	str	r1, [sp, #8]
    d4fe:	9201      	str	r2, [sp, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
    d500:	2300      	movs	r3, #0
    d502:	9311      	str	r3, [sp, #68]	; 0x44
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
    d504:	2300      	movs	r3, #0
    d506:	930b      	str	r3, [sp, #44]	; 0x2c

    while ( *pcFmt != 0x0 )
    d508:	e2e9      	b.n	dade <am_util_stdio_vsprintf+0x5ea>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
    d50a:	2306      	movs	r3, #6
    d50c:	930e      	str	r3, [sp, #56]	; 0x38

        if ( *pcFmt != '%' )
    d50e:	9b02      	ldr	r3, [sp, #8]
    d510:	781b      	ldrb	r3, [r3, #0]
    d512:	2b25      	cmp	r3, #37	; 0x25
    d514:	d01f      	beq.n	d556 <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    d516:	9b03      	ldr	r3, [sp, #12]
    d518:	2b00      	cmp	r3, #0
    d51a:	d015      	beq.n	d548 <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    d51c:	9b02      	ldr	r3, [sp, #8]
    d51e:	781b      	ldrb	r3, [r3, #0]
    d520:	2b0a      	cmp	r3, #10
    d522:	d10b      	bne.n	d53c <am_util_stdio_vsprintf+0x48>
    d524:	4ba8      	ldr	r3, [pc, #672]	; (d7c8 <am_util_stdio_vsprintf+0x2d4>)
    d526:	781b      	ldrb	r3, [r3, #0]
    d528:	2b00      	cmp	r3, #0
    d52a:	d007      	beq.n	d53c <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
    d52c:	9b03      	ldr	r3, [sp, #12]
    d52e:	1c5a      	adds	r2, r3, #1
    d530:	9203      	str	r2, [sp, #12]
    d532:	220d      	movs	r2, #13
    d534:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
    d536:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d538:	3301      	adds	r3, #1
    d53a:	9311      	str	r3, [sp, #68]	; 0x44
                }
                *pcBuf++ = *pcFmt;
    d53c:	9b03      	ldr	r3, [sp, #12]
    d53e:	1c5a      	adds	r2, r3, #1
    d540:	9203      	str	r2, [sp, #12]
    d542:	9a02      	ldr	r2, [sp, #8]
    d544:	7812      	ldrb	r2, [r2, #0]
    d546:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
    d548:	9b02      	ldr	r3, [sp, #8]
    d54a:	3301      	adds	r3, #1
    d54c:	9302      	str	r3, [sp, #8]
            ++ui32CharCnt;
    d54e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d550:	3301      	adds	r3, #1
    d552:	9311      	str	r3, [sp, #68]	; 0x44
            continue;
    d554:	e2c3      	b.n	dade <am_util_stdio_vsprintf+0x5ea>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
    d556:	9b02      	ldr	r3, [sp, #8]
    d558:	3301      	adds	r3, #1
    d55a:	9302      	str	r3, [sp, #8]
        bLower = bLongLong = false;
    d55c:	2300      	movs	r3, #0
    d55e:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
    d562:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    d566:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
    d56a:	2320      	movs	r3, #32
    d56c:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37

        if ( *pcFmt == '0' )
    d570:	9b02      	ldr	r3, [sp, #8]
    d572:	781b      	ldrb	r3, [r3, #0]
    d574:	2b30      	cmp	r3, #48	; 0x30
    d576:	d105      	bne.n	d584 <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
    d578:	2330      	movs	r3, #48	; 0x30
    d57a:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
            ++pcFmt;
    d57e:	9b02      	ldr	r3, [sp, #8]
    d580:	3301      	adds	r3, #1
    d582:	9302      	str	r3, [sp, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    d584:	ab05      	add	r3, sp, #20
    d586:	4619      	mov	r1, r3
    d588:	9802      	ldr	r0, [sp, #8]
    d58a:	f7ff fd93 	bl	d0b4 <decstr_to_int>
    d58e:	4603      	mov	r3, r0
    d590:	9310      	str	r3, [sp, #64]	; 0x40
        pcFmt += ui32NumChars;
    d592:	9b05      	ldr	r3, [sp, #20]
    d594:	9a02      	ldr	r2, [sp, #8]
    d596:	4413      	add	r3, r2
    d598:	9302      	str	r3, [sp, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    d59a:	9b02      	ldr	r3, [sp, #8]
    d59c:	781b      	ldrb	r3, [r3, #0]
    d59e:	2b73      	cmp	r3, #115	; 0x73
    d5a0:	d005      	beq.n	d5ae <am_util_stdio_vsprintf+0xba>
    d5a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d5a4:	2b00      	cmp	r3, #0
    d5a6:	da02      	bge.n	d5ae <am_util_stdio_vsprintf+0xba>
        {
            iWidth = -iWidth;
    d5a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d5aa:	425b      	negs	r3, r3
    d5ac:	9310      	str	r3, [sp, #64]	; 0x40
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
    d5ae:	9b02      	ldr	r3, [sp, #8]
    d5b0:	781b      	ldrb	r3, [r3, #0]
    d5b2:	2b2e      	cmp	r3, #46	; 0x2e
    d5b4:	d10d      	bne.n	d5d2 <am_util_stdio_vsprintf+0xde>
        {
            ++pcFmt;
    d5b6:	9b02      	ldr	r3, [sp, #8]
    d5b8:	3301      	adds	r3, #1
    d5ba:	9302      	str	r3, [sp, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
    d5bc:	ab05      	add	r3, sp, #20
    d5be:	4619      	mov	r1, r3
    d5c0:	9802      	ldr	r0, [sp, #8]
    d5c2:	f7ff fd77 	bl	d0b4 <decstr_to_int>
    d5c6:	4603      	mov	r3, r0
    d5c8:	930e      	str	r3, [sp, #56]	; 0x38
            pcFmt += ui32NumChars;
    d5ca:	9b05      	ldr	r3, [sp, #20]
    d5cc:	9a02      	ldr	r2, [sp, #8]
    d5ce:	4413      	add	r3, r2
    d5d0:	9302      	str	r3, [sp, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
    d5d2:	9b02      	ldr	r3, [sp, #8]
    d5d4:	781b      	ldrb	r3, [r3, #0]
    d5d6:	2b6c      	cmp	r3, #108	; 0x6c
    d5d8:	d10c      	bne.n	d5f4 <am_util_stdio_vsprintf+0x100>
        {
            pcFmt++;
    d5da:	9b02      	ldr	r3, [sp, #8]
    d5dc:	3301      	adds	r3, #1
    d5de:	9302      	str	r3, [sp, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
    d5e0:	9b02      	ldr	r3, [sp, #8]
    d5e2:	781b      	ldrb	r3, [r3, #0]
    d5e4:	2b6c      	cmp	r3, #108	; 0x6c
    d5e6:	d105      	bne.n	d5f4 <am_util_stdio_vsprintf+0x100>
            {
                pcFmt++;
    d5e8:	9b02      	ldr	r3, [sp, #8]
    d5ea:	3301      	adds	r3, #1
    d5ec:	9302      	str	r3, [sp, #8]
                bLongLong = true;
    d5ee:	2301      	movs	r3, #1
    d5f0:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
            }
        }

        switch ( *pcFmt )
    d5f4:	9b02      	ldr	r3, [sp, #8]
    d5f6:	781b      	ldrb	r3, [r3, #0]
    d5f8:	3b46      	subs	r3, #70	; 0x46
    d5fa:	2b32      	cmp	r3, #50	; 0x32
    d5fc:	f200 825c 	bhi.w	dab8 <am_util_stdio_vsprintf+0x5c4>
    d600:	a201      	add	r2, pc, #4	; (adr r2, d608 <am_util_stdio_vsprintf+0x114>)
    d602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    d606:	bf00      	nop
    d608:	0000da3f 	.word	0x0000da3f
    d60c:	0000dab9 	.word	0x0000dab9
    d610:	0000dab9 	.word	0x0000dab9
    d614:	0000dab9 	.word	0x0000dab9
    d618:	0000dab9 	.word	0x0000dab9
    d61c:	0000dab9 	.word	0x0000dab9
    d620:	0000dab9 	.word	0x0000dab9
    d624:	0000dab9 	.word	0x0000dab9
    d628:	0000dab9 	.word	0x0000dab9
    d62c:	0000dab9 	.word	0x0000dab9
    d630:	0000dab9 	.word	0x0000dab9
    d634:	0000dab9 	.word	0x0000dab9
    d638:	0000dab9 	.word	0x0000dab9
    d63c:	0000dab9 	.word	0x0000dab9
    d640:	0000dab9 	.word	0x0000dab9
    d644:	0000dab9 	.word	0x0000dab9
    d648:	0000dab9 	.word	0x0000dab9
    d64c:	0000dab9 	.word	0x0000dab9
    d650:	0000d7d3 	.word	0x0000d7d3
    d654:	0000dab9 	.word	0x0000dab9
    d658:	0000dab9 	.word	0x0000dab9
    d65c:	0000dab9 	.word	0x0000dab9
    d660:	0000dab9 	.word	0x0000dab9
    d664:	0000dab9 	.word	0x0000dab9
    d668:	0000dab9 	.word	0x0000dab9
    d66c:	0000dab9 	.word	0x0000dab9
    d670:	0000dab9 	.word	0x0000dab9
    d674:	0000dab9 	.word	0x0000dab9
    d678:	0000dab9 	.word	0x0000dab9
    d67c:	0000d6d5 	.word	0x0000d6d5
    d680:	0000d903 	.word	0x0000d903
    d684:	0000dab9 	.word	0x0000dab9
    d688:	0000da3f 	.word	0x0000da3f
    d68c:	0000dab9 	.word	0x0000dab9
    d690:	0000dab9 	.word	0x0000dab9
    d694:	0000d903 	.word	0x0000d903
    d698:	0000dab9 	.word	0x0000dab9
    d69c:	0000dab9 	.word	0x0000dab9
    d6a0:	0000dab9 	.word	0x0000dab9
    d6a4:	0000dab9 	.word	0x0000dab9
    d6a8:	0000dab9 	.word	0x0000dab9
    d6ac:	0000dab9 	.word	0x0000dab9
    d6b0:	0000dab9 	.word	0x0000dab9
    d6b4:	0000dab9 	.word	0x0000dab9
    d6b8:	0000dab9 	.word	0x0000dab9
    d6bc:	0000d6fb 	.word	0x0000d6fb
    d6c0:	0000dab9 	.word	0x0000dab9
    d6c4:	0000d86d 	.word	0x0000d86d
    d6c8:	0000dab9 	.word	0x0000dab9
    d6cc:	0000dab9 	.word	0x0000dab9
    d6d0:	0000d7cd 	.word	0x0000d7cd
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    d6d4:	9b01      	ldr	r3, [sp, #4]
    d6d6:	1d1a      	adds	r2, r3, #4
    d6d8:	9201      	str	r2, [sp, #4]
    d6da:	681b      	ldr	r3, [r3, #0]
    d6dc:	f88d 301f 	strb.w	r3, [sp, #31]

                if ( pcBuf )
    d6e0:	9b03      	ldr	r3, [sp, #12]
    d6e2:	2b00      	cmp	r3, #0
    d6e4:	d005      	beq.n	d6f2 <am_util_stdio_vsprintf+0x1fe>
                {
                    *pcBuf++ = ui8CharSpecifier;
    d6e6:	9b03      	ldr	r3, [sp, #12]
    d6e8:	1c5a      	adds	r2, r3, #1
    d6ea:	9203      	str	r2, [sp, #12]
    d6ec:	f89d 201f 	ldrb.w	r2, [sp, #31]
    d6f0:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    d6f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d6f4:	3301      	adds	r3, #1
    d6f6:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d6f8:	e1ee      	b.n	dad8 <am_util_stdio_vsprintf+0x5e4>

            case 's':
                pcStr = va_arg(pArgs, char *);
    d6fa:	9b01      	ldr	r3, [sp, #4]
    d6fc:	1d1a      	adds	r2, r3, #4
    d6fe:	9201      	str	r2, [sp, #4]
    d700:	681b      	ldr	r3, [r3, #0]
    d702:	9315      	str	r3, [sp, #84]	; 0x54
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
    d704:	9815      	ldr	r0, [sp, #84]	; 0x54
    d706:	f7ff fdbe 	bl	d286 <simple_strlen>
    d70a:	900b      	str	r0, [sp, #44]	; 0x2c
                if ( iWidth > 0 )
    d70c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d70e:	2b00      	cmp	r3, #0
    d710:	dd2e      	ble.n	d770 <am_util_stdio_vsprintf+0x27c>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
    d712:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d714:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    d716:	429a      	cmp	r2, r3
    d718:	d22a      	bcs.n	d770 <am_util_stdio_vsprintf+0x27c>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    d71a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d71c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d71e:	1ad3      	subs	r3, r2, r3
    d720:	9310      	str	r3, [sp, #64]	; 0x40
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d722:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d726:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d728:	4619      	mov	r1, r3
    d72a:	9803      	ldr	r0, [sp, #12]
    d72c:	f7ff fdc1 	bl	d2b2 <padbuffer>
    d730:	9010      	str	r0, [sp, #64]	; 0x40
                        pcBuf += pcBuf ? iWidth : 0;
    d732:	9b03      	ldr	r3, [sp, #12]
    d734:	2b00      	cmp	r3, #0
    d736:	d001      	beq.n	d73c <am_util_stdio_vsprintf+0x248>
    d738:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d73a:	e000      	b.n	d73e <am_util_stdio_vsprintf+0x24a>
    d73c:	2300      	movs	r3, #0
    d73e:	9a03      	ldr	r2, [sp, #12]
    d740:	4413      	add	r3, r2
    d742:	9303      	str	r3, [sp, #12]
                        ui32CharCnt += iWidth;
    d744:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d746:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d748:	4413      	add	r3, r2
    d74a:	9311      	str	r3, [sp, #68]	; 0x44
                        iWidth = 0;
    d74c:	2300      	movs	r3, #0
    d74e:	9310      	str	r3, [sp, #64]	; 0x40
                    }
                }

                while (*pcStr != 0x0)
    d750:	e00e      	b.n	d770 <am_util_stdio_vsprintf+0x27c>
                {
                    if ( pcBuf )
    d752:	9b03      	ldr	r3, [sp, #12]
    d754:	2b00      	cmp	r3, #0
    d756:	d005      	beq.n	d764 <am_util_stdio_vsprintf+0x270>
                    {
                        *pcBuf++ = *pcStr;
    d758:	9b03      	ldr	r3, [sp, #12]
    d75a:	1c5a      	adds	r2, r3, #1
    d75c:	9203      	str	r2, [sp, #12]
    d75e:	9a15      	ldr	r2, [sp, #84]	; 0x54
    d760:	7812      	ldrb	r2, [r2, #0]
    d762:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
    d764:	9b15      	ldr	r3, [sp, #84]	; 0x54
    d766:	3301      	adds	r3, #1
    d768:	9315      	str	r3, [sp, #84]	; 0x54
                    ++ui32CharCnt;
    d76a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d76c:	3301      	adds	r3, #1
    d76e:	9311      	str	r3, [sp, #68]	; 0x44
                while (*pcStr != 0x0)
    d770:	9b15      	ldr	r3, [sp, #84]	; 0x54
    d772:	781b      	ldrb	r3, [r3, #0]
    d774:	2b00      	cmp	r3, #0
    d776:	d1ec      	bne.n	d752 <am_util_stdio_vsprintf+0x25e>
                }

                if ( iWidth )
    d778:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d77a:	2b00      	cmp	r3, #0
    d77c:	f000 81a9 	beq.w	dad2 <am_util_stdio_vsprintf+0x5de>
                {
                    iWidth = -iWidth;
    d780:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d782:	425b      	negs	r3, r3
    d784:	9310      	str	r3, [sp, #64]	; 0x40

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
    d786:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d788:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    d78a:	429a      	cmp	r2, r3
    d78c:	f080 81a1 	bcs.w	dad2 <am_util_stdio_vsprintf+0x5de>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    d790:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d792:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d794:	1ad3      	subs	r3, r2, r3
    d796:	9310      	str	r3, [sp, #64]	; 0x40
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d798:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d79c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d79e:	4619      	mov	r1, r3
    d7a0:	9803      	ldr	r0, [sp, #12]
    d7a2:	f7ff fd86 	bl	d2b2 <padbuffer>
    d7a6:	9010      	str	r0, [sp, #64]	; 0x40
                        pcBuf += pcBuf ? iWidth : 0;
    d7a8:	9b03      	ldr	r3, [sp, #12]
    d7aa:	2b00      	cmp	r3, #0
    d7ac:	d001      	beq.n	d7b2 <am_util_stdio_vsprintf+0x2be>
    d7ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d7b0:	e000      	b.n	d7b4 <am_util_stdio_vsprintf+0x2c0>
    d7b2:	2300      	movs	r3, #0
    d7b4:	9a03      	ldr	r2, [sp, #12]
    d7b6:	4413      	add	r3, r2
    d7b8:	9303      	str	r3, [sp, #12]
                        ui32CharCnt += iWidth;
    d7ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d7bc:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d7be:	4413      	add	r3, r2
    d7c0:	9311      	str	r3, [sp, #68]	; 0x44
                        iWidth = 0;
    d7c2:	2300      	movs	r3, #0
    d7c4:	9310      	str	r3, [sp, #64]	; 0x40
                    }
                }
                break;
    d7c6:	e184      	b.n	dad2 <am_util_stdio_vsprintf+0x5de>
    d7c8:	10003310 	.word	0x10003310

            case 'x':
                bLower = true;
    d7cc:	2301      	movs	r3, #1
    d7ce:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d7d2:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    d7d6:	2b00      	cmp	r3, #0
    d7d8:	d009      	beq.n	d7ee <am_util_stdio_vsprintf+0x2fa>
    d7da:	9b01      	ldr	r3, [sp, #4]
    d7dc:	3307      	adds	r3, #7
    d7de:	f023 0307 	bic.w	r3, r3, #7
    d7e2:	f103 0208 	add.w	r2, r3, #8
    d7e6:	9201      	str	r2, [sp, #4]
    d7e8:	e9d3 4500 	ldrd	r4, r5, [r3]
    d7ec:	e006      	b.n	d7fc <am_util_stdio_vsprintf+0x308>
                                      va_arg(pArgs, uint32_t);
    d7ee:	9b01      	ldr	r3, [sp, #4]
    d7f0:	1d1a      	adds	r2, r3, #4
    d7f2:	9201      	str	r2, [sp, #4]
    d7f4:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d7f6:	2200      	movs	r2, #0
    d7f8:	461c      	mov	r4, r3
    d7fa:	4615      	mov	r5, r2
    d7fc:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48

                if ( iWidth )
    d800:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d802:	2b00      	cmp	r3, #0
    d804:	d01e      	beq.n	d844 <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
    d806:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d80a:	f7ff fc2f 	bl	d06c <ndigits_in_hex>
    d80e:	4602      	mov	r2, r0
    d810:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d812:	1a9b      	subs	r3, r3, r2
    d814:	9310      	str	r3, [sp, #64]	; 0x40

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d816:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d81a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d81c:	4619      	mov	r1, r3
    d81e:	9803      	ldr	r0, [sp, #12]
    d820:	f7ff fd47 	bl	d2b2 <padbuffer>
    d824:	9010      	str	r0, [sp, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    d826:	9b03      	ldr	r3, [sp, #12]
    d828:	2b00      	cmp	r3, #0
    d82a:	d001      	beq.n	d830 <am_util_stdio_vsprintf+0x33c>
    d82c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d82e:	e000      	b.n	d832 <am_util_stdio_vsprintf+0x33e>
    d830:	2300      	movs	r3, #0
    d832:	9a03      	ldr	r2, [sp, #12]
    d834:	4413      	add	r3, r2
    d836:	9303      	str	r3, [sp, #12]
                    ui32CharCnt += iWidth;
    d838:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d83a:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d83c:	4413      	add	r3, r2
    d83e:	9311      	str	r3, [sp, #68]	; 0x44
                    iWidth = 0;
    d840:	2300      	movs	r3, #0
    d842:	9310      	str	r3, [sp, #64]	; 0x40
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    d844:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
    d848:	9a03      	ldr	r2, [sp, #12]
    d84a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d84e:	f7ff fcba 	bl	d1c6 <uint64_to_hexstr>
    d852:	900f      	str	r0, [sp, #60]	; 0x3c

                if ( pcBuf )
    d854:	9b03      	ldr	r3, [sp, #12]
    d856:	2b00      	cmp	r3, #0
    d858:	d003      	beq.n	d862 <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
    d85a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d85c:	9a03      	ldr	r2, [sp, #12]
    d85e:	4413      	add	r3, r2
    d860:	9303      	str	r3, [sp, #12]
                }

                ui32CharCnt += iVal;
    d862:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d864:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d866:	4413      	add	r3, r2
    d868:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d86a:	e135      	b.n	dad8 <am_util_stdio_vsprintf+0x5e4>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d86c:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    d870:	2b00      	cmp	r3, #0
    d872:	d009      	beq.n	d888 <am_util_stdio_vsprintf+0x394>
    d874:	9b01      	ldr	r3, [sp, #4]
    d876:	3307      	adds	r3, #7
    d878:	f023 0307 	bic.w	r3, r3, #7
    d87c:	f103 0208 	add.w	r2, r3, #8
    d880:	9201      	str	r2, [sp, #4]
    d882:	e9d3 6700 	ldrd	r6, r7, [r3]
    d886:	e006      	b.n	d896 <am_util_stdio_vsprintf+0x3a2>
                                      va_arg(pArgs, uint32_t);
    d888:	9b01      	ldr	r3, [sp, #4]
    d88a:	1d1a      	adds	r2, r3, #4
    d88c:	9201      	str	r2, [sp, #4]
    d88e:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d890:	2200      	movs	r2, #0
    d892:	461e      	mov	r6, r3
    d894:	4617      	mov	r7, r2
    d896:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48

                if ( iWidth )
    d89a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d89c:	2b00      	cmp	r3, #0
    d89e:	d01e      	beq.n	d8de <am_util_stdio_vsprintf+0x3ea>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    d8a0:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d8a4:	f7ff fba8 	bl	cff8 <ndigits_in_u64>
    d8a8:	4602      	mov	r2, r0
    d8aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d8ac:	1a9b      	subs	r3, r3, r2
    d8ae:	9310      	str	r3, [sp, #64]	; 0x40

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d8b0:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d8b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d8b6:	4619      	mov	r1, r3
    d8b8:	9803      	ldr	r0, [sp, #12]
    d8ba:	f7ff fcfa 	bl	d2b2 <padbuffer>
    d8be:	9010      	str	r0, [sp, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    d8c0:	9b03      	ldr	r3, [sp, #12]
    d8c2:	2b00      	cmp	r3, #0
    d8c4:	d001      	beq.n	d8ca <am_util_stdio_vsprintf+0x3d6>
    d8c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d8c8:	e000      	b.n	d8cc <am_util_stdio_vsprintf+0x3d8>
    d8ca:	2300      	movs	r3, #0
    d8cc:	9a03      	ldr	r2, [sp, #12]
    d8ce:	4413      	add	r3, r2
    d8d0:	9303      	str	r3, [sp, #12]
                    ui32CharCnt += iWidth;
    d8d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d8d4:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d8d6:	4413      	add	r3, r2
    d8d8:	9311      	str	r3, [sp, #68]	; 0x44
                    iWidth = 0;
    d8da:	2300      	movs	r3, #0
    d8dc:	9310      	str	r3, [sp, #64]	; 0x40
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    d8de:	9a03      	ldr	r2, [sp, #12]
    d8e0:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d8e4:	f7ff fc2a 	bl	d13c <uint64_to_str>
    d8e8:	900f      	str	r0, [sp, #60]	; 0x3c

                if ( pcBuf )
    d8ea:	9b03      	ldr	r3, [sp, #12]
    d8ec:	2b00      	cmp	r3, #0
    d8ee:	d003      	beq.n	d8f8 <am_util_stdio_vsprintf+0x404>
                {
                    pcBuf += iVal;
    d8f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d8f2:	9a03      	ldr	r2, [sp, #12]
    d8f4:	4413      	add	r3, r2
    d8f6:	9303      	str	r3, [sp, #12]
                }

                ui32CharCnt += iVal;
    d8f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d8fa:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d8fc:	4413      	add	r3, r2
    d8fe:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d900:	e0ea      	b.n	dad8 <am_util_stdio_vsprintf+0x5e4>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    d902:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    d906:	2b00      	cmp	r3, #0
    d908:	d009      	beq.n	d91e <am_util_stdio_vsprintf+0x42a>
    d90a:	9b01      	ldr	r3, [sp, #4]
    d90c:	3307      	adds	r3, #7
    d90e:	f023 0307 	bic.w	r3, r3, #7
    d912:	f103 0208 	add.w	r2, r3, #8
    d916:	9201      	str	r2, [sp, #4]
    d918:	e9d3 8900 	ldrd	r8, r9, [r3]
    d91c:	e006      	b.n	d92c <am_util_stdio_vsprintf+0x438>
                                     va_arg(pArgs, int32_t);
    d91e:	9b01      	ldr	r3, [sp, #4]
    d920:	1d1a      	adds	r2, r3, #4
    d922:	9201      	str	r2, [sp, #4]
    d924:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    d926:	17da      	asrs	r2, r3, #31
    d928:	4698      	mov	r8, r3
    d92a:	4691      	mov	r9, r2
    d92c:	e9cd 8908 	strd	r8, r9, [sp, #32]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    d930:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    d934:	2b00      	cmp	r3, #0
    d936:	da0c      	bge.n	d952 <am_util_stdio_vsprintf+0x45e>
                {
                    ui64Val = -i64Val;          // Get absolute value
    d938:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    d93c:	2100      	movs	r1, #0
    d93e:	f1d2 0a00 	rsbs	sl, r2, #0
    d942:	eb61 0b03 	sbc.w	fp, r1, r3
    d946:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
                    bNeg = true;
    d94a:	2301      	movs	r3, #1
    d94c:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
    d950:	e006      	b.n	d960 <am_util_stdio_vsprintf+0x46c>
                }
                else
                {
                    ui64Val = i64Val;
    d952:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    d956:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
                    bNeg = false;
    d95a:	2300      	movs	r3, #0
    d95c:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
                }

                if ( iWidth )
    d960:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d962:	2b00      	cmp	r3, #0
    d964:	d04a      	beq.n	d9fc <am_util_stdio_vsprintf+0x508>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    d966:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    d96a:	4610      	mov	r0, r2
    d96c:	4619      	mov	r1, r3
    d96e:	f7ff fb63 	bl	d038 <ndigits_in_i64>
    d972:	4602      	mov	r2, r0
    d974:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d976:	1a9b      	subs	r3, r3, r2
    d978:	9310      	str	r3, [sp, #64]	; 0x40

                    if ( bNeg )
    d97a:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    d97e:	2b00      	cmp	r3, #0
    d980:	d011      	beq.n	d9a6 <am_util_stdio_vsprintf+0x4b2>
                    {
                        --iWidth;
    d982:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d984:	3b01      	subs	r3, #1
    d986:	9310      	str	r3, [sp, #64]	; 0x40

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    d988:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d98c:	2b30      	cmp	r3, #48	; 0x30
    d98e:	d10a      	bne.n	d9a6 <am_util_stdio_vsprintf+0x4b2>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    d990:	9b03      	ldr	r3, [sp, #12]
    d992:	2b00      	cmp	r3, #0
    d994:	d004      	beq.n	d9a0 <am_util_stdio_vsprintf+0x4ac>
                            {
                                *pcBuf++ = '-';
    d996:	9b03      	ldr	r3, [sp, #12]
    d998:	1c5a      	adds	r2, r3, #1
    d99a:	9203      	str	r2, [sp, #12]
    d99c:	222d      	movs	r2, #45	; 0x2d
    d99e:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    d9a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d9a2:	3301      	adds	r3, #1
    d9a4:	9311      	str	r3, [sp, #68]	; 0x44
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d9a6:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d9aa:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d9ac:	4619      	mov	r1, r3
    d9ae:	9803      	ldr	r0, [sp, #12]
    d9b0:	f7ff fc7f 	bl	d2b2 <padbuffer>
    d9b4:	9010      	str	r0, [sp, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    d9b6:	9b03      	ldr	r3, [sp, #12]
    d9b8:	2b00      	cmp	r3, #0
    d9ba:	d001      	beq.n	d9c0 <am_util_stdio_vsprintf+0x4cc>
    d9bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d9be:	e000      	b.n	d9c2 <am_util_stdio_vsprintf+0x4ce>
    d9c0:	2300      	movs	r3, #0
    d9c2:	9a03      	ldr	r2, [sp, #12]
    d9c4:	4413      	add	r3, r2
    d9c6:	9303      	str	r3, [sp, #12]
                    ui32CharCnt += iWidth;
    d9c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d9ca:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d9cc:	4413      	add	r3, r2
    d9ce:	9311      	str	r3, [sp, #68]	; 0x44
                    iWidth = 0;
    d9d0:	2300      	movs	r3, #0
    d9d2:	9310      	str	r3, [sp, #64]	; 0x40

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    d9d4:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    d9d8:	2b00      	cmp	r3, #0
    d9da:	d01e      	beq.n	da1a <am_util_stdio_vsprintf+0x526>
    d9dc:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d9e0:	2b20      	cmp	r3, #32
    d9e2:	d11a      	bne.n	da1a <am_util_stdio_vsprintf+0x526>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    d9e4:	9b03      	ldr	r3, [sp, #12]
    d9e6:	2b00      	cmp	r3, #0
    d9e8:	d004      	beq.n	d9f4 <am_util_stdio_vsprintf+0x500>
                        {
                            *pcBuf++ = '-';
    d9ea:	9b03      	ldr	r3, [sp, #12]
    d9ec:	1c5a      	adds	r2, r3, #1
    d9ee:	9203      	str	r2, [sp, #12]
    d9f0:	222d      	movs	r2, #45	; 0x2d
    d9f2:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    d9f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d9f6:	3301      	adds	r3, #1
    d9f8:	9311      	str	r3, [sp, #68]	; 0x44
    d9fa:	e00e      	b.n	da1a <am_util_stdio_vsprintf+0x526>
                    }
                }
                else
                {
                    if ( bNeg )
    d9fc:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    da00:	2b00      	cmp	r3, #0
    da02:	d00a      	beq.n	da1a <am_util_stdio_vsprintf+0x526>
                    {
                        if ( pcBuf )
    da04:	9b03      	ldr	r3, [sp, #12]
    da06:	2b00      	cmp	r3, #0
    da08:	d004      	beq.n	da14 <am_util_stdio_vsprintf+0x520>
                        {
                            *pcBuf++ = '-';
    da0a:	9b03      	ldr	r3, [sp, #12]
    da0c:	1c5a      	adds	r2, r3, #1
    da0e:	9203      	str	r2, [sp, #12]
    da10:	222d      	movs	r2, #45	; 0x2d
    da12:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    da14:	9b11      	ldr	r3, [sp, #68]	; 0x44
    da16:	3301      	adds	r3, #1
    da18:	9311      	str	r3, [sp, #68]	; 0x44
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    da1a:	9a03      	ldr	r2, [sp, #12]
    da1c:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    da20:	f7ff fb8c 	bl	d13c <uint64_to_str>
    da24:	900f      	str	r0, [sp, #60]	; 0x3c

                if ( pcBuf )
    da26:	9b03      	ldr	r3, [sp, #12]
    da28:	2b00      	cmp	r3, #0
    da2a:	d003      	beq.n	da34 <am_util_stdio_vsprintf+0x540>
                {
                    pcBuf += iVal;
    da2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    da2e:	9a03      	ldr	r2, [sp, #12]
    da30:	4413      	add	r3, r2
    da32:	9303      	str	r3, [sp, #12]
                }

                ui32CharCnt += iVal;
    da34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    da36:	9a11      	ldr	r2, [sp, #68]	; 0x44
    da38:	4413      	add	r3, r2
    da3a:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    da3c:	e04c      	b.n	dad8 <am_util_stdio_vsprintf+0x5e4>


            case 'f':
            case 'F':
                if ( pcBuf )
    da3e:	9b03      	ldr	r3, [sp, #12]
    da40:	2b00      	cmp	r3, #0
    da42:	d048      	beq.n	dad6 <am_util_stdio_vsprintf+0x5e2>
                {
                    float fValue = va_arg(pArgs, double);
    da44:	9b01      	ldr	r3, [sp, #4]
    da46:	3307      	adds	r3, #7
    da48:	f023 0307 	bic.w	r3, r3, #7
    da4c:	f103 0208 	add.w	r2, r3, #8
    da50:	9201      	str	r2, [sp, #4]
    da52:	e9d3 2300 	ldrd	r2, r3, [r3]
    da56:	4610      	mov	r0, r2
    da58:	4619      	mov	r1, r3
    da5a:	f7fe fb51 	bl	c100 <__aeabi_d2f>
    da5e:	4603      	mov	r3, r0
    da60:	9306      	str	r3, [sp, #24]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    da62:	9b03      	ldr	r3, [sp, #12]
    da64:	2214      	movs	r2, #20
    da66:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    da68:	990e      	ldr	r1, [sp, #56]	; 0x38
    da6a:	9803      	ldr	r0, [sp, #12]
    da6c:	ed9d 0a06 	vldr	s0, [sp, #24]
    da70:	f7ff fc42 	bl	d2f8 <ftoa>
    da74:	900f      	str	r0, [sp, #60]	; 0x3c
                    if ( iVal < 0 )
    da76:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    da78:	2b00      	cmp	r3, #0
    da7a:	da14      	bge.n	daa6 <am_util_stdio_vsprintf+0x5b2>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    da7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    da7e:	f1b3 3fff 	cmp.w	r3, #4294967295
    da82:	d102      	bne.n	da8a <am_util_stdio_vsprintf+0x596>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    da84:	4b1e      	ldr	r3, [pc, #120]	; (db00 <am_util_stdio_vsprintf+0x60c>)
    da86:	930c      	str	r3, [sp, #48]	; 0x30
    da88:	e008      	b.n	da9c <am_util_stdio_vsprintf+0x5a8>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    da8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    da8c:	f113 0f02 	cmn.w	r3, #2
    da90:	d102      	bne.n	da98 <am_util_stdio_vsprintf+0x5a4>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    da92:	4b1c      	ldr	r3, [pc, #112]	; (db04 <am_util_stdio_vsprintf+0x610>)
    da94:	930c      	str	r3, [sp, #48]	; 0x30
    da96:	e001      	b.n	da9c <am_util_stdio_vsprintf+0x5a8>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    da98:	4b1b      	ldr	r3, [pc, #108]	; (db08 <am_util_stdio_vsprintf+0x614>)
    da9a:	930c      	str	r3, [sp, #48]	; 0x30
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    da9c:	9b03      	ldr	r3, [sp, #12]
    da9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    daa0:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    daa2:	2303      	movs	r3, #3
    daa4:	930f      	str	r3, [sp, #60]	; 0x3c
                    }
                    ui32CharCnt += iVal;
    daa6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    daa8:	9a11      	ldr	r2, [sp, #68]	; 0x44
    daaa:	4413      	add	r3, r2
    daac:	9311      	str	r3, [sp, #68]	; 0x44
                    pcBuf += iVal;
    daae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    dab0:	9a03      	ldr	r2, [sp, #12]
    dab2:	4413      	add	r3, r2
    dab4:	9303      	str	r3, [sp, #12]
                }
                break;
    dab6:	e00e      	b.n	dad6 <am_util_stdio_vsprintf+0x5e2>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    dab8:	9b03      	ldr	r3, [sp, #12]
    daba:	2b00      	cmp	r3, #0
    dabc:	d005      	beq.n	daca <am_util_stdio_vsprintf+0x5d6>
                {
                    *pcBuf++ = *pcFmt;
    dabe:	9b03      	ldr	r3, [sp, #12]
    dac0:	1c5a      	adds	r2, r3, #1
    dac2:	9203      	str	r2, [sp, #12]
    dac4:	9a02      	ldr	r2, [sp, #8]
    dac6:	7812      	ldrb	r2, [r2, #0]
    dac8:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    daca:	9b11      	ldr	r3, [sp, #68]	; 0x44
    dacc:	3301      	adds	r3, #1
    dace:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    dad0:	e002      	b.n	dad8 <am_util_stdio_vsprintf+0x5e4>
                break;
    dad2:	bf00      	nop
    dad4:	e000      	b.n	dad8 <am_util_stdio_vsprintf+0x5e4>
                break;
    dad6:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    dad8:	9b02      	ldr	r3, [sp, #8]
    dada:	3301      	adds	r3, #1
    dadc:	9302      	str	r3, [sp, #8]
    while ( *pcFmt != 0x0 )
    dade:	9b02      	ldr	r3, [sp, #8]
    dae0:	781b      	ldrb	r3, [r3, #0]
    dae2:	2b00      	cmp	r3, #0
    dae4:	f47f ad11 	bne.w	d50a <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    dae8:	9b03      	ldr	r3, [sp, #12]
    daea:	2b00      	cmp	r3, #0
    daec:	d002      	beq.n	daf4 <am_util_stdio_vsprintf+0x600>
    {
        *pcBuf = 0x0;
    daee:	9b03      	ldr	r3, [sp, #12]
    daf0:	2200      	movs	r2, #0
    daf2:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    daf4:	9b11      	ldr	r3, [sp, #68]	; 0x44
}
    daf6:	4618      	mov	r0, r3
    daf8:	b017      	add	sp, #92	; 0x5c
    dafa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dafe:	bf00      	nop
    db00:	00302e30 	.word	0x00302e30
    db04:	00232e23 	.word	0x00232e23
    db08:	003f2e3f 	.word	0x003f2e3f

0000db0c <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    db0c:	b40f      	push	{r0, r1, r2, r3}
    db0e:	b500      	push	{lr}
    db10:	b083      	sub	sp, #12
    uint32_t ui32NumChars;

    if (!g_pfnCharPrint)
    db12:	4b0c      	ldr	r3, [pc, #48]	; (db44 <am_util_stdio_printf+0x38>)
    db14:	681b      	ldr	r3, [r3, #0]
    db16:	2b00      	cmp	r3, #0
    db18:	d101      	bne.n	db1e <am_util_stdio_printf+0x12>
    {
        return 0;
    db1a:	2300      	movs	r3, #0
    db1c:	e00c      	b.n	db38 <am_util_stdio_printf+0x2c>

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    db1e:	ab05      	add	r3, sp, #20
    db20:	9300      	str	r3, [sp, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    db22:	9a00      	ldr	r2, [sp, #0]
    db24:	9904      	ldr	r1, [sp, #16]
    db26:	4808      	ldr	r0, [pc, #32]	; (db48 <am_util_stdio_printf+0x3c>)
    db28:	f7ff fce4 	bl	d4f4 <am_util_stdio_vsprintf>
    db2c:	9001      	str	r0, [sp, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    db2e:	4b05      	ldr	r3, [pc, #20]	; (db44 <am_util_stdio_printf+0x38>)
    db30:	681b      	ldr	r3, [r3, #0]
    db32:	4805      	ldr	r0, [pc, #20]	; (db48 <am_util_stdio_printf+0x3c>)
    db34:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    db36:	9b01      	ldr	r3, [sp, #4]
}
    db38:	4618      	mov	r0, r3
    db3a:	b003      	add	sp, #12
    db3c:	f85d eb04 	ldr.w	lr, [sp], #4
    db40:	b004      	add	sp, #16
    db42:	4770      	bx	lr
    db44:	1000320c 	.word	0x1000320c
    db48:	10003210 	.word	0x10003210

0000db4c <Reset_Handler>:
Reset_Handler(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
    db4c:	4811      	ldr	r0, [pc, #68]	; (db94 <zero_loop+0x12>)
    db4e:	4912      	ldr	r1, [pc, #72]	; (db98 <zero_loop+0x16>)
    db50:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
    db52:	f8d1 d000 	ldr.w	sp, [r1]

#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
    db56:	4811      	ldr	r0, [pc, #68]	; (db9c <zero_loop+0x1a>)
    db58:	6801      	ldr	r1, [r0, #0]
    db5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    db5e:	6001      	str	r1, [r0, #0]
    db60:	f3bf 8f4f 	dsb	sy
    db64:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
    db68:	480d      	ldr	r0, [pc, #52]	; (dba0 <zero_loop+0x1e>)
    db6a:	490e      	ldr	r1, [pc, #56]	; (dba4 <zero_loop+0x22>)
    db6c:	4a0e      	ldr	r2, [pc, #56]	; (dba8 <zero_loop+0x26>)

0000db6e <copy_loop>:
    db6e:	f850 3b04 	ldr.w	r3, [r0], #4
    db72:	f841 3b04 	str.w	r3, [r1], #4
    db76:	4291      	cmp	r1, r2
    db78:	dbf9      	blt.n	db6e <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
    db7a:	480c      	ldr	r0, [pc, #48]	; (dbac <zero_loop+0x2a>)
    db7c:	490c      	ldr	r1, [pc, #48]	; (dbb0 <zero_loop+0x2e>)
    db7e:	f04f 0200 	mov.w	r2, #0

0000db82 <zero_loop>:
    db82:	4288      	cmp	r0, r1
    db84:	bfb8      	it	lt
    db86:	f840 2b04 	strlt.w	r2, [r0], #4
    db8a:	dbfa      	blt.n	db82 <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
    db8c:	f7fe fd68 	bl	c660 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
    db90:	be00      	bkpt	0x0000
}
    db92:	bf00      	nop
    db94:	e000ed08 	.word	0xe000ed08
    db98:	0000c000 	.word	0x0000c000
    db9c:	e000ed88 	.word	0xe000ed88
    dba0:	00012890 	.word	0x00012890
    dba4:	10001000 	.word	0x10001000
    dba8:	100021f8 	.word	0x100021f8
    dbac:	100021f8 	.word	0x100021f8
    dbb0:	100034b0 	.word	0x100034b0

0000dbb4 <NMI_Handler>:
NMI_Handler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    dbb4:	e7fe      	b.n	dbb4 <NMI_Handler>

0000dbb6 <BusFault_Handler>:
HardFault_Handler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    dbb6:	e7fe      	b.n	dbb6 <BusFault_Handler>

0000dbb8 <DebugMon_Handler>:
am_default_isr(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    dbb8:	e7fe      	b.n	dbb8 <DebugMon_Handler>
	...

0000dbbc <am_bsp_low_power_init>:
    dbbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dbbe:	f001 fe45 	bl	f84c <am_hal_pwrctrl_low_power_init>
    dbc2:	f001 ff21 	bl	fa08 <am_hal_rtc_osc_disable>
    dbc6:	4b0b      	ldr	r3, [pc, #44]	; (dbf4 <am_bsp_low_power_init+0x38>)
    dbc8:	4f0b      	ldr	r7, [pc, #44]	; (dbf8 <am_bsp_low_power_init+0x3c>)
    dbca:	681e      	ldr	r6, [r3, #0]
    dbcc:	2400      	movs	r4, #0
    dbce:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
    dbd2:	4631      	mov	r1, r6
    dbd4:	4628      	mov	r0, r5
    dbd6:	f001 fb85 	bl	f2e4 <am_hal_gpio_pinconfig>
    dbda:	2103      	movs	r1, #3
    dbdc:	4628      	mov	r0, r5
    dbde:	f001 fcb7 	bl	f550 <am_hal_gpio_state_write>
    dbe2:	3401      	adds	r4, #1
    dbe4:	2100      	movs	r1, #0
    dbe6:	4628      	mov	r0, r5
    dbe8:	f001 fcb2 	bl	f550 <am_hal_gpio_state_write>
    dbec:	2c05      	cmp	r4, #5
    dbee:	d1ee      	bne.n	dbce <am_bsp_low_power_init+0x12>
    dbf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    dbf2:	bf00      	nop
    dbf4:	000125e4 	.word	0x000125e4
    dbf8:	10001000 	.word	0x10001000

0000dbfc <am_bsp_itm_printf_enable>:
    dbfc:	b500      	push	{lr}
    dbfe:	4b0b      	ldr	r3, [pc, #44]	; (dc2c <am_bsp_itm_printf_enable+0x30>)
    dc00:	b087      	sub	sp, #28
    dc02:	2201      	movs	r2, #1
    dc04:	601a      	str	r2, [r3, #0]
    dc06:	f001 fcf3 	bl	f5f0 <am_hal_itm_enable>
    dc0a:	4b09      	ldr	r3, [pc, #36]	; (dc30 <am_bsp_itm_printf_enable+0x34>)
    dc0c:	9301      	str	r3, [sp, #4]
    dc0e:	a801      	add	r0, sp, #4
    dc10:	f001 ff04 	bl	fa1c <am_hal_tpiu_enable>
    dc14:	4b07      	ldr	r3, [pc, #28]	; (dc34 <am_bsp_itm_printf_enable+0x38>)
    dc16:	2029      	movs	r0, #41	; 0x29
    dc18:	6819      	ldr	r1, [r3, #0]
    dc1a:	f001 fb63 	bl	f2e4 <am_hal_gpio_pinconfig>
    dc1e:	4806      	ldr	r0, [pc, #24]	; (dc38 <am_bsp_itm_printf_enable+0x3c>)
    dc20:	f7ff f8ec 	bl	cdfc <am_util_stdio_printf_init>
    dc24:	b007      	add	sp, #28
    dc26:	f85d fb04 	ldr.w	pc, [sp], #4
    dc2a:	bf00      	nop
    dc2c:	10003314 	.word	0x10003314
    dc30:	000f4240 	.word	0x000f4240
    dc34:	00010954 	.word	0x00010954
    dc38:	0000f639 	.word	0x0000f639

0000dc3c <am_hal_ble_blocking_transfer.part.0>:
    dc3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dc40:	4dbc      	ldr	r5, [pc, #752]	; (df34 <am_hal_ble_blocking_transfer.part.0+0x2f8>)
    dc42:	f8d5 8220 	ldr.w	r8, [r5, #544]	; 0x220
    dc46:	f8d5 3220 	ldr.w	r3, [r5, #544]	; 0x220
    dc4a:	f36f 13c7 	bfc	r3, #7, #1
    dc4e:	f8c5 3220 	str.w	r3, [r5, #544]	; 0x220
    dc52:	f8d5 3220 	ldr.w	r3, [r5, #544]	; 0x220
    dc56:	f36f 2308 	bfc	r3, #8, #1
    dc5a:	f8c5 3220 	str.w	r3, [r5, #544]	; 0x220
    dc5e:	f8d5 3220 	ldr.w	r3, [r5, #544]	; 0x220
    dc62:	f36f 0300 	bfc	r3, #0, #1
    dc66:	f8c5 3220 	str.w	r3, [r5, #544]	; 0x220
    dc6a:	f8d5 3220 	ldr.w	r3, [r5, #544]	; 0x220
    dc6e:	f36f 0341 	bfc	r3, #1, #1
    dc72:	f8c5 3220 	str.w	r3, [r5, #544]	; 0x220
    dc76:	f8d5 3228 	ldr.w	r3, [r5, #552]	; 0x228
    dc7a:	f043 0301 	orr.w	r3, r3, #1
    dc7e:	f8c5 3228 	str.w	r3, [r5, #552]	; 0x228
    dc82:	f8d5 3228 	ldr.w	r3, [r5, #552]	; 0x228
    dc86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    dc8a:	f8c5 3228 	str.w	r3, [r5, #552]	; 0x228
    dc8e:	7a8b      	ldrb	r3, [r1, #10]
    dc90:	2b01      	cmp	r3, #1
    dc92:	b085      	sub	sp, #20
    dc94:	460e      	mov	r6, r1
    dc96:	4604      	mov	r4, r0
    dc98:	d03c      	beq.n	dd14 <am_hal_ble_blocking_transfer.part.0+0xd8>
    dc9a:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
    dc9e:	061a      	lsls	r2, r3, #24
    dca0:	d532      	bpl.n	dd08 <am_hal_ble_blocking_transfer.part.0+0xcc>
    dca2:	f001 fc9d 	bl	f5e0 <am_hal_interrupt_master_disable>
    dca6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    dcaa:	9003      	str	r0, [sp, #12]
    dcac:	9803      	ldr	r0, [sp, #12]
    dcae:	2b00      	cmp	r3, #0
    dcb0:	d151      	bne.n	dd56 <am_hal_ble_blocking_transfer.part.0+0x11a>
    dcb2:	2301      	movs	r3, #1
    dcb4:	6463      	str	r3, [r4, #68]	; 0x44
    dcb6:	f001 fc97 	bl	f5e8 <am_hal_interrupt_master_set>
    dcba:	7b33      	ldrb	r3, [r6, #12]
    dcbc:	b113      	cbz	r3, dcc4 <am_hal_ble_blocking_transfer.part.0+0x88>
    dcbe:	2301      	movs	r3, #1
    dcc0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    dcc4:	6833      	ldr	r3, [r6, #0]
    dcc6:	6872      	ldr	r2, [r6, #4]
    dcc8:	68b1      	ldr	r1, [r6, #8]
    dcca:	68f0      	ldr	r0, [r6, #12]
    dccc:	61a0      	str	r0, [r4, #24]
    dcce:	60e3      	str	r3, [r4, #12]
    dcd0:	6122      	str	r2, [r4, #16]
    dcd2:	6161      	str	r1, [r4, #20]
    dcd4:	6933      	ldr	r3, [r6, #16]
    dcd6:	6972      	ldr	r2, [r6, #20]
    dcd8:	6222      	str	r2, [r4, #32]
    dcda:	61e3      	str	r3, [r4, #28]
    dcdc:	f001 fc80 	bl	f5e0 <am_hal_interrupt_master_disable>
    dce0:	6823      	ldr	r3, [r4, #0]
    dce2:	4a95      	ldr	r2, [pc, #596]	; (df38 <am_hal_ble_blocking_transfer.part.0+0x2fc>)
    dce4:	9001      	str	r0, [sp, #4]
    dce6:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    dcea:	4293      	cmp	r3, r2
    dcec:	f104 070c 	add.w	r7, r4, #12
    dcf0:	f040 8156 	bne.w	dfa0 <am_hal_ble_blocking_transfer.part.0+0x364>
    dcf4:	79f2      	ldrb	r2, [r6, #7]
    dcf6:	2a03      	cmp	r2, #3
    dcf8:	f200 8152 	bhi.w	dfa0 <am_hal_ble_blocking_transfer.part.0+0x364>
    dcfc:	e8df f012 	tbh	[pc, r2, lsl #1]
    dd00:	01040071 	.word	0x01040071
    dd04:	010900ff 	.word	0x010900ff
    dd08:	488c      	ldr	r0, [pc, #560]	; (df3c <am_hal_ble_blocking_transfer.part.0+0x300>)
    dd0a:	f8c5 8220 	str.w	r8, [r5, #544]	; 0x220
    dd0e:	b005      	add	sp, #20
    dd10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dd14:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
    dd18:	b333      	cbz	r3, dd68 <am_hal_ble_blocking_transfer.part.0+0x12c>
    dd1a:	f890 5040 	ldrb.w	r5, [r0, #64]	; 0x40
    dd1e:	2d00      	cmp	r5, #0
    dd20:	f000 81c4 	beq.w	e0ac <am_hal_ble_blocking_transfer.part.0+0x470>
    dd24:	2300      	movs	r3, #0
    dd26:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
    dd2a:	4f82      	ldr	r7, [pc, #520]	; (df34 <am_hal_ble_blocking_transfer.part.0+0x2f8>)
    dd2c:	f240 152d 	movw	r5, #301	; 0x12d
    dd30:	f04f 0900 	mov.w	r9, #0
    dd34:	e008      	b.n	dd48 <am_hal_ble_blocking_transfer.part.0+0x10c>
    dd36:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
    dd3a:	071b      	lsls	r3, r3, #28
    dd3c:	d518      	bpl.n	dd70 <am_hal_ble_blocking_transfer.part.0+0x134>
    dd3e:	20a0      	movs	r0, #160	; 0xa0
    dd40:	f001 fa80 	bl	f244 <am_hal_flash_delay>
    dd44:	3d01      	subs	r5, #1
    dd46:	d013      	beq.n	dd70 <am_hal_ble_blocking_transfer.part.0+0x134>
    dd48:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    dd4c:	2b00      	cmp	r3, #0
    dd4e:	d0f2      	beq.n	dd36 <am_hal_ble_blocking_transfer.part.0+0xfa>
    dd50:	f884 9041 	strb.w	r9, [r4, #65]	; 0x41
    dd54:	e7f3      	b.n	dd3e <am_hal_ble_blocking_transfer.part.0+0x102>
    dd56:	f001 fc47 	bl	f5e8 <am_hal_interrupt_master_set>
    dd5a:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    dd5e:	f8c5 8220 	str.w	r8, [r5, #544]	; 0x220
    dd62:	b005      	add	sp, #20
    dd64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dd68:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
    dd6c:	2b00      	cmp	r3, #0
    dd6e:	d1dc      	bne.n	dd2a <am_hal_ble_blocking_transfer.part.0+0xee>
    dd70:	4d70      	ldr	r5, [pc, #448]	; (df34 <am_hal_ble_blocking_transfer.part.0+0x2f8>)
    dd72:	f8d5 3410 	ldr.w	r3, [r5, #1040]	; 0x410
    dd76:	f043 0302 	orr.w	r3, r3, #2
    dd7a:	f8c5 3410 	str.w	r3, [r5, #1040]	; 0x410
    dd7e:	2050      	movs	r0, #80	; 0x50
    dd80:	f001 fa60 	bl	f244 <am_hal_flash_delay>
    dd84:	6823      	ldr	r3, [r4, #0]
    dd86:	4a6c      	ldr	r2, [pc, #432]	; (df38 <am_hal_ble_blocking_transfer.part.0+0x2fc>)
    dd88:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    dd8c:	4293      	cmp	r3, r2
    dd8e:	d105      	bne.n	dd9c <am_hal_ble_blocking_transfer.part.0+0x160>
    dd90:	f8b5 3304 	ldrh.w	r3, [r5, #772]	; 0x304
    dd94:	f043 030c 	orr.w	r3, r3, #12
    dd98:	f8a5 3304 	strh.w	r3, [r5, #772]	; 0x304
    dd9c:	2500      	movs	r5, #0
    dd9e:	4f65      	ldr	r7, [pc, #404]	; (df34 <am_hal_ble_blocking_transfer.part.0+0x2f8>)
    dda0:	46a9      	mov	r9, r5
    dda2:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    dda6:	2b00      	cmp	r3, #0
    dda8:	f040 80ba 	bne.w	df20 <am_hal_ble_blocking_transfer.part.0+0x2e4>
    ddac:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
    ddb0:	0718      	lsls	r0, r3, #28
    ddb2:	f140 80c7 	bpl.w	df44 <am_hal_ble_blocking_transfer.part.0+0x308>
    ddb6:	f001 fc13 	bl	f5e0 <am_hal_interrupt_master_disable>
    ddba:	f894 a044 	ldrb.w	sl, [r4, #68]	; 0x44
    ddbe:	9002      	str	r0, [sp, #8]
    ddc0:	9802      	ldr	r0, [sp, #8]
    ddc2:	f1ba 0f00 	cmp.w	sl, #0
    ddc6:	f040 80ae 	bne.w	df26 <am_hal_ble_blocking_transfer.part.0+0x2ea>
    ddca:	2301      	movs	r3, #1
    ddcc:	6463      	str	r3, [r4, #68]	; 0x44
    ddce:	f001 fc0b 	bl	f5e8 <am_hal_interrupt_master_set>
    ddd2:	4b58      	ldr	r3, [pc, #352]	; (df34 <am_hal_ble_blocking_transfer.part.0+0x2f8>)
    ddd4:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
    ddd8:	f36a 0241 	bfi	r2, sl, #1, #1
    dddc:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
    dde0:	e76b      	b.n	dcba <am_hal_ble_blocking_transfer.part.0+0x7e>
    dde2:	2500      	movs	r5, #0
    dde4:	46a9      	mov	r9, r5
    dde6:	f896 e00a 	ldrb.w	lr, [r6, #10]
    ddea:	f896 c00c 	ldrb.w	ip, [r6, #12]
    ddee:	8930      	ldrh	r0, [r6, #8]
    ddf0:	4b53      	ldr	r3, [pc, #332]	; (df40 <am_hal_ble_blocking_transfer.part.0+0x304>)
    ddf2:	0151      	lsls	r1, r2, #5
    ddf4:	ea03 2a00 	and.w	sl, r3, r0, lsl #8
    ddf8:	f001 0b60 	and.w	fp, r1, #96	; 0x60
    ddfc:	ea4e 13cc 	orr.w	r3, lr, ip, lsl #7
    de00:	ea43 030b 	orr.w	r3, r3, fp
    de04:	ea43 030a 	orr.w	r3, r3, sl
    de08:	ea43 0309 	orr.w	r3, r3, r9
    de0c:	f8df 9124 	ldr.w	r9, [pc, #292]	; df34 <am_hal_ble_blocking_transfer.part.0+0x2f8>
    de10:	f1be 0f01 	cmp.w	lr, #1
    de14:	f8c9 5214 	str.w	r5, [r9, #532]	; 0x214
    de18:	f8c9 320c 	str.w	r3, [r9, #524]	; 0x20c
    de1c:	f000 8131 	beq.w	e082 <am_hal_ble_blocking_transfer.part.0+0x446>
    de20:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    de22:	f8b4 c014 	ldrh.w	ip, [r4, #20]
    de26:	f8df e110 	ldr.w	lr, [pc, #272]	; df38 <am_hal_ble_blocking_transfer.part.0+0x2fc>
    de2a:	4a42      	ldr	r2, [pc, #264]	; (df34 <am_hal_ble_blocking_transfer.part.0+0x2f8>)
    de2c:	2500      	movs	r5, #0
    de2e:	459c      	cmp	ip, r3
    de30:	d924      	bls.n	de7c <am_hal_ble_blocking_transfer.part.0+0x240>
    de32:	6821      	ldr	r1, [r4, #0]
    de34:	f021 417e 	bic.w	r1, r1, #4261412864	; 0xfe000000
    de38:	4571      	cmp	r1, lr
    de3a:	d1fd      	bne.n	de38 <am_hal_ble_blocking_transfer.part.0+0x1fc>
    de3c:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
    de40:	f3c1 4107 	ubfx	r1, r1, #16, #8
    de44:	2903      	cmp	r1, #3
    de46:	d9f2      	bls.n	de2e <am_hal_ble_blocking_transfer.part.0+0x1f2>
    de48:	4561      	cmp	r1, ip
    de4a:	f080 80a3 	bcs.w	df94 <am_hal_ble_blocking_transfer.part.0+0x358>
    de4e:	68e0      	ldr	r0, [r4, #12]
    de50:	f021 0103 	bic.w	r1, r1, #3
    de54:	f023 0303 	bic.w	r3, r3, #3
    de58:	eb00 0903 	add.w	r9, r0, r3
    de5c:	464b      	mov	r3, r9
    de5e:	f8d2 0108 	ldr.w	r0, [r2, #264]	; 0x108
    de62:	f843 0b04 	str.w	r0, [r3], #4
    de66:	eba3 0009 	sub.w	r0, r3, r9
    de6a:	4288      	cmp	r0, r1
    de6c:	f8c2 5108 	str.w	r5, [r2, #264]	; 0x108
    de70:	d3f5      	bcc.n	de5e <am_hal_ble_blocking_transfer.part.0+0x222>
    de72:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    de74:	440b      	add	r3, r1
    de76:	459c      	cmp	ip, r3
    de78:	63e3      	str	r3, [r4, #60]	; 0x3c
    de7a:	d8da      	bhi.n	de32 <am_hal_ble_blocking_transfer.part.0+0x1f6>
    de7c:	f8df 90b4 	ldr.w	r9, [pc, #180]	; df34 <am_hal_ble_blocking_transfer.part.0+0x2f8>
    de80:	9801      	ldr	r0, [sp, #4]
    de82:	f001 fbb1 	bl	f5e8 <am_hal_interrupt_master_set>
    de86:	f8d9 3224 	ldr.w	r3, [r9, #548]	; 0x224
    de8a:	07da      	lsls	r2, r3, #31
    de8c:	bf58      	it	pl
    de8e:	f242 7510 	movwpl	r5, #10000	; 0x2710
    de92:	d503      	bpl.n	de9c <am_hal_ble_blocking_transfer.part.0+0x260>
    de94:	e009      	b.n	deaa <am_hal_ble_blocking_transfer.part.0+0x26e>
    de96:	3d01      	subs	r5, #1
    de98:	f000 80fc 	beq.w	e094 <am_hal_ble_blocking_transfer.part.0+0x458>
    de9c:	2010      	movs	r0, #16
    de9e:	f001 f9d1 	bl	f244 <am_hal_flash_delay>
    dea2:	f8d9 3224 	ldr.w	r3, [r9, #548]	; 0x224
    dea6:	07db      	lsls	r3, r3, #31
    dea8:	d5f5      	bpl.n	de96 <am_hal_ble_blocking_transfer.part.0+0x25a>
    deaa:	4a22      	ldr	r2, [pc, #136]	; (df34 <am_hal_ble_blocking_transfer.part.0+0x2f8>)
    deac:	f8d2 1228 	ldr.w	r1, [r2, #552]	; 0x228
    deb0:	f041 0101 	orr.w	r1, r1, #1
    deb4:	f8c2 1228 	str.w	r1, [r2, #552]	; 0x228
    deb8:	f8d2 1228 	ldr.w	r1, [r2, #552]	; 0x228
    debc:	2300      	movs	r3, #0
    debe:	f041 0102 	orr.w	r1, r1, #2
    dec2:	f8c2 1228 	str.w	r1, [r2, #552]	; 0x228
    dec6:	60e3      	str	r3, [r4, #12]
    dec8:	607b      	str	r3, [r7, #4]
    deca:	60bb      	str	r3, [r7, #8]
    decc:	60fb      	str	r3, [r7, #12]
    dece:	613b      	str	r3, [r7, #16]
    ded0:	617b      	str	r3, [r7, #20]
    ded2:	63e3      	str	r3, [r4, #60]	; 0x3c
    ded4:	7ab1      	ldrb	r1, [r6, #10]
    ded6:	2901      	cmp	r1, #1
    ded8:	f000 80c2 	beq.w	e060 <am_hal_ble_blocking_transfer.part.0+0x424>
    dedc:	2902      	cmp	r1, #2
    dede:	d104      	bne.n	deea <am_hal_ble_blocking_transfer.part.0+0x2ae>
    dee0:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
    dee4:	b10a      	cbz	r2, deea <am_hal_ble_blocking_transfer.part.0+0x2ae>
    dee6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    deea:	2300      	movs	r3, #0
    deec:	4a11      	ldr	r2, [pc, #68]	; (df34 <am_hal_ble_blocking_transfer.part.0+0x2f8>)
    deee:	4618      	mov	r0, r3
    def0:	f8c2 8220 	str.w	r8, [r2, #544]	; 0x220
    def4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    def8:	b005      	add	sp, #20
    defa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    defe:	7973      	ldrb	r3, [r6, #5]
    df00:	7935      	ldrb	r5, [r6, #4]
    df02:	ea4f 6903 	mov.w	r9, r3, lsl #24
    df06:	e76e      	b.n	dde6 <am_hal_ble_blocking_transfer.part.0+0x1aa>
    df08:	7933      	ldrb	r3, [r6, #4]
    df0a:	2500      	movs	r5, #0
    df0c:	ea4f 6903 	mov.w	r9, r3, lsl #24
    df10:	e769      	b.n	dde6 <am_hal_ble_blocking_transfer.part.0+0x1aa>
    df12:	88b5      	ldrh	r5, [r6, #4]
    df14:	79b3      	ldrb	r3, [r6, #6]
    df16:	ba6d      	rev16	r5, r5
    df18:	b2ad      	uxth	r5, r5
    df1a:	ea4f 6903 	mov.w	r9, r3, lsl #24
    df1e:	e762      	b.n	dde6 <am_hal_ble_blocking_transfer.part.0+0x1aa>
    df20:	f884 9041 	strb.w	r9, [r4, #65]	; 0x41
    df24:	e747      	b.n	ddb6 <am_hal_ble_blocking_transfer.part.0+0x17a>
    df26:	f001 fb5f 	bl	f5e8 <am_hal_interrupt_master_set>
    df2a:	20a0      	movs	r0, #160	; 0xa0
    df2c:	3501      	adds	r5, #1
    df2e:	f001 f989 	bl	f244 <am_hal_flash_delay>
    df32:	e736      	b.n	dda2 <am_hal_ble_blocking_transfer.part.0+0x166>
    df34:	5000c000 	.word	0x5000c000
    df38:	01775230 	.word	0x01775230
    df3c:	08000001 	.word	0x08000001
    df40:	000fff00 	.word	0x000fff00
    df44:	f5b5 7f96 	cmp.w	r5, #300	; 0x12c
    df48:	d203      	bcs.n	df52 <am_hal_ble_blocking_transfer.part.0+0x316>
    df4a:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
    df4e:	0619      	lsls	r1, r3, #24
    df50:	d5eb      	bpl.n	df2a <am_hal_ble_blocking_transfer.part.0+0x2ee>
    df52:	6823      	ldr	r3, [r4, #0]
    df54:	4a6a      	ldr	r2, [pc, #424]	; (e100 <am_hal_ble_blocking_transfer.part.0+0x4c4>)
    df56:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    df5a:	4293      	cmp	r3, r2
    df5c:	4b69      	ldr	r3, [pc, #420]	; (e104 <am_hal_ble_blocking_transfer.part.0+0x4c8>)
    df5e:	f040 809b 	bne.w	e098 <am_hal_ble_blocking_transfer.part.0+0x45c>
    df62:	f8b3 2304 	ldrh.w	r2, [r3, #772]	; 0x304
    df66:	4868      	ldr	r0, [pc, #416]	; (e108 <am_hal_ble_blocking_transfer.part.0+0x4cc>)
    df68:	2102      	movs	r1, #2
    df6a:	f361 0283 	bfi	r2, r1, #2, #2
    df6e:	f8a3 2304 	strh.w	r2, [r3, #772]	; 0x304
    df72:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
    df76:	f36f 0241 	bfc	r2, #1, #1
    df7a:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
    df7e:	f8c3 8220 	str.w	r8, [r3, #544]	; 0x220
    df82:	f8b3 2304 	ldrh.w	r2, [r3, #772]	; 0x304
    df86:	f361 0283 	bfi	r2, r1, #2, #2
    df8a:	f8a3 2304 	strh.w	r2, [r3, #772]	; 0x304
    df8e:	b005      	add	sp, #20
    df90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    df94:	ebac 0103 	sub.w	r1, ip, r3
    df98:	68e0      	ldr	r0, [r4, #12]
    df9a:	f023 0303 	bic.w	r3, r3, #3
    df9e:	e75b      	b.n	de58 <am_hal_ble_blocking_transfer.part.0+0x21c>
    dfa0:	7ab3      	ldrb	r3, [r6, #10]
    dfa2:	2b01      	cmp	r3, #1
    dfa4:	f47f af3c 	bne.w	de20 <am_hal_ble_blocking_transfer.part.0+0x1e4>
    dfa8:	f8b4 9014 	ldrh.w	r9, [r4, #20]
    dfac:	68e5      	ldr	r5, [r4, #12]
    dfae:	f8df b154 	ldr.w	fp, [pc, #340]	; e104 <am_hal_ble_blocking_transfer.part.0+0x4c8>
    dfb2:	f1b9 0f00 	cmp.w	r9, #0
    dfb6:	d019      	beq.n	dfec <am_hal_ble_blocking_transfer.part.0+0x3b0>
    dfb8:	f8db 3100 	ldr.w	r3, [fp, #256]	; 0x100
    dfbc:	f3c3 2307 	ubfx	r3, r3, #8, #8
    dfc0:	2b03      	cmp	r3, #3
    dfc2:	d835      	bhi.n	e030 <am_hal_ble_blocking_transfer.part.0+0x3f4>
    dfc4:	f8df a14c 	ldr.w	sl, [pc, #332]	; e114 <am_hal_ble_blocking_transfer.part.0+0x4d8>
    dfc8:	e00a      	b.n	dfe0 <am_hal_ble_blocking_transfer.part.0+0x3a4>
    dfca:	f1ba 0a01 	subs.w	sl, sl, #1
    dfce:	d00d      	beq.n	dfec <am_hal_ble_blocking_transfer.part.0+0x3b0>
    dfd0:	f001 f938 	bl	f244 <am_hal_flash_delay>
    dfd4:	f8db 3100 	ldr.w	r3, [fp, #256]	; 0x100
    dfd8:	f3c3 2307 	ubfx	r3, r3, #8, #8
    dfdc:	2b03      	cmp	r3, #3
    dfde:	d827      	bhi.n	e030 <am_hal_ble_blocking_transfer.part.0+0x3f4>
    dfe0:	f8db 3224 	ldr.w	r3, [fp, #548]	; 0x224
    dfe4:	07db      	lsls	r3, r3, #31
    dfe6:	f04f 0010 	mov.w	r0, #16
    dfea:	d5ee      	bpl.n	dfca <am_hal_ble_blocking_transfer.part.0+0x38e>
    dfec:	f8df 9114 	ldr.w	r9, [pc, #276]	; e104 <am_hal_ble_blocking_transfer.part.0+0x4c8>
    dff0:	f8d9 3224 	ldr.w	r3, [r9, #548]	; 0x224
    dff4:	07d8      	lsls	r0, r3, #31
    dff6:	bf58      	it	pl
    dff8:	f44f 65fa 	movpl.w	r5, #2000	; 0x7d0
    dffc:	d408      	bmi.n	e010 <am_hal_ble_blocking_transfer.part.0+0x3d4>
    dffe:	2010      	movs	r0, #16
    e000:	f001 f920 	bl	f244 <am_hal_flash_delay>
    e004:	f8d9 3224 	ldr.w	r3, [r9, #548]	; 0x224
    e008:	07d9      	lsls	r1, r3, #31
    e00a:	d401      	bmi.n	e010 <am_hal_ble_blocking_transfer.part.0+0x3d4>
    e00c:	3d01      	subs	r5, #1
    e00e:	d1f6      	bne.n	dffe <am_hal_ble_blocking_transfer.part.0+0x3c2>
    e010:	6823      	ldr	r3, [r4, #0]
    e012:	4a3b      	ldr	r2, [pc, #236]	; (e100 <am_hal_ble_blocking_transfer.part.0+0x4c4>)
    e014:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e018:	4293      	cmp	r3, r2
    e01a:	f47f af2f 	bne.w	de7c <am_hal_ble_blocking_transfer.part.0+0x240>
    e01e:	4b39      	ldr	r3, [pc, #228]	; (e104 <am_hal_ble_blocking_transfer.part.0+0x4c8>)
    e020:	f8b3 2304 	ldrh.w	r2, [r3, #772]	; 0x304
    e024:	2102      	movs	r1, #2
    e026:	f361 0283 	bfi	r2, r1, #2, #2
    e02a:	f8a3 2304 	strh.w	r2, [r3, #772]	; 0x304
    e02e:	e725      	b.n	de7c <am_hal_ble_blocking_transfer.part.0+0x240>
    e030:	f009 0003 	and.w	r0, r9, #3
    e034:	462a      	mov	r2, r5
    e036:	f852 1b04 	ldr.w	r1, [r2], #4
    e03a:	f8cb 110c 	str.w	r1, [fp, #268]	; 0x10c
    e03e:	4581      	cmp	r9, r0
    e040:	eba5 0102 	sub.w	r1, r5, r2
    e044:	4419      	add	r1, r3
    e046:	f1a9 0904 	sub.w	r9, r9, #4
    e04a:	d005      	beq.n	e058 <am_hal_ble_blocking_transfer.part.0+0x41c>
    e04c:	2903      	cmp	r1, #3
    e04e:	d905      	bls.n	e05c <am_hal_ble_blocking_transfer.part.0+0x420>
    e050:	f1b9 0f00 	cmp.w	r9, #0
    e054:	d1ef      	bne.n	e036 <am_hal_ble_blocking_transfer.part.0+0x3fa>
    e056:	e7c9      	b.n	dfec <am_hal_ble_blocking_transfer.part.0+0x3b0>
    e058:	f04f 0900 	mov.w	r9, #0
    e05c:	4615      	mov	r5, r2
    e05e:	e7a8      	b.n	dfb2 <am_hal_ble_blocking_transfer.part.0+0x376>
    e060:	6823      	ldr	r3, [r4, #0]
    e062:	4927      	ldr	r1, [pc, #156]	; (e100 <am_hal_ble_blocking_transfer.part.0+0x4c4>)
    e064:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e068:	428b      	cmp	r3, r1
    e06a:	d106      	bne.n	e07a <am_hal_ble_blocking_transfer.part.0+0x43e>
    e06c:	f8b2 3304 	ldrh.w	r3, [r2, #772]	; 0x304
    e070:	2102      	movs	r1, #2
    e072:	f361 0383 	bfi	r3, r1, #2, #2
    e076:	f8a2 3304 	strh.w	r3, [r2, #772]	; 0x304
    e07a:	2301      	movs	r3, #1
    e07c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    e080:	e733      	b.n	deea <am_hal_ble_blocking_transfer.part.0+0x2ae>
    e082:	f8b4 9014 	ldrh.w	r9, [r4, #20]
    e086:	68e5      	ldr	r5, [r4, #12]
    e088:	2a03      	cmp	r2, #3
    e08a:	d890      	bhi.n	dfae <am_hal_ble_blocking_transfer.part.0+0x372>
    e08c:	e8df f002 	tbb	[pc, r2]
    e090:	2a303417 	.word	0x2a303417
    e094:	481d      	ldr	r0, [pc, #116]	; (e10c <am_hal_ble_blocking_transfer.part.0+0x4d0>)
    e096:	e63a      	b.n	dd0e <am_hal_ble_blocking_transfer.part.0+0xd2>
    e098:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
    e09c:	481a      	ldr	r0, [pc, #104]	; (e108 <am_hal_ble_blocking_transfer.part.0+0x4cc>)
    e09e:	f36f 0241 	bfc	r2, #1, #1
    e0a2:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
    e0a6:	f8c3 8220 	str.w	r8, [r3, #544]	; 0x220
    e0aa:	e630      	b.n	dd0e <am_hal_ble_blocking_transfer.part.0+0xd2>
    e0ac:	f64b 3080 	movw	r0, #48000	; 0xbb80
    e0b0:	f001 f8c8 	bl	f244 <am_hal_flash_delay>
    e0b4:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    e0b8:	f884 5042 	strb.w	r5, [r4, #66]	; 0x42
    e0bc:	e656      	b.n	dd6c <am_hal_ble_blocking_transfer.part.0+0x130>
    e0be:	2200      	movs	r2, #0
    e0c0:	4613      	mov	r3, r2
    e0c2:	f001 0160 	and.w	r1, r1, #96	; 0x60
    e0c6:	ea43 13cc 	orr.w	r3, r3, ip, lsl #7
    e0ca:	430b      	orrs	r3, r1
    e0cc:	4910      	ldr	r1, [pc, #64]	; (e110 <am_hal_ble_blocking_transfer.part.0+0x4d4>)
    e0ce:	ea01 2000 	and.w	r0, r1, r0, lsl #8
    e0d2:	4303      	orrs	r3, r0
    e0d4:	490b      	ldr	r1, [pc, #44]	; (e104 <am_hal_ble_blocking_transfer.part.0+0x4c8>)
    e0d6:	f043 0301 	orr.w	r3, r3, #1
    e0da:	f8c1 2214 	str.w	r2, [r1, #532]	; 0x214
    e0de:	f8c1 320c 	str.w	r3, [r1, #524]	; 0x20c
    e0e2:	e764      	b.n	dfae <am_hal_ble_blocking_transfer.part.0+0x372>
    e0e4:	88b2      	ldrh	r2, [r6, #4]
    e0e6:	79b3      	ldrb	r3, [r6, #6]
    e0e8:	ba52      	rev16	r2, r2
    e0ea:	b292      	uxth	r2, r2
    e0ec:	061b      	lsls	r3, r3, #24
    e0ee:	e7e8      	b.n	e0c2 <am_hal_ble_blocking_transfer.part.0+0x486>
    e0f0:	7973      	ldrb	r3, [r6, #5]
    e0f2:	7932      	ldrb	r2, [r6, #4]
    e0f4:	061b      	lsls	r3, r3, #24
    e0f6:	e7e4      	b.n	e0c2 <am_hal_ble_blocking_transfer.part.0+0x486>
    e0f8:	7933      	ldrb	r3, [r6, #4]
    e0fa:	2200      	movs	r2, #0
    e0fc:	061b      	lsls	r3, r3, #24
    e0fe:	e7e0      	b.n	e0c2 <am_hal_ble_blocking_transfer.part.0+0x486>
    e100:	01775230 	.word	0x01775230
    e104:	5000c000 	.word	0x5000c000
    e108:	08000002 	.word	0x08000002
    e10c:	08000009 	.word	0x08000009
    e110:	000fff00 	.word	0x000fff00
    e114:	0007a121 	.word	0x0007a121

0000e118 <am_hal_ble_wakeup_set>:
    e118:	b1d0      	cbz	r0, e150 <am_hal_ble_wakeup_set+0x38>
    e11a:	6803      	ldr	r3, [r0, #0]
    e11c:	4a0d      	ldr	r2, [pc, #52]	; (e154 <am_hal_ble_wakeup_set+0x3c>)
    e11e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e122:	4293      	cmp	r3, r2
    e124:	d114      	bne.n	e150 <am_hal_ble_wakeup_set+0x38>
    e126:	b141      	cbz	r1, e13a <am_hal_ble_wakeup_set+0x22>
    e128:	4a0b      	ldr	r2, [pc, #44]	; (e158 <am_hal_ble_wakeup_set+0x40>)
    e12a:	f8b2 3304 	ldrh.w	r3, [r2, #772]	; 0x304
    e12e:	f043 030c 	orr.w	r3, r3, #12
    e132:	2000      	movs	r0, #0
    e134:	f8a2 3304 	strh.w	r3, [r2, #772]	; 0x304
    e138:	4770      	bx	lr
    e13a:	4b07      	ldr	r3, [pc, #28]	; (e158 <am_hal_ble_wakeup_set+0x40>)
    e13c:	f8b3 2304 	ldrh.w	r2, [r3, #772]	; 0x304
    e140:	f04f 0c02 	mov.w	ip, #2
    e144:	f36c 0283 	bfi	r2, ip, #2, #2
    e148:	4608      	mov	r0, r1
    e14a:	f8a3 2304 	strh.w	r2, [r3, #772]	; 0x304
    e14e:	4770      	bx	lr
    e150:	2002      	movs	r0, #2
    e152:	4770      	bx	lr
    e154:	01775230 	.word	0x01775230
    e158:	5000c000 	.word	0x5000c000

0000e15c <am_hal_ble_initialize>:
    e15c:	bb58      	cbnz	r0, e1b6 <am_hal_ble_initialize+0x5a>
    e15e:	b361      	cbz	r1, e1ba <am_hal_ble_initialize+0x5e>
    e160:	4b17      	ldr	r3, [pc, #92]	; (e1c0 <am_hal_ble_initialize+0x64>)
    e162:	78d8      	ldrb	r0, [r3, #3]
    e164:	b410      	push	{r4}
    e166:	f3c0 0400 	ubfx	r4, r0, #0, #1
    e16a:	f010 0001 	ands.w	r0, r0, #1
    e16e:	d11e      	bne.n	e1ae <am_hal_ble_initialize+0x52>
    e170:	681a      	ldr	r2, [r3, #0]
    e172:	f883 4047 	strb.w	r4, [r3, #71]	; 0x47
    e176:	e9c3 0004 	strd	r0, r0, [r3, #16]
    e17a:	e9c3 0006 	strd	r0, r0, [r3, #24]
    e17e:	e9c3 000a 	strd	r0, r0, [r3, #40]	; 0x28
    e182:	e9c3 000c 	strd	r0, r0, [r3, #48]	; 0x30
    e186:	721c      	strb	r4, [r3, #8]
    e188:	4c0e      	ldr	r4, [pc, #56]	; (e1c4 <am_hal_ble_initialize+0x68>)
    e18a:	60d8      	str	r0, [r3, #12]
    e18c:	f002 427e 	and.w	r2, r2, #4261412864	; 0xfe000000
    e190:	6258      	str	r0, [r3, #36]	; 0x24
    e192:	6218      	str	r0, [r3, #32]
    e194:	4314      	orrs	r4, r2
    e196:	6398      	str	r0, [r3, #56]	; 0x38
    e198:	601c      	str	r4, [r3, #0]
    e19a:	63d8      	str	r0, [r3, #60]	; 0x3c
    e19c:	f8a3 0040 	strh.w	r0, [r3, #64]	; 0x40
    e1a0:	f8c3 0043 	str.w	r0, [r3, #67]	; 0x43
    e1a4:	6058      	str	r0, [r3, #4]
    e1a6:	f85d 4b04 	ldr.w	r4, [sp], #4
    e1aa:	600b      	str	r3, [r1, #0]
    e1ac:	4770      	bx	lr
    e1ae:	2007      	movs	r0, #7
    e1b0:	f85d 4b04 	ldr.w	r4, [sp], #4
    e1b4:	4770      	bx	lr
    e1b6:	2005      	movs	r0, #5
    e1b8:	4770      	bx	lr
    e1ba:	2006      	movs	r0, #6
    e1bc:	4770      	bx	lr
    e1be:	bf00      	nop
    e1c0:	1000339c 	.word	0x1000339c
    e1c4:	01775230 	.word	0x01775230

0000e1c8 <am_hal_ble_config>:
    e1c8:	2800      	cmp	r0, #0
    e1ca:	d04e      	beq.n	e26a <am_hal_ble_config+0xa2>
    e1cc:	6803      	ldr	r3, [r0, #0]
    e1ce:	4a3e      	ldr	r2, [pc, #248]	; (e2c8 <am_hal_ble_config+0x100>)
    e1d0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e1d4:	4293      	cmp	r3, r2
    e1d6:	d148      	bne.n	e26a <am_hal_ble_config+0xa2>
    e1d8:	b470      	push	{r4, r5, r6}
    e1da:	4b3c      	ldr	r3, [pc, #240]	; (e2cc <am_hal_ble_config+0x104>)
    e1dc:	6844      	ldr	r4, [r0, #4]
    e1de:	2203      	movs	r2, #3
    e1e0:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
    e1e4:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    e1e8:	f36f 4251 	bfc	r2, #17, #1
    e1ec:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
    e1f0:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    e1f4:	f36f 4210 	bfc	r2, #16, #1
    e1f8:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
    e1fc:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    e200:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
    e204:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
    e208:	f8b3 2104 	ldrh.w	r2, [r3, #260]	; 0x104
    e20c:	6888      	ldr	r0, [r1, #8]
    e20e:	f360 220d 	bfi	r2, r0, #8, #6
    e212:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
    e216:	f8b3 2104 	ldrh.w	r2, [r3, #260]	; 0x104
    e21a:	6848      	ldr	r0, [r1, #4]
    e21c:	f360 0205 	bfi	r2, r0, #0, #6
    e220:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
    e224:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    e228:	f042 0201 	orr.w	r2, r2, #1
    e22c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    e230:	680b      	ldr	r3, [r1, #0]
    e232:	68c8      	ldr	r0, [r1, #12]
    e234:	4a25      	ldr	r2, [pc, #148]	; (e2cc <am_hal_ble_config+0x104>)
    e236:	021b      	lsls	r3, r3, #8
    e238:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    e23c:	2802      	cmp	r0, #2
    e23e:	bf08      	it	eq
    e240:	f443 6300 	orreq.w	r3, r3, #2048	; 0x800
    e244:	f043 0301 	orr.w	r3, r3, #1
    e248:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    e24c:	4b20      	ldr	r3, [pc, #128]	; (e2d0 <am_hal_ble_config+0x108>)
    e24e:	68db      	ldr	r3, [r3, #12]
    e250:	b2db      	uxtb	r3, r3
    e252:	2b12      	cmp	r3, #18
    e254:	d00b      	beq.n	e26e <am_hal_ble_config+0xa6>
    e256:	4b1f      	ldr	r3, [pc, #124]	; (e2d4 <am_hal_ble_config+0x10c>)
    e258:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
    e25c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
    e260:	7e8b      	ldrb	r3, [r1, #26]
    e262:	7223      	strb	r3, [r4, #8]
    e264:	2000      	movs	r0, #0
    e266:	bc70      	pop	{r4, r5, r6}
    e268:	4770      	bx	lr
    e26a:	2002      	movs	r0, #2
    e26c:	4770      	bx	lr
    e26e:	4e1a      	ldr	r6, [pc, #104]	; (e2d8 <am_hal_ble_config+0x110>)
    e270:	68f2      	ldr	r2, [r6, #12]
    e272:	f882 002f 	strb.w	r0, [r2, #47]	; 0x2f
    e276:	690b      	ldr	r3, [r1, #16]
    e278:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
    e27c:	690b      	ldr	r3, [r1, #16]
    e27e:	0a1b      	lsrs	r3, r3, #8
    e280:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
    e284:	694b      	ldr	r3, [r1, #20]
    e286:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
    e28a:	694b      	ldr	r3, [r1, #20]
    e28c:	0a1b      	lsrs	r3, r3, #8
    e28e:	f882 3027 	strb.w	r3, [r2, #39]	; 0x27
    e292:	7e4b      	ldrb	r3, [r1, #25]
    e294:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
    e298:	7e0b      	ldrb	r3, [r1, #24]
    e29a:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
    e29e:	6873      	ldr	r3, [r6, #4]
    e2a0:	b183      	cbz	r3, e2c4 <am_hal_ble_config+0xfc>
    e2a2:	3b01      	subs	r3, #1
    e2a4:	4d0d      	ldr	r5, [pc, #52]	; (e2dc <am_hal_ble_config+0x114>)
    e2a6:	eb02 0c03 	add.w	ip, r2, r3
    e2aa:	3a01      	subs	r2, #1
    e2ac:	2300      	movs	r3, #0
    e2ae:	f812 0f01 	ldrb.w	r0, [r2, #1]!
    e2b2:	ea80 2013 	eor.w	r0, r0, r3, lsr #8
    e2b6:	4562      	cmp	r2, ip
    e2b8:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    e2bc:	ea80 2303 	eor.w	r3, r0, r3, lsl #8
    e2c0:	b29b      	uxth	r3, r3
    e2c2:	d1f4      	bne.n	e2ae <am_hal_ble_config+0xe6>
    e2c4:	60b3      	str	r3, [r6, #8]
    e2c6:	e7c6      	b.n	e256 <am_hal_ble_config+0x8e>
    e2c8:	01775230 	.word	0x01775230
    e2cc:	5000c000 	.word	0x5000c000
    e2d0:	40020000 	.word	0x40020000
    e2d4:	1000339c 	.word	0x1000339c
    e2d8:	100010f8 	.word	0x100010f8
    e2dc:	00010974 	.word	0x00010974

0000e2e0 <am_hal_ble_power_control>:
    e2e0:	b538      	push	{r3, r4, r5, lr}
    e2e2:	2800      	cmp	r0, #0
    e2e4:	f000 8086 	beq.w	e3f4 <am_hal_ble_power_control+0x114>
    e2e8:	6803      	ldr	r3, [r0, #0]
    e2ea:	4a50      	ldr	r2, [pc, #320]	; (e42c <am_hal_ble_power_control+0x14c>)
    e2ec:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e2f0:	4293      	cmp	r3, r2
    e2f2:	d17f      	bne.n	e3f4 <am_hal_ble_power_control+0x114>
    e2f4:	2900      	cmp	r1, #0
    e2f6:	d154      	bne.n	e3a2 <am_hal_ble_power_control+0xc2>
    e2f8:	4b4d      	ldr	r3, [pc, #308]	; (e430 <am_hal_ble_power_control+0x150>)
    e2fa:	699b      	ldr	r3, [r3, #24]
    e2fc:	05db      	lsls	r3, r3, #23
    e2fe:	d44d      	bmi.n	e39c <am_hal_ble_power_control+0xbc>
    e300:	4d4c      	ldr	r5, [pc, #304]	; (e434 <am_hal_ble_power_control+0x154>)
    e302:	69ab      	ldr	r3, [r5, #24]
    e304:	f043 0301 	orr.w	r3, r3, #1
    e308:	61ab      	str	r3, [r5, #24]
    e30a:	69ab      	ldr	r3, [r5, #24]
    e30c:	f003 0307 	and.w	r3, r3, #7
    e310:	2b07      	cmp	r3, #7
    e312:	d00c      	beq.n	e32e <am_hal_ble_power_control+0x4e>
    e314:	4c48      	ldr	r4, [pc, #288]	; (e438 <am_hal_ble_power_control+0x158>)
    e316:	e002      	b.n	e31e <am_hal_ble_power_control+0x3e>
    e318:	3c01      	subs	r4, #1
    e31a:	f000 8083 	beq.w	e424 <am_hal_ble_power_control+0x144>
    e31e:	2010      	movs	r0, #16
    e320:	f000 ff90 	bl	f244 <am_hal_flash_delay>
    e324:	69ab      	ldr	r3, [r5, #24]
    e326:	f003 0307 	and.w	r3, r3, #7
    e32a:	2b07      	cmp	r3, #7
    e32c:	d1f4      	bne.n	e318 <am_hal_ble_power_control+0x38>
    e32e:	200e      	movs	r0, #14
    e330:	f001 fa36 	bl	f7a0 <am_hal_pwrctrl_periph_enable>
    e334:	2800      	cmp	r0, #0
    e336:	d173      	bne.n	e420 <am_hal_ble_power_control+0x140>
    e338:	4b40      	ldr	r3, [pc, #256]	; (e43c <am_hal_ble_power_control+0x15c>)
    e33a:	f44f 6200 	mov.w	r2, #2048	; 0x800
    e33e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    e342:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
    e346:	4a3b      	ldr	r2, [pc, #236]	; (e434 <am_hal_ble_power_control+0x154>)
    e348:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    e34c:	f360 01df 	bfi	r1, r0, #3, #29
    e350:	f8c3 1410 	str.w	r1, [r3, #1040]	; 0x410
    e354:	68d3      	ldr	r3, [r2, #12]
    e356:	b2db      	uxtb	r3, r3
    e358:	2b11      	cmp	r3, #17
    e35a:	d85a      	bhi.n	e412 <am_hal_ble_power_control+0x132>
    e35c:	2304      	movs	r3, #4
    e35e:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
    e362:	4d36      	ldr	r5, [pc, #216]	; (e43c <am_hal_ble_power_control+0x15c>)
    e364:	4836      	ldr	r0, [pc, #216]	; (e440 <am_hal_ble_power_control+0x160>)
    e366:	f000 ff6d 	bl	f244 <am_hal_flash_delay>
    e36a:	f8b5 3304 	ldrh.w	r3, [r5, #772]	; 0x304
    e36e:	f043 0301 	orr.w	r3, r3, #1
    e372:	f8a5 3304 	strh.w	r3, [r5, #772]	; 0x304
    e376:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
    e37a:	f3c3 2302 	ubfx	r3, r3, #8, #3
    e37e:	2b03      	cmp	r3, #3
    e380:	d00c      	beq.n	e39c <am_hal_ble_power_control+0xbc>
    e382:	4c30      	ldr	r4, [pc, #192]	; (e444 <am_hal_ble_power_control+0x164>)
    e384:	e001      	b.n	e38a <am_hal_ble_power_control+0xaa>
    e386:	3c01      	subs	r4, #1
    e388:	d04e      	beq.n	e428 <am_hal_ble_power_control+0x148>
    e38a:	2010      	movs	r0, #16
    e38c:	f000 ff5a 	bl	f244 <am_hal_flash_delay>
    e390:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
    e394:	f3c3 2302 	ubfx	r3, r3, #8, #3
    e398:	2b03      	cmp	r3, #3
    e39a:	d1f4      	bne.n	e386 <am_hal_ble_power_control+0xa6>
    e39c:	2400      	movs	r4, #0
    e39e:	4620      	mov	r0, r4
    e3a0:	bd38      	pop	{r3, r4, r5, pc}
    e3a2:	2901      	cmp	r1, #1
    e3a4:	d129      	bne.n	e3fa <am_hal_ble_power_control+0x11a>
    e3a6:	4b25      	ldr	r3, [pc, #148]	; (e43c <am_hal_ble_power_control+0x15c>)
    e3a8:	4a22      	ldr	r2, [pc, #136]	; (e434 <am_hal_ble_power_control+0x154>)
    e3aa:	2100      	movs	r1, #0
    e3ac:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
    e3b0:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
    e3b4:	f361 00df 	bfi	r0, r1, #3, #29
    e3b8:	f8c3 0410 	str.w	r0, [r3, #1040]	; 0x410
    e3bc:	68d3      	ldr	r3, [r2, #12]
    e3be:	b2db      	uxtb	r3, r3
    e3c0:	2b11      	cmp	r3, #17
    e3c2:	d91d      	bls.n	e400 <am_hal_ble_power_control+0x120>
    e3c4:	f892 3198 	ldrb.w	r3, [r2, #408]	; 0x198
    e3c8:	f361 1345 	bfi	r3, r1, #5, #1
    e3cc:	f882 3198 	strb.w	r3, [r2, #408]	; 0x198
    e3d0:	4b1a      	ldr	r3, [pc, #104]	; (e43c <am_hal_ble_power_control+0x15c>)
    e3d2:	f8b3 2304 	ldrh.w	r2, [r3, #772]	; 0x304
    e3d6:	f36f 0200 	bfc	r2, #0, #1
    e3da:	200e      	movs	r0, #14
    e3dc:	f8a3 2304 	strh.w	r2, [r3, #772]	; 0x304
    e3e0:	f001 fa08 	bl	f7f4 <am_hal_pwrctrl_periph_disable>
    e3e4:	4604      	mov	r4, r0
    e3e6:	b990      	cbnz	r0, e40e <am_hal_ble_power_control+0x12e>
    e3e8:	f44f 60c8 	mov.w	r0, #1600	; 0x640
    e3ec:	f000 ff2a 	bl	f244 <am_hal_flash_delay>
    e3f0:	4620      	mov	r0, r4
    e3f2:	bd38      	pop	{r3, r4, r5, pc}
    e3f4:	2402      	movs	r4, #2
    e3f6:	4620      	mov	r0, r4
    e3f8:	bd38      	pop	{r3, r4, r5, pc}
    e3fa:	2407      	movs	r4, #7
    e3fc:	4620      	mov	r0, r4
    e3fe:	bd38      	pop	{r3, r4, r5, pc}
    e400:	f8d2 3198 	ldr.w	r3, [r2, #408]	; 0x198
    e404:	f023 0304 	bic.w	r3, r3, #4
    e408:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
    e40c:	e7e0      	b.n	e3d0 <am_hal_ble_power_control+0xf0>
    e40e:	4c0e      	ldr	r4, [pc, #56]	; (e448 <am_hal_ble_power_control+0x168>)
    e410:	e7c5      	b.n	e39e <am_hal_ble_power_control+0xbe>
    e412:	f892 3198 	ldrb.w	r3, [r2, #408]	; 0x198
    e416:	f043 0320 	orr.w	r3, r3, #32
    e41a:	f882 3198 	strb.w	r3, [r2, #408]	; 0x198
    e41e:	e7a0      	b.n	e362 <am_hal_ble_power_control+0x82>
    e420:	4c0a      	ldr	r4, [pc, #40]	; (e44c <am_hal_ble_power_control+0x16c>)
    e422:	e7bc      	b.n	e39e <am_hal_ble_power_control+0xbe>
    e424:	4c0a      	ldr	r4, [pc, #40]	; (e450 <am_hal_ble_power_control+0x170>)
    e426:	e7ba      	b.n	e39e <am_hal_ble_power_control+0xbe>
    e428:	4c0a      	ldr	r4, [pc, #40]	; (e454 <am_hal_ble_power_control+0x174>)
    e42a:	e7b8      	b.n	e39e <am_hal_ble_power_control+0xbe>
    e42c:	01775230 	.word	0x01775230
    e430:	40021000 	.word	0x40021000
    e434:	40020000 	.word	0x40020000
    e438:	000186a0 	.word	0x000186a0
    e43c:	5000c000 	.word	0x5000c000
    e440:	00013880 	.word	0x00013880
    e444:	000f4240 	.word	0x000f4240
    e448:	08000006 	.word	0x08000006
    e44c:	08000007 	.word	0x08000007
    e450:	08000005 	.word	0x08000005
    e454:	08000008 	.word	0x08000008

0000e458 <am_hal_ble_patch_apply>:
    e458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e45c:	b093      	sub	sp, #76	; 0x4c
    e45e:	2800      	cmp	r0, #0
    e460:	d05c      	beq.n	e51c <am_hal_ble_patch_apply+0xc4>
    e462:	6803      	ldr	r3, [r0, #0]
    e464:	4ab7      	ldr	r2, [pc, #732]	; (e744 <am_hal_ble_patch_apply+0x2ec>)
    e466:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e46a:	4293      	cmp	r3, r2
    e46c:	4605      	mov	r5, r0
    e46e:	d155      	bne.n	e51c <am_hal_ble_patch_apply+0xc4>
    e470:	4688      	mov	r8, r1
    e472:	6809      	ldr	r1, [r1, #0]
    e474:	f8b8 2004 	ldrh.w	r2, [r8, #4]
    e478:	f88d 1009 	strb.w	r1, [sp, #9]
    e47c:	2001      	movs	r0, #1
    e47e:	f240 21f1 	movw	r1, #753	; 0x2f1
    e482:	f8df a2d4 	ldr.w	sl, [pc, #724]	; e758 <am_hal_ble_patch_apply+0x300>
    e486:	f88d 0008 	strb.w	r0, [sp, #8]
    e48a:	f8ad 100a 	strh.w	r1, [sp, #10]
    e48e:	f8ad 200c 	strh.w	r2, [sp, #12]
    e492:	f241 3788 	movw	r7, #5000	; 0x1388
    e496:	2400      	movs	r4, #0
    e498:	4699      	mov	r9, r3
    e49a:	aa02      	add	r2, sp, #8
    e49c:	454b      	cmp	r3, r9
    e49e:	e9cd 240c 	strd	r2, r4, [sp, #48]	; 0x30
    e4a2:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
    e4a6:	a90c      	add	r1, sp, #48	; 0x30
    e4a8:	4628      	mov	r0, r5
    e4aa:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
    e4ae:	f88d 403c 	strb.w	r4, [sp, #60]	; 0x3c
    e4b2:	d014      	beq.n	e4de <am_hal_ble_patch_apply+0x86>
    e4b4:	4ba4      	ldr	r3, [pc, #656]	; (e748 <am_hal_ble_patch_apply+0x2f0>)
    e4b6:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
    e4ba:	061b      	lsls	r3, r3, #24
    e4bc:	d41a      	bmi.n	e4f4 <am_hal_ble_patch_apply+0x9c>
    e4be:	4ea3      	ldr	r6, [pc, #652]	; (e74c <am_hal_ble_patch_apply+0x2f4>)
    e4c0:	4ca1      	ldr	r4, [pc, #644]	; (e748 <am_hal_ble_patch_apply+0x2f0>)
    e4c2:	2010      	movs	r0, #16
    e4c4:	f000 febe 	bl	f244 <am_hal_flash_delay>
    e4c8:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
    e4cc:	061f      	lsls	r7, r3, #24
    e4ce:	d411      	bmi.n	e4f4 <am_hal_ble_patch_apply+0x9c>
    e4d0:	3e01      	subs	r6, #1
    e4d2:	d1f6      	bne.n	e4c2 <am_hal_ble_patch_apply+0x6a>
    e4d4:	4e9e      	ldr	r6, [pc, #632]	; (e750 <am_hal_ble_patch_apply+0x2f8>)
    e4d6:	4630      	mov	r0, r6
    e4d8:	b013      	add	sp, #76	; 0x4c
    e4da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e4de:	f7ff fbad 	bl	dc3c <am_hal_ble_blocking_transfer.part.0>
    e4e2:	4606      	mov	r6, r0
    e4e4:	2800      	cmp	r0, #0
    e4e6:	d0e5      	beq.n	e4b4 <am_hal_ble_patch_apply+0x5c>
    e4e8:	3f01      	subs	r7, #1
    e4ea:	d0f4      	beq.n	e4d6 <am_hal_ble_patch_apply+0x7e>
    e4ec:	682b      	ldr	r3, [r5, #0]
    e4ee:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e4f2:	e7d2      	b.n	e49a <am_hal_ble_patch_apply+0x42>
    e4f4:	2300      	movs	r3, #0
    e4f6:	e9cd 3307 	strd	r3, r3, [sp, #28]
    e4fa:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
    e4fe:	930b      	str	r3, [sp, #44]	; 0x2c
    e500:	2302      	movs	r3, #2
    e502:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    e506:	2305      	movs	r3, #5
    e508:	f8ad 3020 	strh.w	r3, [sp, #32]
    e50c:	682b      	ldr	r3, [r5, #0]
    e50e:	f023 4b7e 	bic.w	fp, r3, #4261412864	; 0xfe000000
    e512:	4b8c      	ldr	r3, [pc, #560]	; (e744 <am_hal_ble_patch_apply+0x2ec>)
    e514:	aa02      	add	r2, sp, #8
    e516:	459b      	cmp	fp, r3
    e518:	9206      	str	r2, [sp, #24]
    e51a:	d004      	beq.n	e526 <am_hal_ble_patch_apply+0xce>
    e51c:	2602      	movs	r6, #2
    e51e:	4630      	mov	r0, r6
    e520:	b013      	add	sp, #76	; 0x4c
    e522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e526:	a906      	add	r1, sp, #24
    e528:	4628      	mov	r0, r5
    e52a:	f7ff fb87 	bl	dc3c <am_hal_ble_blocking_transfer.part.0>
    e52e:	4606      	mov	r6, r0
    e530:	2800      	cmp	r0, #0
    e532:	d1d0      	bne.n	e4d6 <am_hal_ble_patch_apply+0x7e>
    e534:	f89d 1008 	ldrb.w	r1, [sp, #8]
    e538:	f8d8 3000 	ldr.w	r3, [r8]
    e53c:	2904      	cmp	r1, #4
    e53e:	b2da      	uxtb	r2, r3
    e540:	f040 80fb 	bne.w	e73a <am_hal_ble_patch_apply+0x2e2>
    e544:	f89d 1009 	ldrb.w	r1, [sp, #9]
    e548:	4291      	cmp	r1, r2
    e54a:	f040 80f6 	bne.w	e73a <am_hal_ble_patch_apply+0x2e2>
    e54e:	f89d 100a 	ldrb.w	r1, [sp, #10]
    e552:	29f1      	cmp	r1, #241	; 0xf1
    e554:	f040 80f1 	bne.w	e73a <am_hal_ble_patch_apply+0x2e2>
    e558:	f89d 100b 	ldrb.w	r1, [sp, #11]
    e55c:	2901      	cmp	r1, #1
    e55e:	f040 80ec 	bne.w	e73a <am_hal_ble_patch_apply+0x2e2>
    e562:	f89d 100c 	ldrb.w	r1, [sp, #12]
    e566:	2900      	cmp	r1, #0
    e568:	f040 80e7 	bne.w	e73a <am_hal_ble_patch_apply+0x2e2>
    e56c:	f8d8 1004 	ldr.w	r1, [r8, #4]
    e570:	9101      	str	r1, [sp, #4]
    e572:	2900      	cmp	r1, #0
    e574:	d07d      	beq.n	e672 <am_hal_ble_patch_apply+0x21a>
    e576:	f8df a1e4 	ldr.w	sl, [pc, #484]	; e75c <am_hal_ble_patch_apply+0x304>
    e57a:	4f73      	ldr	r7, [pc, #460]	; (e748 <am_hal_ble_patch_apply+0x2f0>)
    e57c:	f88a 3001 	strb.w	r3, [sl, #1]
    e580:	9b01      	ldr	r3, [sp, #4]
    e582:	f8d8 100c 	ldr.w	r1, [r8, #12]
    e586:	4873      	ldr	r0, [pc, #460]	; (e754 <am_hal_ble_patch_apply+0x2fc>)
    e588:	f8cd a018 	str.w	sl, [sp, #24]
    e58c:	2b80      	cmp	r3, #128	; 0x80
    e58e:	bf28      	it	cs
    e590:	2380      	movcs	r3, #128	; 0x80
    e592:	4699      	mov	r9, r3
    e594:	f88a 3003 	strb.w	r3, [sl, #3]
    e598:	f026 0303 	bic.w	r3, r6, #3
    e59c:	4419      	add	r1, r3
    e59e:	2300      	movs	r3, #0
    e5a0:	e9cd 3307 	strd	r3, r3, [sp, #28]
    e5a4:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
    e5a8:	930b      	str	r3, [sp, #44]	; 0x2c
    e5aa:	2301      	movs	r3, #1
    e5ac:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    e5b0:	f88a 3000 	strb.w	r3, [sl]
    e5b4:	f109 0304 	add.w	r3, r9, #4
    e5b8:	f8ad 3020 	strh.w	r3, [sp, #32]
    e5bc:	23f2      	movs	r3, #242	; 0xf2
    e5be:	f88a 3002 	strb.w	r3, [sl, #2]
    e5c2:	464a      	mov	r2, r9
    e5c4:	f7fd fdec 	bl	c1a0 <memcpy>
    e5c8:	682b      	ldr	r3, [r5, #0]
    e5ca:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e5ce:	455b      	cmp	r3, fp
    e5d0:	d1a4      	bne.n	e51c <am_hal_ble_patch_apply+0xc4>
    e5d2:	a906      	add	r1, sp, #24
    e5d4:	4628      	mov	r0, r5
    e5d6:	f7ff fb31 	bl	dc3c <am_hal_ble_blocking_transfer.part.0>
    e5da:	2800      	cmp	r0, #0
    e5dc:	f040 80cc 	bne.w	e778 <am_hal_ble_patch_apply+0x320>
    e5e0:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
    e5e4:	061c      	lsls	r4, r3, #24
    e5e6:	d40b      	bmi.n	e600 <am_hal_ble_patch_apply+0x1a8>
    e5e8:	4c58      	ldr	r4, [pc, #352]	; (e74c <am_hal_ble_patch_apply+0x2f4>)
    e5ea:	e002      	b.n	e5f2 <am_hal_ble_patch_apply+0x19a>
    e5ec:	3c01      	subs	r4, #1
    e5ee:	f43f af71 	beq.w	e4d4 <am_hal_ble_patch_apply+0x7c>
    e5f2:	2010      	movs	r0, #16
    e5f4:	f000 fe26 	bl	f244 <am_hal_flash_delay>
    e5f8:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
    e5fc:	0618      	lsls	r0, r3, #24
    e5fe:	d5f5      	bpl.n	e5ec <am_hal_ble_patch_apply+0x194>
    e600:	ab02      	add	r3, sp, #8
    e602:	9306      	str	r3, [sp, #24]
    e604:	682b      	ldr	r3, [r5, #0]
    e606:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
    e60a:	2300      	movs	r3, #0
    e60c:	e9cd 3307 	strd	r3, r3, [sp, #28]
    e610:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
    e614:	930b      	str	r3, [sp, #44]	; 0x2c
    e616:	2302      	movs	r3, #2
    e618:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    e61c:	455a      	cmp	r2, fp
    e61e:	f04f 0305 	mov.w	r3, #5
    e622:	f8ad 3020 	strh.w	r3, [sp, #32]
    e626:	f47f af79 	bne.w	e51c <am_hal_ble_patch_apply+0xc4>
    e62a:	a906      	add	r1, sp, #24
    e62c:	4628      	mov	r0, r5
    e62e:	f7ff fb05 	bl	dc3c <am_hal_ble_blocking_transfer.part.0>
    e632:	2800      	cmp	r0, #0
    e634:	f040 80a0 	bne.w	e778 <am_hal_ble_patch_apply+0x320>
    e638:	f89d 1008 	ldrb.w	r1, [sp, #8]
    e63c:	f8d8 3000 	ldr.w	r3, [r8]
    e640:	2904      	cmp	r1, #4
    e642:	b2da      	uxtb	r2, r3
    e644:	d179      	bne.n	e73a <am_hal_ble_patch_apply+0x2e2>
    e646:	f89d 1009 	ldrb.w	r1, [sp, #9]
    e64a:	4291      	cmp	r1, r2
    e64c:	d175      	bne.n	e73a <am_hal_ble_patch_apply+0x2e2>
    e64e:	f89d 100a 	ldrb.w	r1, [sp, #10]
    e652:	29f2      	cmp	r1, #242	; 0xf2
    e654:	d171      	bne.n	e73a <am_hal_ble_patch_apply+0x2e2>
    e656:	f89d 100b 	ldrb.w	r1, [sp, #11]
    e65a:	2901      	cmp	r1, #1
    e65c:	d16d      	bne.n	e73a <am_hal_ble_patch_apply+0x2e2>
    e65e:	f89d 100c 	ldrb.w	r1, [sp, #12]
    e662:	2900      	cmp	r1, #0
    e664:	d169      	bne.n	e73a <am_hal_ble_patch_apply+0x2e2>
    e666:	9901      	ldr	r1, [sp, #4]
    e668:	ebb1 0109 	subs.w	r1, r1, r9
    e66c:	444e      	add	r6, r9
    e66e:	9101      	str	r1, [sp, #4]
    e670:	d184      	bne.n	e57c <am_hal_ble_patch_apply+0x124>
    e672:	f88d 2009 	strb.w	r2, [sp, #9]
    e676:	2200      	movs	r2, #0
    e678:	e9cd 2210 	strd	r2, r2, [sp, #64]	; 0x40
    e67c:	920d      	str	r2, [sp, #52]	; 0x34
    e67e:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
    e682:	f8b8 2008 	ldrh.w	r2, [r8, #8]
    e686:	f8ad 200c 	strh.w	r2, [sp, #12]
    e68a:	ab02      	add	r3, sp, #8
    e68c:	4a32      	ldr	r2, [pc, #200]	; (e758 <am_hal_ble_patch_apply+0x300>)
    e68e:	930c      	str	r3, [sp, #48]	; 0x30
    e690:	920e      	str	r2, [sp, #56]	; 0x38
    e692:	682b      	ldr	r3, [r5, #0]
    e694:	492b      	ldr	r1, [pc, #172]	; (e744 <am_hal_ble_patch_apply+0x2ec>)
    e696:	2201      	movs	r2, #1
    e698:	f88d 2008 	strb.w	r2, [sp, #8]
    e69c:	f240 22f3 	movw	r2, #755	; 0x2f3
    e6a0:	f8ad 200a 	strh.w	r2, [sp, #10]
    e6a4:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
    e6a8:	428a      	cmp	r2, r1
    e6aa:	d059      	beq.n	e760 <am_hal_ble_patch_apply+0x308>
    e6ac:	4a26      	ldr	r2, [pc, #152]	; (e748 <am_hal_ble_patch_apply+0x2f0>)
    e6ae:	f8d2 230c 	ldr.w	r2, [r2, #780]	; 0x30c
    e6b2:	0611      	lsls	r1, r2, #24
    e6b4:	d40d      	bmi.n	e6d2 <am_hal_ble_patch_apply+0x27a>
    e6b6:	4c25      	ldr	r4, [pc, #148]	; (e74c <am_hal_ble_patch_apply+0x2f4>)
    e6b8:	4e23      	ldr	r6, [pc, #140]	; (e748 <am_hal_ble_patch_apply+0x2f0>)
    e6ba:	e002      	b.n	e6c2 <am_hal_ble_patch_apply+0x26a>
    e6bc:	3c01      	subs	r4, #1
    e6be:	f43f af09 	beq.w	e4d4 <am_hal_ble_patch_apply+0x7c>
    e6c2:	2010      	movs	r0, #16
    e6c4:	f000 fdbe 	bl	f244 <am_hal_flash_delay>
    e6c8:	f8d6 330c 	ldr.w	r3, [r6, #780]	; 0x30c
    e6cc:	061b      	lsls	r3, r3, #24
    e6ce:	d5f5      	bpl.n	e6bc <am_hal_ble_patch_apply+0x264>
    e6d0:	682b      	ldr	r3, [r5, #0]
    e6d2:	491c      	ldr	r1, [pc, #112]	; (e744 <am_hal_ble_patch_apply+0x2ec>)
    e6d4:	aa02      	add	r2, sp, #8
    e6d6:	9206      	str	r2, [sp, #24]
    e6d8:	2200      	movs	r2, #0
    e6da:	e9cd 2207 	strd	r2, r2, [sp, #28]
    e6de:	e9cd 2209 	strd	r2, r2, [sp, #36]	; 0x24
    e6e2:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e6e6:	920b      	str	r2, [sp, #44]	; 0x2c
    e6e8:	2202      	movs	r2, #2
    e6ea:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
    e6ee:	428b      	cmp	r3, r1
    e6f0:	f04f 0205 	mov.w	r2, #5
    e6f4:	f8ad 2020 	strh.w	r2, [sp, #32]
    e6f8:	f47f af10 	bne.w	e51c <am_hal_ble_patch_apply+0xc4>
    e6fc:	a906      	add	r1, sp, #24
    e6fe:	4628      	mov	r0, r5
    e700:	f7ff fa9c 	bl	dc3c <am_hal_ble_blocking_transfer.part.0>
    e704:	4606      	mov	r6, r0
    e706:	2800      	cmp	r0, #0
    e708:	f47f aee5 	bne.w	e4d6 <am_hal_ble_patch_apply+0x7e>
    e70c:	f89d 2008 	ldrb.w	r2, [sp, #8]
    e710:	f898 3000 	ldrb.w	r3, [r8]
    e714:	2a04      	cmp	r2, #4
    e716:	d110      	bne.n	e73a <am_hal_ble_patch_apply+0x2e2>
    e718:	f89d 2009 	ldrb.w	r2, [sp, #9]
    e71c:	429a      	cmp	r2, r3
    e71e:	d10c      	bne.n	e73a <am_hal_ble_patch_apply+0x2e2>
    e720:	f89d 300a 	ldrb.w	r3, [sp, #10]
    e724:	2bf3      	cmp	r3, #243	; 0xf3
    e726:	d108      	bne.n	e73a <am_hal_ble_patch_apply+0x2e2>
    e728:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e72c:	2b01      	cmp	r3, #1
    e72e:	d104      	bne.n	e73a <am_hal_ble_patch_apply+0x2e2>
    e730:	f89d 300c 	ldrb.w	r3, [sp, #12]
    e734:	2b00      	cmp	r3, #0
    e736:	f43f aece 	beq.w	e4d6 <am_hal_ble_patch_apply+0x7e>
    e73a:	2601      	movs	r6, #1
    e73c:	4630      	mov	r0, r6
    e73e:	b013      	add	sp, #76	; 0x4c
    e740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e744:	01775230 	.word	0x01775230
    e748:	5000c000 	.word	0x5000c000
    e74c:	000f4240 	.word	0x000f4240
    e750:	08000004 	.word	0x08000004
    e754:	1000331c 	.word	0x1000331c
    e758:	00010006 	.word	0x00010006
    e75c:	10003318 	.word	0x10003318
    e760:	a90c      	add	r1, sp, #48	; 0x30
    e762:	4628      	mov	r0, r5
    e764:	f7ff fa6a 	bl	dc3c <am_hal_ble_blocking_transfer.part.0>
    e768:	2800      	cmp	r0, #0
    e76a:	d1e6      	bne.n	e73a <am_hal_ble_patch_apply+0x2e2>
    e76c:	4b03      	ldr	r3, [pc, #12]	; (e77c <am_hal_ble_patch_apply+0x324>)
    e76e:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
    e772:	061a      	lsls	r2, r3, #24
    e774:	d59f      	bpl.n	e6b6 <am_hal_ble_patch_apply+0x25e>
    e776:	e7ab      	b.n	e6d0 <am_hal_ble_patch_apply+0x278>
    e778:	4606      	mov	r6, r0
    e77a:	e6ac      	b.n	e4d6 <am_hal_ble_patch_apply+0x7e>
    e77c:	5000c000 	.word	0x5000c000

0000e780 <am_hal_ble_patch_copy_end_apply>:
    e780:	2800      	cmp	r0, #0
    e782:	d076      	beq.n	e872 <am_hal_ble_patch_copy_end_apply+0xf2>
    e784:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e788:	6803      	ldr	r3, [r0, #0]
    e78a:	4a3c      	ldr	r2, [pc, #240]	; (e87c <am_hal_ble_patch_copy_end_apply+0xfc>)
    e78c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e790:	4293      	cmp	r3, r2
    e792:	b08b      	sub	sp, #44	; 0x2c
    e794:	4606      	mov	r6, r0
    e796:	d168      	bne.n	e86a <am_hal_ble_patch_copy_end_apply+0xea>
    e798:	4a39      	ldr	r2, [pc, #228]	; (e880 <am_hal_ble_patch_copy_end_apply+0x100>)
    e79a:	f8df 90f4 	ldr.w	r9, [pc, #244]	; e890 <am_hal_ble_patch_copy_end_apply+0x110>
    e79e:	9200      	str	r2, [sp, #0]
    e7a0:	2400      	movs	r4, #0
    e7a2:	f8ad 4004 	strh.w	r4, [sp, #4]
    e7a6:	f241 3588 	movw	r5, #5000	; 0x1388
    e7aa:	4698      	mov	r8, r3
    e7ac:	af04      	add	r7, sp, #16
    e7ae:	4543      	cmp	r3, r8
    e7b0:	e9cd 4905 	strd	r4, r9, [sp, #20]
    e7b4:	e9cd 4408 	strd	r4, r4, [sp, #32]
    e7b8:	4639      	mov	r1, r7
    e7ba:	4630      	mov	r0, r6
    e7bc:	f8cd d010 	str.w	sp, [sp, #16]
    e7c0:	f88d 401c 	strb.w	r4, [sp, #28]
    e7c4:	d013      	beq.n	e7ee <am_hal_ble_patch_copy_end_apply+0x6e>
    e7c6:	4b2f      	ldr	r3, [pc, #188]	; (e884 <am_hal_ble_patch_copy_end_apply+0x104>)
    e7c8:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
    e7cc:	061a      	lsls	r2, r3, #24
    e7ce:	d419      	bmi.n	e804 <am_hal_ble_patch_copy_end_apply+0x84>
    e7d0:	4d2d      	ldr	r5, [pc, #180]	; (e888 <am_hal_ble_patch_copy_end_apply+0x108>)
    e7d2:	4c2c      	ldr	r4, [pc, #176]	; (e884 <am_hal_ble_patch_copy_end_apply+0x104>)
    e7d4:	2010      	movs	r0, #16
    e7d6:	f000 fd35 	bl	f244 <am_hal_flash_delay>
    e7da:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
    e7de:	061b      	lsls	r3, r3, #24
    e7e0:	d40f      	bmi.n	e802 <am_hal_ble_patch_copy_end_apply+0x82>
    e7e2:	3d01      	subs	r5, #1
    e7e4:	d1f6      	bne.n	e7d4 <am_hal_ble_patch_copy_end_apply+0x54>
    e7e6:	4829      	ldr	r0, [pc, #164]	; (e88c <am_hal_ble_patch_copy_end_apply+0x10c>)
    e7e8:	b00b      	add	sp, #44	; 0x2c
    e7ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e7ee:	f7ff fa25 	bl	dc3c <am_hal_ble_blocking_transfer.part.0>
    e7f2:	2800      	cmp	r0, #0
    e7f4:	d0e7      	beq.n	e7c6 <am_hal_ble_patch_copy_end_apply+0x46>
    e7f6:	3d01      	subs	r5, #1
    e7f8:	d0f6      	beq.n	e7e8 <am_hal_ble_patch_copy_end_apply+0x68>
    e7fa:	6833      	ldr	r3, [r6, #0]
    e7fc:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e800:	e7d4      	b.n	e7ac <am_hal_ble_patch_copy_end_apply+0x2c>
    e802:	af04      	add	r7, sp, #16
    e804:	6832      	ldr	r2, [r6, #0]
    e806:	491d      	ldr	r1, [pc, #116]	; (e87c <am_hal_ble_patch_copy_end_apply+0xfc>)
    e808:	f8cd d010 	str.w	sp, [sp, #16]
    e80c:	2300      	movs	r3, #0
    e80e:	e9cd 3305 	strd	r3, r3, [sp, #20]
    e812:	e9cd 3307 	strd	r3, r3, [sp, #28]
    e816:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    e81a:	9309      	str	r3, [sp, #36]	; 0x24
    e81c:	2302      	movs	r3, #2
    e81e:	f88d 301a 	strb.w	r3, [sp, #26]
    e822:	428a      	cmp	r2, r1
    e824:	f04f 0305 	mov.w	r3, #5
    e828:	f8ad 3018 	strh.w	r3, [sp, #24]
    e82c:	d11d      	bne.n	e86a <am_hal_ble_patch_copy_end_apply+0xea>
    e82e:	4639      	mov	r1, r7
    e830:	4630      	mov	r0, r6
    e832:	f7ff fa03 	bl	dc3c <am_hal_ble_blocking_transfer.part.0>
    e836:	2800      	cmp	r0, #0
    e838:	d1d6      	bne.n	e7e8 <am_hal_ble_patch_copy_end_apply+0x68>
    e83a:	f89d 3000 	ldrb.w	r3, [sp]
    e83e:	2b04      	cmp	r3, #4
    e840:	d119      	bne.n	e876 <am_hal_ble_patch_copy_end_apply+0xf6>
    e842:	f89d 3001 	ldrb.w	r3, [sp, #1]
    e846:	2bee      	cmp	r3, #238	; 0xee
    e848:	d115      	bne.n	e876 <am_hal_ble_patch_copy_end_apply+0xf6>
    e84a:	f89d 3002 	ldrb.w	r3, [sp, #2]
    e84e:	2bf1      	cmp	r3, #241	; 0xf1
    e850:	d111      	bne.n	e876 <am_hal_ble_patch_copy_end_apply+0xf6>
    e852:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e856:	2b01      	cmp	r3, #1
    e858:	d10d      	bne.n	e876 <am_hal_ble_patch_copy_end_apply+0xf6>
    e85a:	f89d 0004 	ldrb.w	r0, [sp, #4]
    e85e:	3800      	subs	r0, #0
    e860:	bf18      	it	ne
    e862:	2001      	movne	r0, #1
    e864:	b00b      	add	sp, #44	; 0x2c
    e866:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e86a:	2002      	movs	r0, #2
    e86c:	b00b      	add	sp, #44	; 0x2c
    e86e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e872:	2002      	movs	r0, #2
    e874:	4770      	bx	lr
    e876:	2001      	movs	r0, #1
    e878:	e7b6      	b.n	e7e8 <am_hal_ble_patch_copy_end_apply+0x68>
    e87a:	bf00      	nop
    e87c:	01775230 	.word	0x01775230
    e880:	02f1ee01 	.word	0x02f1ee01
    e884:	5000c000 	.word	0x5000c000
    e888:	000f4240 	.word	0x000f4240
    e88c:	08000004 	.word	0x08000004
    e890:	00010006 	.word	0x00010006

0000e894 <am_hal_ble_default_copy_patch_apply>:
    e894:	4b12      	ldr	r3, [pc, #72]	; (e8e0 <am_hal_ble_default_copy_patch_apply+0x4c>)
    e896:	681b      	ldr	r3, [r3, #0]
    e898:	6819      	ldr	r1, [r3, #0]
    e89a:	684b      	ldr	r3, [r1, #4]
    e89c:	68ca      	ldr	r2, [r1, #12]
    e89e:	b510      	push	{r4, lr}
    e8a0:	4604      	mov	r4, r0
    e8a2:	b18b      	cbz	r3, e8c8 <am_hal_ble_default_copy_patch_apply+0x34>
    e8a4:	3b01      	subs	r3, #1
    e8a6:	480f      	ldr	r0, [pc, #60]	; (e8e4 <am_hal_ble_default_copy_patch_apply+0x50>)
    e8a8:	eb02 0e03 	add.w	lr, r2, r3
    e8ac:	f102 3cff 	add.w	ip, r2, #4294967295
    e8b0:	2300      	movs	r3, #0
    e8b2:	f81c 2f01 	ldrb.w	r2, [ip, #1]!
    e8b6:	ea82 2213 	eor.w	r2, r2, r3, lsr #8
    e8ba:	45e6      	cmp	lr, ip
    e8bc:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
    e8c0:	ea82 2303 	eor.w	r3, r2, r3, lsl #8
    e8c4:	b29b      	uxth	r3, r3
    e8c6:	d1f4      	bne.n	e8b2 <am_hal_ble_default_copy_patch_apply+0x1e>
    e8c8:	608b      	str	r3, [r1, #8]
    e8ca:	4620      	mov	r0, r4
    e8cc:	f7ff fdc4 	bl	e458 <am_hal_ble_patch_apply>
    e8d0:	b100      	cbz	r0, e8d4 <am_hal_ble_default_copy_patch_apply+0x40>
    e8d2:	bd10      	pop	{r4, pc}
    e8d4:	4620      	mov	r0, r4
    e8d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e8da:	f7ff bf51 	b.w	e780 <am_hal_ble_patch_copy_end_apply>
    e8de:	bf00      	nop
    e8e0:	10001230 	.word	0x10001230
    e8e4:	00010974 	.word	0x00010974

0000e8e8 <am_hal_ble_default_patch_apply>:
    e8e8:	4a1c      	ldr	r2, [pc, #112]	; (e95c <am_hal_ble_default_patch_apply+0x74>)
    e8ea:	68d3      	ldr	r3, [r2, #12]
    e8ec:	b2db      	uxtb	r3, r3
    e8ee:	2b11      	cmp	r3, #17
    e8f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e8f4:	4605      	mov	r5, r0
    e8f6:	d02c      	beq.n	e952 <am_hal_ble_default_patch_apply+0x6a>
    e8f8:	68d3      	ldr	r3, [r2, #12]
    e8fa:	b2db      	uxtb	r3, r3
    e8fc:	2b12      	cmp	r3, #18
    e8fe:	d028      	beq.n	e952 <am_hal_ble_default_patch_apply+0x6a>
    e900:	4a17      	ldr	r2, [pc, #92]	; (e960 <am_hal_ble_default_patch_apply+0x78>)
    e902:	4b18      	ldr	r3, [pc, #96]	; (e964 <am_hal_ble_default_patch_apply+0x7c>)
    e904:	6816      	ldr	r6, [r2, #0]
    e906:	681b      	ldr	r3, [r3, #0]
    e908:	b306      	cbz	r6, e94c <am_hal_ble_default_patch_apply+0x64>
    e90a:	4c17      	ldr	r4, [pc, #92]	; (e968 <am_hal_ble_default_patch_apply+0x80>)
    e90c:	f1a3 0804 	sub.w	r8, r3, #4
    e910:	2700      	movs	r7, #0
    e912:	f858 1f04 	ldr.w	r1, [r8, #4]!
    e916:	684b      	ldr	r3, [r1, #4]
    e918:	68ca      	ldr	r2, [r1, #12]
    e91a:	b17b      	cbz	r3, e93c <am_hal_ble_default_patch_apply+0x54>
    e91c:	3b01      	subs	r3, #1
    e91e:	eb02 0c03 	add.w	ip, r2, r3
    e922:	1e50      	subs	r0, r2, #1
    e924:	2300      	movs	r3, #0
    e926:	f810 2f01 	ldrb.w	r2, [r0, #1]!
    e92a:	ea82 2213 	eor.w	r2, r2, r3, lsr #8
    e92e:	4584      	cmp	ip, r0
    e930:	f834 2012 	ldrh.w	r2, [r4, r2, lsl #1]
    e934:	ea82 2303 	eor.w	r3, r2, r3, lsl #8
    e938:	b29b      	uxth	r3, r3
    e93a:	d1f4      	bne.n	e926 <am_hal_ble_default_patch_apply+0x3e>
    e93c:	608b      	str	r3, [r1, #8]
    e93e:	4628      	mov	r0, r5
    e940:	f7ff fd8a 	bl	e458 <am_hal_ble_patch_apply>
    e944:	b918      	cbnz	r0, e94e <am_hal_ble_default_patch_apply+0x66>
    e946:	3701      	adds	r7, #1
    e948:	42be      	cmp	r6, r7
    e94a:	d1e2      	bne.n	e912 <am_hal_ble_default_patch_apply+0x2a>
    e94c:	2000      	movs	r0, #0
    e94e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e952:	4a06      	ldr	r2, [pc, #24]	; (e96c <am_hal_ble_default_patch_apply+0x84>)
    e954:	4b06      	ldr	r3, [pc, #24]	; (e970 <am_hal_ble_default_patch_apply+0x88>)
    e956:	6816      	ldr	r6, [r2, #0]
    e958:	681b      	ldr	r3, [r3, #0]
    e95a:	e7d5      	b.n	e908 <am_hal_ble_default_patch_apply+0x20>
    e95c:	40020000 	.word	0x40020000
    e960:	000125dc 	.word	0x000125dc
    e964:	100021e8 	.word	0x100021e8
    e968:	00010974 	.word	0x00010974
    e96c:	000121c0 	.word	0x000121c0
    e970:	10001240 	.word	0x10001240

0000e974 <am_hal_ble_default_trim_set_ramcode>:
    e974:	4b0f      	ldr	r3, [pc, #60]	; (e9b4 <am_hal_ble_default_trim_set_ramcode+0x40>)
    e976:	68db      	ldr	r3, [r3, #12]
    e978:	b2db      	uxtb	r3, r3
    e97a:	2b21      	cmp	r3, #33	; 0x21
    e97c:	bf0c      	ite	eq
    e97e:	4b0e      	ldreq	r3, [pc, #56]	; (e9b8 <am_hal_ble_default_trim_set_ramcode+0x44>)
    e980:	4b0e      	ldrne	r3, [pc, #56]	; (e9bc <am_hal_ble_default_trim_set_ramcode+0x48>)
    e982:	68da      	ldr	r2, [r3, #12]
    e984:	4b0e      	ldr	r3, [pc, #56]	; (e9c0 <am_hal_ble_default_trim_set_ramcode+0x4c>)
    e986:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
    e98a:	ba19      	rev	r1, r3
    e98c:	3301      	adds	r3, #1
    e98e:	4b0c      	ldr	r3, [pc, #48]	; (e9c0 <am_hal_ble_default_trim_set_ramcode+0x4c>)
    e990:	bf18      	it	ne
    e992:	6091      	strne	r1, [r2, #8]
    e994:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
    e998:	1c59      	adds	r1, r3, #1
    e99a:	d009      	beq.n	e9b0 <am_hal_ble_default_trim_set_ramcode+0x3c>
    e99c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    e9a0:	ba19      	rev	r1, r3
    e9a2:	3301      	adds	r3, #1
    e9a4:	d004      	beq.n	e9b0 <am_hal_ble_default_trim_set_ramcode+0x3c>
    e9a6:	68d3      	ldr	r3, [r2, #12]
    e9a8:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
    e9ac:	430b      	orrs	r3, r1
    e9ae:	60d3      	str	r3, [r2, #12]
    e9b0:	2000      	movs	r0, #0
    e9b2:	4770      	bx	lr
    e9b4:	40020000 	.word	0x40020000
    e9b8:	1000132c 	.word	0x1000132c
    e9bc:	10001118 	.word	0x10001118
    e9c0:	50023000 	.word	0x50023000

0000e9c4 <am_hal_ble_blocking_hci_write>:
    e9c4:	b530      	push	{r4, r5, lr}
    e9c6:	b087      	sub	sp, #28
    e9c8:	2400      	movs	r4, #0
    e9ca:	e9cd 4404 	strd	r4, r4, [sp, #16]
    e9ce:	b29b      	uxth	r3, r3
    e9d0:	f88d 4005 	strb.w	r4, [sp, #5]
    e9d4:	f8ad 4006 	strh.w	r4, [sp, #6]
    e9d8:	f88d 400c 	strb.w	r4, [sp, #12]
    e9dc:	2401      	movs	r4, #1
    e9de:	9200      	str	r2, [sp, #0]
    e9e0:	f88d 1004 	strb.w	r1, [sp, #4]
    e9e4:	f8ad 3008 	strh.w	r3, [sp, #8]
    e9e8:	f8ad 400a 	strh.w	r4, [sp, #10]
    e9ec:	b128      	cbz	r0, e9fa <am_hal_ble_blocking_hci_write+0x36>
    e9ee:	6802      	ldr	r2, [r0, #0]
    e9f0:	4d08      	ldr	r5, [pc, #32]	; (ea14 <am_hal_ble_blocking_hci_write+0x50>)
    e9f2:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    e9f6:	42aa      	cmp	r2, r5
    e9f8:	d002      	beq.n	ea00 <am_hal_ble_blocking_hci_write+0x3c>
    e9fa:	2000      	movs	r0, #0
    e9fc:	b007      	add	sp, #28
    e9fe:	bd30      	pop	{r4, r5, pc}
    ea00:	b109      	cbz	r1, ea06 <am_hal_ble_blocking_hci_write+0x42>
    ea02:	f88d 4007 	strb.w	r4, [sp, #7]
    ea06:	2b00      	cmp	r3, #0
    ea08:	d0f7      	beq.n	e9fa <am_hal_ble_blocking_hci_write+0x36>
    ea0a:	4669      	mov	r1, sp
    ea0c:	f7ff f916 	bl	dc3c <am_hal_ble_blocking_transfer.part.0>
    ea10:	b007      	add	sp, #28
    ea12:	bd30      	pop	{r4, r5, pc}
    ea14:	01775230 	.word	0x01775230

0000ea18 <am_hal_ble_blocking_hci_read>:
    ea18:	b5f0      	push	{r4, r5, r6, r7, lr}
    ea1a:	b089      	sub	sp, #36	; 0x24
    ea1c:	ab01      	add	r3, sp, #4
    ea1e:	9302      	str	r3, [sp, #8]
    ea20:	4b26      	ldr	r3, [pc, #152]	; (eabc <am_hal_ble_blocking_hci_read+0xa4>)
    ea22:	681b      	ldr	r3, [r3, #0]
    ea24:	f8ad 300c 	strh.w	r3, [sp, #12]
    ea28:	0c1b      	lsrs	r3, r3, #16
    ea2a:	f88d 300e 	strb.w	r3, [sp, #14]
    ea2e:	2300      	movs	r3, #0
    ea30:	e9cd 3306 	strd	r3, r3, [sp, #24]
    ea34:	f88d 300f 	strb.w	r3, [sp, #15]
    ea38:	f88d 3014 	strb.w	r3, [sp, #20]
    ea3c:	f04f 1302 	mov.w	r3, #131074	; 0x20002
    ea40:	9304      	str	r3, [sp, #16]
    ea42:	b130      	cbz	r0, ea52 <am_hal_ble_blocking_hci_read+0x3a>
    ea44:	6805      	ldr	r5, [r0, #0]
    ea46:	4b1e      	ldr	r3, [pc, #120]	; (eac0 <am_hal_ble_blocking_hci_read+0xa8>)
    ea48:	f025 457e 	bic.w	r5, r5, #4261412864	; 0xfe000000
    ea4c:	429d      	cmp	r5, r3
    ea4e:	4604      	mov	r4, r0
    ea50:	d002      	beq.n	ea58 <am_hal_ble_blocking_hci_read+0x40>
    ea52:	2000      	movs	r0, #0
    ea54:	b009      	add	sp, #36	; 0x24
    ea56:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ea58:	4b1a      	ldr	r3, [pc, #104]	; (eac4 <am_hal_ble_blocking_hci_read+0xac>)
    ea5a:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
    ea5e:	460e      	mov	r6, r1
    ea60:	f3c3 11c0 	ubfx	r1, r3, #7, #1
    ea64:	061b      	lsls	r3, r3, #24
    ea66:	4617      	mov	r7, r2
    ea68:	d403      	bmi.n	ea72 <am_hal_ble_blocking_hci_read+0x5a>
    ea6a:	2f00      	cmp	r7, #0
    ea6c:	d0f1      	beq.n	ea52 <am_hal_ble_blocking_hci_read+0x3a>
    ea6e:	6039      	str	r1, [r7, #0]
    ea70:	e7ef      	b.n	ea52 <am_hal_ble_blocking_hci_read+0x3a>
    ea72:	a902      	add	r1, sp, #8
    ea74:	f7ff f8e2 	bl	dc3c <am_hal_ble_blocking_transfer.part.0>
    ea78:	2800      	cmp	r0, #0
    ea7a:	d1eb      	bne.n	ea54 <am_hal_ble_blocking_hci_read+0x3c>
    ea7c:	f89d 1005 	ldrb.w	r1, [sp, #5]
    ea80:	f89d 3004 	ldrb.w	r3, [sp, #4]
    ea84:	9602      	str	r6, [sp, #8]
    ea86:	eb03 2301 	add.w	r3, r3, r1, lsl #8
    ea8a:	b29b      	uxth	r3, r3
    ea8c:	f8ad 3010 	strh.w	r3, [sp, #16]
    ea90:	3b01      	subs	r3, #1
    ea92:	2bff      	cmp	r3, #255	; 0xff
    ea94:	d80f      	bhi.n	eab6 <am_hal_ble_blocking_hci_read+0x9e>
    ea96:	6823      	ldr	r3, [r4, #0]
    ea98:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    ea9c:	42ab      	cmp	r3, r5
    ea9e:	d108      	bne.n	eab2 <am_hal_ble_blocking_hci_read+0x9a>
    eaa0:	a902      	add	r1, sp, #8
    eaa2:	4620      	mov	r0, r4
    eaa4:	f7ff f8ca 	bl	dc3c <am_hal_ble_blocking_transfer.part.0>
    eaa8:	2800      	cmp	r0, #0
    eaaa:	d1d3      	bne.n	ea54 <am_hal_ble_blocking_hci_read+0x3c>
    eaac:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    eab0:	e7db      	b.n	ea6a <am_hal_ble_blocking_hci_read+0x52>
    eab2:	2002      	movs	r0, #2
    eab4:	e7ce      	b.n	ea54 <am_hal_ble_blocking_hci_read+0x3c>
    eab6:	2005      	movs	r0, #5
    eab8:	e7cc      	b.n	ea54 <am_hal_ble_blocking_hci_read+0x3c>
    eaba:	bf00      	nop
    eabc:	00010948 	.word	0x00010948
    eac0:	01775230 	.word	0x01775230
    eac4:	5000c000 	.word	0x5000c000

0000eac8 <am_hal_ble_int_status>:
    eac8:	4b05      	ldr	r3, [pc, #20]	; (eae0 <am_hal_ble_int_status+0x18>)
    eaca:	b129      	cbz	r1, ead8 <am_hal_ble_int_status+0x10>
    eacc:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
    ead0:	f8d3 0224 	ldr.w	r0, [r3, #548]	; 0x224
    ead4:	4010      	ands	r0, r2
    ead6:	4770      	bx	lr
    ead8:	f8d3 0224 	ldr.w	r0, [r3, #548]	; 0x224
    eadc:	4770      	bx	lr
    eade:	bf00      	nop
    eae0:	5000c000 	.word	0x5000c000

0000eae4 <am_hal_ble_int_clear>:
    eae4:	b150      	cbz	r0, eafc <am_hal_ble_int_clear+0x18>
    eae6:	6803      	ldr	r3, [r0, #0]
    eae8:	4a05      	ldr	r2, [pc, #20]	; (eb00 <am_hal_ble_int_clear+0x1c>)
    eaea:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    eaee:	4293      	cmp	r3, r2
    eaf0:	d104      	bne.n	eafc <am_hal_ble_int_clear+0x18>
    eaf2:	4b04      	ldr	r3, [pc, #16]	; (eb04 <am_hal_ble_int_clear+0x20>)
    eaf4:	2000      	movs	r0, #0
    eaf6:	f8c3 1228 	str.w	r1, [r3, #552]	; 0x228
    eafa:	4770      	bx	lr
    eafc:	2002      	movs	r0, #2
    eafe:	4770      	bx	lr
    eb00:	01775230 	.word	0x01775230
    eb04:	5000c000 	.word	0x5000c000

0000eb08 <am_hal_ble_plf_reg_read>:
    eb08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    eb0c:	b092      	sub	sp, #72	; 0x48
    eb0e:	0a0c      	lsrs	r4, r1, #8
    eb10:	f88d 1004 	strb.w	r1, [sp, #4]
    eb14:	0c0b      	lsrs	r3, r1, #16
    eb16:	0e09      	lsrs	r1, r1, #24
    eb18:	f88d 3006 	strb.w	r3, [sp, #6]
    eb1c:	f88d 1007 	strb.w	r1, [sp, #7]
    eb20:	f88d 4005 	strb.w	r4, [sp, #5]
    eb24:	9c01      	ldr	r4, [sp, #4]
    eb26:	4d2c      	ldr	r5, [pc, #176]	; (ebd8 <am_hal_ble_plf_reg_read+0xd0>)
    eb28:	492c      	ldr	r1, [pc, #176]	; (ebdc <am_hal_ble_plf_reg_read+0xd4>)
    eb2a:	e9cd 5402 	strd	r5, r4, [sp, #8]
    eb2e:	ed9f 7b28 	vldr	d7, [pc, #160]	; ebd0 <am_hal_ble_plf_reg_read+0xc8>
    eb32:	4617      	mov	r7, r2
    eb34:	4a2a      	ldr	r2, [pc, #168]	; (ebe0 <am_hal_ble_plf_reg_read+0xd8>)
    eb36:	f8d1 8220 	ldr.w	r8, [r1, #544]	; 0x220
    eb3a:	2300      	movs	r3, #0
    eb3c:	ac02      	add	r4, sp, #8
    eb3e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
    eb42:	930c      	str	r3, [sp, #48]	; 0x30
    eb44:	4606      	mov	r6, r0
    eb46:	f8c1 3220 	str.w	r3, [r1, #544]	; 0x220
    eb4a:	e9cd 3205 	strd	r3, r2, [sp, #20]
    eb4e:	e9cd 3308 	strd	r3, r3, [sp, #32]
    eb52:	9404      	str	r4, [sp, #16]
    eb54:	f88d 301c 	strb.w	r3, [sp, #28]
    eb58:	b128      	cbz	r0, eb66 <am_hal_ble_plf_reg_read+0x5e>
    eb5a:	6803      	ldr	r3, [r0, #0]
    eb5c:	4a21      	ldr	r2, [pc, #132]	; (ebe4 <am_hal_ble_plf_reg_read+0xdc>)
    eb5e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    eb62:	4293      	cmp	r3, r2
    eb64:	d029      	beq.n	ebba <am_hal_ble_plf_reg_read+0xb2>
    eb66:	4d1d      	ldr	r5, [pc, #116]	; (ebdc <am_hal_ble_plf_reg_read+0xd4>)
    eb68:	f8d5 3410 	ldr.w	r3, [r5, #1040]	; 0x410
    eb6c:	f043 0302 	orr.w	r3, r3, #2
    eb70:	f8c5 3410 	str.w	r3, [r5, #1040]	; 0x410
    eb74:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
    eb78:	061a      	lsls	r2, r3, #24
    eb7a:	d40a      	bmi.n	eb92 <am_hal_ble_plf_reg_read+0x8a>
    eb7c:	4c1a      	ldr	r4, [pc, #104]	; (ebe8 <am_hal_ble_plf_reg_read+0xe0>)
    eb7e:	e001      	b.n	eb84 <am_hal_ble_plf_reg_read+0x7c>
    eb80:	3c01      	subs	r4, #1
    eb82:	d01e      	beq.n	ebc2 <am_hal_ble_plf_reg_read+0xba>
    eb84:	2010      	movs	r0, #16
    eb86:	f000 fb5d 	bl	f244 <am_hal_flash_delay>
    eb8a:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
    eb8e:	061b      	lsls	r3, r3, #24
    eb90:	d5f6      	bpl.n	eb80 <am_hal_ble_plf_reg_read+0x78>
    eb92:	a90a      	add	r1, sp, #40	; 0x28
    eb94:	2200      	movs	r2, #0
    eb96:	4630      	mov	r0, r6
    eb98:	f7ff ff3e 	bl	ea18 <am_hal_ble_blocking_hci_read>
    eb9c:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    eba0:	990c      	ldr	r1, [sp, #48]	; 0x30
    eba2:	4a0e      	ldr	r2, [pc, #56]	; (ebdc <am_hal_ble_plf_reg_read+0xd4>)
    eba4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    eba8:	2000      	movs	r0, #0
    ebaa:	603b      	str	r3, [r7, #0]
    ebac:	f8c2 8228 	str.w	r8, [r2, #552]	; 0x228
    ebb0:	f8c2 8220 	str.w	r8, [r2, #544]	; 0x220
    ebb4:	b012      	add	sp, #72	; 0x48
    ebb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ebba:	a904      	add	r1, sp, #16
    ebbc:	f7ff f83e 	bl	dc3c <am_hal_ble_blocking_transfer.part.0>
    ebc0:	e7d1      	b.n	eb66 <am_hal_ble_plf_reg_read+0x5e>
    ebc2:	480a      	ldr	r0, [pc, #40]	; (ebec <am_hal_ble_plf_reg_read+0xe4>)
    ebc4:	b012      	add	sp, #72	; 0x48
    ebc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ebca:	bf00      	nop
    ebcc:	f3af 8000 	nop.w
	...
    ebd8:	04fd0201 	.word	0x04fd0201
    ebdc:	5000c000 	.word	0x5000c000
    ebe0:	00010008 	.word	0x00010008
    ebe4:	01775230 	.word	0x01775230
    ebe8:	0007a120 	.word	0x0007a120
    ebec:	08000004 	.word	0x08000004

0000ebf0 <am_hal_ble_plf_reg_write>:
    ebf0:	b5f0      	push	{r4, r5, r6, r7, lr}
    ebf2:	b08d      	sub	sp, #52	; 0x34
    ebf4:	0a0c      	lsrs	r4, r1, #8
    ebf6:	0c0b      	lsrs	r3, r1, #16
    ebf8:	f88d 1004 	strb.w	r1, [sp, #4]
    ebfc:	f88d 4005 	strb.w	r4, [sp, #5]
    ec00:	f88d 3006 	strb.w	r3, [sp, #6]
    ec04:	f88d 2008 	strb.w	r2, [sp, #8]
    ec08:	0a14      	lsrs	r4, r2, #8
    ec0a:	0c13      	lsrs	r3, r2, #16
    ec0c:	0e09      	lsrs	r1, r1, #24
    ec0e:	0e12      	lsrs	r2, r2, #24
    ec10:	f88d 4009 	strb.w	r4, [sp, #9]
    ec14:	f88d 300a 	strb.w	r3, [sp, #10]
    ec18:	f88d 200b 	strb.w	r2, [sp, #11]
    ec1c:	f88d 1007 	strb.w	r1, [sp, #7]
    ec20:	ab01      	add	r3, sp, #4
    ec22:	4606      	mov	r6, r0
    ec24:	e893 0003 	ldmia.w	r3, {r0, r1}
    ec28:	ab04      	add	r3, sp, #16
    ec2a:	e883 0003 	stmia.w	r3, {r0, r1}
    ec2e:	4a22      	ldr	r2, [pc, #136]	; (ecb8 <am_hal_ble_plf_reg_write+0xc8>)
    ec30:	4c22      	ldr	r4, [pc, #136]	; (ecbc <am_hal_ble_plf_reg_write+0xcc>)
    ec32:	9403      	str	r4, [sp, #12]
    ec34:	2300      	movs	r3, #0
    ec36:	4922      	ldr	r1, [pc, #136]	; (ecc0 <am_hal_ble_plf_reg_write+0xd0>)
    ec38:	f8d2 7220 	ldr.w	r7, [r2, #544]	; 0x220
    ec3c:	f8c2 3220 	str.w	r3, [r2, #544]	; 0x220
    ec40:	a803      	add	r0, sp, #12
    ec42:	e9cd 0306 	strd	r0, r3, [sp, #24]
    ec46:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
    ec4a:	9108      	str	r1, [sp, #32]
    ec4c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    ec50:	b12e      	cbz	r6, ec5e <am_hal_ble_plf_reg_write+0x6e>
    ec52:	6833      	ldr	r3, [r6, #0]
    ec54:	4a1b      	ldr	r2, [pc, #108]	; (ecc4 <am_hal_ble_plf_reg_write+0xd4>)
    ec56:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    ec5a:	4293      	cmp	r3, r2
    ec5c:	d024      	beq.n	eca8 <am_hal_ble_plf_reg_write+0xb8>
    ec5e:	4d16      	ldr	r5, [pc, #88]	; (ecb8 <am_hal_ble_plf_reg_write+0xc8>)
    ec60:	f8d5 3410 	ldr.w	r3, [r5, #1040]	; 0x410
    ec64:	f043 0302 	orr.w	r3, r3, #2
    ec68:	f8c5 3410 	str.w	r3, [r5, #1040]	; 0x410
    ec6c:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
    ec70:	061a      	lsls	r2, r3, #24
    ec72:	bf58      	it	pl
    ec74:	f24c 3450 	movwpl	r4, #50000	; 0xc350
    ec78:	d502      	bpl.n	ec80 <am_hal_ble_plf_reg_write+0x90>
    ec7a:	e008      	b.n	ec8e <am_hal_ble_plf_reg_write+0x9e>
    ec7c:	3c01      	subs	r4, #1
    ec7e:	d018      	beq.n	ecb2 <am_hal_ble_plf_reg_write+0xc2>
    ec80:	2010      	movs	r0, #16
    ec82:	f000 fadf 	bl	f244 <am_hal_flash_delay>
    ec86:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
    ec8a:	061b      	lsls	r3, r3, #24
    ec8c:	d5f6      	bpl.n	ec7c <am_hal_ble_plf_reg_write+0x8c>
    ec8e:	2200      	movs	r2, #0
    ec90:	a906      	add	r1, sp, #24
    ec92:	4630      	mov	r0, r6
    ec94:	f7ff fec0 	bl	ea18 <am_hal_ble_blocking_hci_read>
    ec98:	4b07      	ldr	r3, [pc, #28]	; (ecb8 <am_hal_ble_plf_reg_write+0xc8>)
    ec9a:	2000      	movs	r0, #0
    ec9c:	f8c3 7228 	str.w	r7, [r3, #552]	; 0x228
    eca0:	f8c3 7220 	str.w	r7, [r3, #544]	; 0x220
    eca4:	b00d      	add	sp, #52	; 0x34
    eca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    eca8:	a906      	add	r1, sp, #24
    ecaa:	4630      	mov	r0, r6
    ecac:	f7fe ffc6 	bl	dc3c <am_hal_ble_blocking_transfer.part.0>
    ecb0:	e7d5      	b.n	ec5e <am_hal_ble_plf_reg_write+0x6e>
    ecb2:	4805      	ldr	r0, [pc, #20]	; (ecc8 <am_hal_ble_plf_reg_write+0xd8>)
    ecb4:	b00d      	add	sp, #52	; 0x34
    ecb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ecb8:	5000c000 	.word	0x5000c000
    ecbc:	08fd0301 	.word	0x08fd0301
    ecc0:	0001000c 	.word	0x0001000c
    ecc4:	01775230 	.word	0x01775230
    ecc8:	08000004 	.word	0x08000004

0000eccc <am_hal_ble_transmitter_modex_set>:
    eccc:	b530      	push	{r4, r5, lr}
    ecce:	b085      	sub	sp, #20
    ecd0:	4604      	mov	r4, r0
    ecd2:	2300      	movs	r3, #0
    ecd4:	466a      	mov	r2, sp
    ecd6:	460d      	mov	r5, r1
    ecd8:	4927      	ldr	r1, [pc, #156]	; (ed78 <am_hal_ble_transmitter_modex_set+0xac>)
    ecda:	9303      	str	r3, [sp, #12]
    ecdc:	f7ff ff14 	bl	eb08 <am_hal_ble_plf_reg_read>
    ece0:	4925      	ldr	r1, [pc, #148]	; (ed78 <am_hal_ble_transmitter_modex_set+0xac>)
    ece2:	f04f 32ff 	mov.w	r2, #4294967295
    ece6:	4620      	mov	r0, r4
    ece8:	f7ff ff82 	bl	ebf0 <am_hal_ble_plf_reg_write>
    ecec:	aa03      	add	r2, sp, #12
    ecee:	4923      	ldr	r1, [pc, #140]	; (ed7c <am_hal_ble_transmitter_modex_set+0xb0>)
    ecf0:	4620      	mov	r0, r4
    ecf2:	f7ff ff09 	bl	eb08 <am_hal_ble_plf_reg_read>
    ecf6:	9b03      	ldr	r3, [sp, #12]
    ecf8:	aa02      	add	r2, sp, #8
    ecfa:	f043 0308 	orr.w	r3, r3, #8
    ecfe:	f04f 41a4 	mov.w	r1, #1375731712	; 0x52000000
    ed02:	4620      	mov	r0, r4
    ed04:	9303      	str	r3, [sp, #12]
    ed06:	f7ff feff 	bl	eb08 <am_hal_ble_plf_reg_read>
    ed0a:	9a02      	ldr	r2, [sp, #8]
    ed0c:	f04f 41a4 	mov.w	r1, #1375731712	; 0x52000000
    ed10:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    ed14:	4620      	mov	r0, r4
    ed16:	9202      	str	r2, [sp, #8]
    ed18:	f7ff ff6a 	bl	ebf0 <am_hal_ble_plf_reg_write>
    ed1c:	aa01      	add	r2, sp, #4
    ed1e:	4918      	ldr	r1, [pc, #96]	; (ed80 <am_hal_ble_transmitter_modex_set+0xb4>)
    ed20:	4620      	mov	r0, r4
    ed22:	f7ff fef1 	bl	eb08 <am_hal_ble_plf_reg_read>
    ed26:	9a01      	ldr	r2, [sp, #4]
    ed28:	4915      	ldr	r1, [pc, #84]	; (ed80 <am_hal_ble_transmitter_modex_set+0xb4>)
    ed2a:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    ed2e:	f042 0208 	orr.w	r2, r2, #8
    ed32:	4620      	mov	r0, r4
    ed34:	f7ff ff5c 	bl	ebf0 <am_hal_ble_plf_reg_write>
    ed38:	006a      	lsls	r2, r5, #1
    ed3a:	4912      	ldr	r1, [pc, #72]	; (ed84 <am_hal_ble_transmitter_modex_set+0xb8>)
    ed3c:	f042 0201 	orr.w	r2, r2, #1
    ed40:	4620      	mov	r0, r4
    ed42:	f7ff ff55 	bl	ebf0 <am_hal_ble_plf_reg_write>
    ed46:	490d      	ldr	r1, [pc, #52]	; (ed7c <am_hal_ble_transmitter_modex_set+0xb0>)
    ed48:	9a03      	ldr	r2, [sp, #12]
    ed4a:	4620      	mov	r0, r4
    ed4c:	f7ff ff50 	bl	ebf0 <am_hal_ble_plf_reg_write>
    ed50:	4b0d      	ldr	r3, [pc, #52]	; (ed88 <am_hal_ble_transmitter_modex_set+0xbc>)
    ed52:	68db      	ldr	r3, [r3, #12]
    ed54:	b2db      	uxtb	r3, r3
    ed56:	2b21      	cmp	r3, #33	; 0x21
    ed58:	bf0c      	ite	eq
    ed5a:	490c      	ldreq	r1, [pc, #48]	; (ed8c <am_hal_ble_transmitter_modex_set+0xc0>)
    ed5c:	490c      	ldrne	r1, [pc, #48]	; (ed90 <am_hal_ble_transmitter_modex_set+0xc4>)
    ed5e:	462a      	mov	r2, r5
    ed60:	4620      	mov	r0, r4
    ed62:	f7ff ff45 	bl	ebf0 <am_hal_ble_plf_reg_write>
    ed66:	9a00      	ldr	r2, [sp, #0]
    ed68:	4903      	ldr	r1, [pc, #12]	; (ed78 <am_hal_ble_transmitter_modex_set+0xac>)
    ed6a:	4620      	mov	r0, r4
    ed6c:	f7ff ff40 	bl	ebf0 <am_hal_ble_plf_reg_write>
    ed70:	2000      	movs	r0, #0
    ed72:	b005      	add	sp, #20
    ed74:	bd30      	pop	{r4, r5, pc}
    ed76:	bf00      	nop
    ed78:	43000004 	.word	0x43000004
    ed7c:	52000008 	.word	0x52000008
    ed80:	45800070 	.word	0x45800070
    ed84:	52000014 	.word	0x52000014
    ed88:	40020000 	.word	0x40020000
    ed8c:	20006874 	.word	0x20006874
    ed90:	20006070 	.word	0x20006070

0000ed94 <am_hal_ble_patch_complete.part.0>:
    ed94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ed98:	b08c      	sub	sp, #48	; 0x30
    ed9a:	2300      	movs	r3, #0
    ed9c:	2201      	movs	r2, #1
    ed9e:	e9cd 3307 	strd	r3, r3, [sp, #28]
    eda2:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
    eda6:	930b      	str	r3, [sp, #44]	; 0x2c
    eda8:	f8ad 3004 	strh.w	r3, [sp, #4]
    edac:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
    edb0:	4b7e      	ldr	r3, [pc, #504]	; (efac <am_hal_ble_patch_complete.part.0+0x218>)
    edb2:	f8cd d018 	str.w	sp, [sp, #24]
    edb6:	2206      	movs	r2, #6
    edb8:	f8ad 2020 	strh.w	r2, [sp, #32]
    edbc:	9300      	str	r3, [sp, #0]
    edbe:	4604      	mov	r4, r0
    edc0:	2800      	cmp	r0, #0
    edc2:	f000 80ec 	beq.w	ef9e <am_hal_ble_patch_complete.part.0+0x20a>
    edc6:	4e7a      	ldr	r6, [pc, #488]	; (efb0 <am_hal_ble_patch_complete.part.0+0x21c>)
    edc8:	f241 3588 	movw	r5, #5000	; 0x1388
    edcc:	6823      	ldr	r3, [r4, #0]
    edce:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    edd2:	42b3      	cmp	r3, r6
    edd4:	a906      	add	r1, sp, #24
    edd6:	4620      	mov	r0, r4
    edd8:	d107      	bne.n	edea <am_hal_ble_patch_complete.part.0+0x56>
    edda:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    edde:	b123      	cbz	r3, edea <am_hal_ble_patch_complete.part.0+0x56>
    ede0:	f7fe ff2c 	bl	dc3c <am_hal_ble_blocking_transfer.part.0>
    ede4:	b108      	cbz	r0, edea <am_hal_ble_patch_complete.part.0+0x56>
    ede6:	3d01      	subs	r5, #1
    ede8:	d1f0      	bne.n	edcc <am_hal_ble_patch_complete.part.0+0x38>
    edea:	4b72      	ldr	r3, [pc, #456]	; (efb4 <am_hal_ble_patch_complete.part.0+0x220>)
    edec:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
    edf0:	061b      	lsls	r3, r3, #24
    edf2:	d458      	bmi.n	eea6 <am_hal_ble_patch_complete.part.0+0x112>
    edf4:	4d70      	ldr	r5, [pc, #448]	; (efb8 <am_hal_ble_patch_complete.part.0+0x224>)
    edf6:	4e6f      	ldr	r6, [pc, #444]	; (efb4 <am_hal_ble_patch_complete.part.0+0x220>)
    edf8:	2010      	movs	r0, #16
    edfa:	f000 fa23 	bl	f244 <am_hal_flash_delay>
    edfe:	f8d6 330c 	ldr.w	r3, [r6, #780]	; 0x30c
    ee02:	061f      	lsls	r7, r3, #24
    ee04:	d406      	bmi.n	ee14 <am_hal_ble_patch_complete.part.0+0x80>
    ee06:	3d01      	subs	r5, #1
    ee08:	d1f6      	bne.n	edf8 <am_hal_ble_patch_complete.part.0+0x64>
    ee0a:	4d6c      	ldr	r5, [pc, #432]	; (efbc <am_hal_ble_patch_complete.part.0+0x228>)
    ee0c:	4628      	mov	r0, r5
    ee0e:	b00c      	add	sp, #48	; 0x30
    ee10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ee14:	2302      	movs	r3, #2
    ee16:	f10d 080c 	add.w	r8, sp, #12
    ee1a:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    ee1e:	f8cd 8018 	str.w	r8, [sp, #24]
    ee22:	f8ad 3020 	strh.w	r3, [sp, #32]
    ee26:	2c00      	cmp	r4, #0
    ee28:	d038      	beq.n	ee9c <am_hal_ble_patch_complete.part.0+0x108>
    ee2a:	6826      	ldr	r6, [r4, #0]
    ee2c:	4b60      	ldr	r3, [pc, #384]	; (efb0 <am_hal_ble_patch_complete.part.0+0x21c>)
    ee2e:	f026 467e 	bic.w	r6, r6, #4261412864	; 0xfe000000
    ee32:	429e      	cmp	r6, r3
    ee34:	d132      	bne.n	ee9c <am_hal_ble_patch_complete.part.0+0x108>
    ee36:	a906      	add	r1, sp, #24
    ee38:	4620      	mov	r0, r4
    ee3a:	f7fe feff 	bl	dc3c <am_hal_ble_blocking_transfer.part.0>
    ee3e:	4605      	mov	r5, r0
    ee40:	bb68      	cbnz	r0, ee9e <am_hal_ble_patch_complete.part.0+0x10a>
    ee42:	f89d 200d 	ldrb.w	r2, [sp, #13]
    ee46:	2aee      	cmp	r2, #238	; 0xee
    ee48:	d037      	beq.n	eeba <am_hal_ble_patch_complete.part.0+0x126>
    ee4a:	f89d 300c 	ldrb.w	r3, [sp, #12]
    ee4e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    ee52:	6822      	ldr	r2, [r4, #0]
    ee54:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    ee58:	b29b      	uxth	r3, r3
    ee5a:	42b2      	cmp	r2, r6
    ee5c:	f8ad 3020 	strh.w	r3, [sp, #32]
    ee60:	d11c      	bne.n	ee9c <am_hal_ble_patch_complete.part.0+0x108>
    ee62:	b133      	cbz	r3, ee72 <am_hal_ble_patch_complete.part.0+0xde>
    ee64:	a906      	add	r1, sp, #24
    ee66:	4620      	mov	r0, r4
    ee68:	f7fe fee8 	bl	dc3c <am_hal_ble_blocking_transfer.part.0>
    ee6c:	2800      	cmp	r0, #0
    ee6e:	f040 8094 	bne.w	ef9a <am_hal_ble_patch_complete.part.0+0x206>
    ee72:	2301      	movs	r3, #1
    ee74:	4628      	mov	r0, r5
    ee76:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    ee7a:	b00c      	add	sp, #48	; 0x30
    ee7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ee80:	6826      	ldr	r6, [r4, #0]
    ee82:	4b4b      	ldr	r3, [pc, #300]	; (efb0 <am_hal_ble_patch_complete.part.0+0x21c>)
    ee84:	f8cd 8018 	str.w	r8, [sp, #24]
    ee88:	f026 467e 	bic.w	r6, r6, #4261412864	; 0xfe000000
    ee8c:	2702      	movs	r7, #2
    ee8e:	2209      	movs	r2, #9
    ee90:	429e      	cmp	r6, r3
    ee92:	f88d 7022 	strb.w	r7, [sp, #34]	; 0x22
    ee96:	f8ad 2020 	strh.w	r2, [sp, #32]
    ee9a:	d054      	beq.n	ef46 <am_hal_ble_patch_complete.part.0+0x1b2>
    ee9c:	2502      	movs	r5, #2
    ee9e:	4628      	mov	r0, r5
    eea0:	b00c      	add	sp, #48	; 0x30
    eea2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    eea6:	2302      	movs	r3, #2
    eea8:	f10d 080c 	add.w	r8, sp, #12
    eeac:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    eeb0:	f8cd 8018 	str.w	r8, [sp, #24]
    eeb4:	f8ad 3020 	strh.w	r3, [sp, #32]
    eeb8:	e7b7      	b.n	ee2a <am_hal_ble_patch_complete.part.0+0x96>
    eeba:	6827      	ldr	r7, [r4, #0]
    eebc:	f027 477e 	bic.w	r7, r7, #4261412864	; 0xfe000000
    eec0:	2303      	movs	r3, #3
    eec2:	42b7      	cmp	r7, r6
    eec4:	f8ad 3020 	strh.w	r3, [sp, #32]
    eec8:	d1e8      	bne.n	ee9c <am_hal_ble_patch_complete.part.0+0x108>
    eeca:	a906      	add	r1, sp, #24
    eecc:	4620      	mov	r0, r4
    eece:	f7fe feb5 	bl	dc3c <am_hal_ble_blocking_transfer.part.0>
    eed2:	4605      	mov	r5, r0
    eed4:	2800      	cmp	r0, #0
    eed6:	d1e2      	bne.n	ee9e <am_hal_ble_patch_complete.part.0+0x10a>
    eed8:	2301      	movs	r3, #1
    eeda:	e9cd 0007 	strd	r0, r0, [sp, #28]
    eede:	f88d 3004 	strb.w	r3, [sp, #4]
    eee2:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    eee6:	f103 73fe 	add.w	r3, r3, #33292288	; 0x1fc0000
    eeea:	f503 3382 	add.w	r3, r3, #66560	; 0x10400
    eeee:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
    eef2:	9300      	str	r3, [sp, #0]
    eef4:	2305      	movs	r3, #5
    eef6:	f8cd d018 	str.w	sp, [sp, #24]
    eefa:	900b      	str	r0, [sp, #44]	; 0x2c
    eefc:	f241 3688 	movw	r6, #5000	; 0x1388
    ef00:	f8ad 3020 	strh.w	r3, [sp, #32]
    ef04:	6823      	ldr	r3, [r4, #0]
    ef06:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    ef0a:	42bb      	cmp	r3, r7
    ef0c:	a906      	add	r1, sp, #24
    ef0e:	4620      	mov	r0, r4
    ef10:	d1c4      	bne.n	ee9c <am_hal_ble_patch_complete.part.0+0x108>
    ef12:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    ef16:	b133      	cbz	r3, ef26 <am_hal_ble_patch_complete.part.0+0x192>
    ef18:	f7fe fe90 	bl	dc3c <am_hal_ble_blocking_transfer.part.0>
    ef1c:	4605      	mov	r5, r0
    ef1e:	b110      	cbz	r0, ef26 <am_hal_ble_patch_complete.part.0+0x192>
    ef20:	3e01      	subs	r6, #1
    ef22:	d1ef      	bne.n	ef04 <am_hal_ble_patch_complete.part.0+0x170>
    ef24:	e7bb      	b.n	ee9e <am_hal_ble_patch_complete.part.0+0x10a>
    ef26:	4e23      	ldr	r6, [pc, #140]	; (efb4 <am_hal_ble_patch_complete.part.0+0x220>)
    ef28:	f8d6 330c 	ldr.w	r3, [r6, #780]	; 0x30c
    ef2c:	0618      	lsls	r0, r3, #24
    ef2e:	d4a7      	bmi.n	ee80 <am_hal_ble_patch_complete.part.0+0xec>
    ef30:	4d21      	ldr	r5, [pc, #132]	; (efb8 <am_hal_ble_patch_complete.part.0+0x224>)
    ef32:	2010      	movs	r0, #16
    ef34:	f000 f986 	bl	f244 <am_hal_flash_delay>
    ef38:	f8d6 330c 	ldr.w	r3, [r6, #780]	; 0x30c
    ef3c:	0619      	lsls	r1, r3, #24
    ef3e:	d49f      	bmi.n	ee80 <am_hal_ble_patch_complete.part.0+0xec>
    ef40:	3d01      	subs	r5, #1
    ef42:	d1f6      	bne.n	ef32 <am_hal_ble_patch_complete.part.0+0x19e>
    ef44:	e761      	b.n	ee0a <am_hal_ble_patch_complete.part.0+0x76>
    ef46:	a906      	add	r1, sp, #24
    ef48:	4620      	mov	r0, r4
    ef4a:	f7fe fe77 	bl	dc3c <am_hal_ble_blocking_transfer.part.0>
    ef4e:	4605      	mov	r5, r0
    ef50:	2800      	cmp	r0, #0
    ef52:	d1a4      	bne.n	ee9e <am_hal_ble_patch_complete.part.0+0x10a>
    ef54:	6823      	ldr	r3, [r4, #0]
    ef56:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    ef5a:	42b3      	cmp	r3, r6
    ef5c:	d106      	bne.n	ef6c <am_hal_ble_patch_complete.part.0+0x1d8>
    ef5e:	4b15      	ldr	r3, [pc, #84]	; (efb4 <am_hal_ble_patch_complete.part.0+0x220>)
    ef60:	f8b3 2304 	ldrh.w	r2, [r3, #772]	; 0x304
    ef64:	f367 0283 	bfi	r2, r7, #2, #2
    ef68:	f8a3 2304 	strh.w	r2, [r3, #772]	; 0x304
    ef6c:	2301      	movs	r3, #1
    ef6e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    ef72:	4813      	ldr	r0, [pc, #76]	; (efc0 <am_hal_ble_patch_complete.part.0+0x22c>)
    ef74:	f000 f966 	bl	f244 <am_hal_flash_delay>
    ef78:	4b12      	ldr	r3, [pc, #72]	; (efc4 <am_hal_ble_patch_complete.part.0+0x230>)
    ef7a:	4a13      	ldr	r2, [pc, #76]	; (efc8 <am_hal_ble_patch_complete.part.0+0x234>)
    ef7c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
    ef80:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
    ef84:	4291      	cmp	r1, r2
    ef86:	d18a      	bne.n	ee9e <am_hal_ble_patch_complete.part.0+0x10a>
    ef88:	b2d9      	uxtb	r1, r3
    ef8a:	f1a1 0320 	sub.w	r3, r1, #32
    ef8e:	2b30      	cmp	r3, #48	; 0x30
    ef90:	d885      	bhi.n	ee9e <am_hal_ble_patch_complete.part.0+0x10a>
    ef92:	4620      	mov	r0, r4
    ef94:	f7ff fe9a 	bl	eccc <am_hal_ble_transmitter_modex_set>
    ef98:	e781      	b.n	ee9e <am_hal_ble_patch_complete.part.0+0x10a>
    ef9a:	4605      	mov	r5, r0
    ef9c:	e77f      	b.n	ee9e <am_hal_ble_patch_complete.part.0+0x10a>
    ef9e:	4b05      	ldr	r3, [pc, #20]	; (efb4 <am_hal_ble_patch_complete.part.0+0x220>)
    efa0:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
    efa4:	061a      	lsls	r2, r3, #24
    efa6:	f57f af25 	bpl.w	edf4 <am_hal_ble_patch_complete.part.0+0x60>
    efaa:	e777      	b.n	ee9c <am_hal_ble_patch_complete.part.0+0x108>
    efac:	02f1ee01 	.word	0x02f1ee01
    efb0:	01775230 	.word	0x01775230
    efb4:	5000c000 	.word	0x5000c000
    efb8:	000186a0 	.word	0x000186a0
    efbc:	08000004 	.word	0x08000004
    efc0:	007a1200 	.word	0x007a1200
    efc4:	50023000 	.word	0x50023000
    efc8:	18240600 	.word	0x18240600

0000efcc <am_hal_ble_patch_complete>:
    efcc:	b128      	cbz	r0, efda <am_hal_ble_patch_complete+0xe>
    efce:	6803      	ldr	r3, [r0, #0]
    efd0:	4a04      	ldr	r2, [pc, #16]	; (efe4 <am_hal_ble_patch_complete+0x18>)
    efd2:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    efd6:	4293      	cmp	r3, r2
    efd8:	d001      	beq.n	efde <am_hal_ble_patch_complete+0x12>
    efda:	2002      	movs	r0, #2
    efdc:	4770      	bx	lr
    efde:	f7ff bed9 	b.w	ed94 <am_hal_ble_patch_complete.part.0>
    efe2:	bf00      	nop
    efe4:	01775230 	.word	0x01775230

0000efe8 <am_hal_ble_sleep_set>:
    efe8:	b530      	push	{r4, r5, lr}
    efea:	b083      	sub	sp, #12
    efec:	2200      	movs	r2, #0
    efee:	4b12      	ldr	r3, [pc, #72]	; (f038 <am_hal_ble_sleep_set+0x50>)
    eff0:	9201      	str	r2, [sp, #4]
    eff2:	68db      	ldr	r3, [r3, #12]
    eff4:	b2db      	uxtb	r3, r3
    eff6:	2b21      	cmp	r3, #33	; 0x21
    eff8:	460d      	mov	r5, r1
    effa:	aa01      	add	r2, sp, #4
    effc:	bf0c      	ite	eq
    effe:	490f      	ldreq	r1, [pc, #60]	; (f03c <am_hal_ble_sleep_set+0x54>)
    f000:	490f      	ldrne	r1, [pc, #60]	; (f040 <am_hal_ble_sleep_set+0x58>)
    f002:	4604      	mov	r4, r0
    f004:	f7ff fd80 	bl	eb08 <am_hal_ble_plf_reg_read>
    f008:	9a01      	ldr	r2, [sp, #4]
    f00a:	f422 427e 	bic.w	r2, r2, #65024	; 0xfe00
    f00e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    f012:	b11d      	cbz	r5, f01c <am_hal_ble_sleep_set+0x34>
    f014:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    f018:	f042 0201 	orr.w	r2, r2, #1
    f01c:	4b06      	ldr	r3, [pc, #24]	; (f038 <am_hal_ble_sleep_set+0x50>)
    f01e:	9201      	str	r2, [sp, #4]
    f020:	68db      	ldr	r3, [r3, #12]
    f022:	b2db      	uxtb	r3, r3
    f024:	2b21      	cmp	r3, #33	; 0x21
    f026:	bf0c      	ite	eq
    f028:	4904      	ldreq	r1, [pc, #16]	; (f03c <am_hal_ble_sleep_set+0x54>)
    f02a:	4905      	ldrne	r1, [pc, #20]	; (f040 <am_hal_ble_sleep_set+0x58>)
    f02c:	4620      	mov	r0, r4
    f02e:	f7ff fddf 	bl	ebf0 <am_hal_ble_plf_reg_write>
    f032:	2000      	movs	r0, #0
    f034:	b003      	add	sp, #12
    f036:	bd30      	pop	{r4, r5, pc}
    f038:	40020000 	.word	0x40020000
    f03c:	20006e18 	.word	0x20006e18
    f040:	200067c4 	.word	0x200067c4

0000f044 <am_hal_ble_tx_power_set>:
    f044:	b530      	push	{r4, r5, lr}
    f046:	b083      	sub	sp, #12
    f048:	4604      	mov	r4, r0
    f04a:	2300      	movs	r3, #0
    f04c:	460d      	mov	r5, r1
    f04e:	466a      	mov	r2, sp
    f050:	491a      	ldr	r1, [pc, #104]	; (f0bc <am_hal_ble_tx_power_set+0x78>)
    f052:	9301      	str	r3, [sp, #4]
    f054:	f7ff fd58 	bl	eb08 <am_hal_ble_plf_reg_read>
    f058:	4918      	ldr	r1, [pc, #96]	; (f0bc <am_hal_ble_tx_power_set+0x78>)
    f05a:	f04f 32ff 	mov.w	r2, #4294967295
    f05e:	4620      	mov	r0, r4
    f060:	f7ff fdc6 	bl	ebf0 <am_hal_ble_plf_reg_write>
    f064:	042a      	lsls	r2, r5, #16
    f066:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
    f06a:	4915      	ldr	r1, [pc, #84]	; (f0c0 <am_hal_ble_tx_power_set+0x7c>)
    f06c:	f042 0208 	orr.w	r2, r2, #8
    f070:	4620      	mov	r0, r4
    f072:	f7ff fdbd 	bl	ebf0 <am_hal_ble_plf_reg_write>
    f076:	4911      	ldr	r1, [pc, #68]	; (f0bc <am_hal_ble_tx_power_set+0x78>)
    f078:	9a00      	ldr	r2, [sp, #0]
    f07a:	4620      	mov	r0, r4
    f07c:	f7ff fdb8 	bl	ebf0 <am_hal_ble_plf_reg_write>
    f080:	4b10      	ldr	r3, [pc, #64]	; (f0c4 <am_hal_ble_tx_power_set+0x80>)
    f082:	68db      	ldr	r3, [r3, #12]
    f084:	b2db      	uxtb	r3, r3
    f086:	2b21      	cmp	r3, #33	; 0x21
    f088:	bf0c      	ite	eq
    f08a:	490f      	ldreq	r1, [pc, #60]	; (f0c8 <am_hal_ble_tx_power_set+0x84>)
    f08c:	490f      	ldrne	r1, [pc, #60]	; (f0cc <am_hal_ble_tx_power_set+0x88>)
    f08e:	aa01      	add	r2, sp, #4
    f090:	4620      	mov	r0, r4
    f092:	f7ff fd39 	bl	eb08 <am_hal_ble_plf_reg_read>
    f096:	9b01      	ldr	r3, [sp, #4]
    f098:	490a      	ldr	r1, [pc, #40]	; (f0c4 <am_hal_ble_tx_power_set+0x80>)
    f09a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    f09e:	ea43 0205 	orr.w	r2, r3, r5
    f0a2:	9201      	str	r2, [sp, #4]
    f0a4:	68cb      	ldr	r3, [r1, #12]
    f0a6:	b2db      	uxtb	r3, r3
    f0a8:	2b21      	cmp	r3, #33	; 0x21
    f0aa:	bf0c      	ite	eq
    f0ac:	4906      	ldreq	r1, [pc, #24]	; (f0c8 <am_hal_ble_tx_power_set+0x84>)
    f0ae:	4907      	ldrne	r1, [pc, #28]	; (f0cc <am_hal_ble_tx_power_set+0x88>)
    f0b0:	4620      	mov	r0, r4
    f0b2:	f7ff fd9d 	bl	ebf0 <am_hal_ble_plf_reg_write>
    f0b6:	2000      	movs	r0, #0
    f0b8:	b003      	add	sp, #12
    f0ba:	bd30      	pop	{r4, r5, pc}
    f0bc:	43000004 	.word	0x43000004
    f0c0:	52400018 	.word	0x52400018
    f0c4:	40020000 	.word	0x40020000
    f0c8:	20006838 	.word	0x20006838
    f0cc:	20006038 	.word	0x20006038

0000f0d0 <am_hal_clkgen_control>:
    f0d0:	4b49      	ldr	r3, [pc, #292]	; (f1f8 <am_hal_clkgen_control+0x128>)
    f0d2:	681a      	ldr	r2, [r3, #0]
    f0d4:	b912      	cbnz	r2, f0dc <am_hal_clkgen_control+0xc>
    f0d6:	4a49      	ldr	r2, [pc, #292]	; (f1fc <am_hal_clkgen_control+0x12c>)
    f0d8:	6812      	ldr	r2, [r2, #0]
    f0da:	601a      	str	r2, [r3, #0]
    f0dc:	2809      	cmp	r0, #9
    f0de:	f200 8089 	bhi.w	f1f4 <am_hal_clkgen_control+0x124>
    f0e2:	e8df f000 	tbb	[pc, r0]
    f0e6:	160d      	.short	0x160d
    f0e8:	423a261e 	.word	0x423a261e
    f0ec:	055c544c 	.word	0x055c544c
    f0f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    f0f4:	2000      	movs	r0, #0
    f0f6:	6a1a      	ldr	r2, [r3, #32]
    f0f8:	f36f 0200 	bfc	r2, #0, #1
    f0fc:	621a      	str	r2, [r3, #32]
    f0fe:	4770      	bx	lr
    f100:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    f104:	2200      	movs	r2, #0
    f106:	2147      	movs	r1, #71	; 0x47
    f108:	6159      	str	r1, [r3, #20]
    f10a:	4610      	mov	r0, r2
    f10c:	619a      	str	r2, [r3, #24]
    f10e:	615a      	str	r2, [r3, #20]
    f110:	4770      	bx	lr
    f112:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    f116:	2000      	movs	r0, #0
    f118:	899a      	ldrh	r2, [r3, #12]
    f11a:	f36f 0200 	bfc	r2, #0, #1
    f11e:	819a      	strh	r2, [r3, #12]
    f120:	4770      	bx	lr
    f122:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    f126:	2000      	movs	r0, #0
    f128:	899a      	ldrh	r2, [r3, #12]
    f12a:	f36f 0241 	bfc	r2, #1, #1
    f12e:	819a      	strh	r2, [r3, #12]
    f130:	4770      	bx	lr
    f132:	4a33      	ldr	r2, [pc, #204]	; (f200 <am_hal_clkgen_control+0x130>)
    f134:	68d3      	ldr	r3, [r2, #12]
    f136:	b2db      	uxtb	r3, r3
    f138:	2b21      	cmp	r3, #33	; 0x21
    f13a:	d106      	bne.n	f14a <am_hal_clkgen_control+0x7a>
    f13c:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    f140:	2101      	movs	r1, #1
    f142:	f361 2309 	bfi	r3, r1, #8, #2
    f146:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    f14a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    f14e:	2000      	movs	r0, #0
    f150:	8993      	ldrh	r3, [r2, #12]
    f152:	f043 0301 	orr.w	r3, r3, #1
    f156:	8193      	strh	r3, [r2, #12]
    f158:	4770      	bx	lr
    f15a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    f15e:	2000      	movs	r0, #0
    f160:	8993      	ldrh	r3, [r2, #12]
    f162:	f043 0302 	orr.w	r3, r3, #2
    f166:	8193      	strh	r3, [r2, #12]
    f168:	4770      	bx	lr
    f16a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    f16e:	2200      	movs	r2, #0
    f170:	2047      	movs	r0, #71	; 0x47
    f172:	2101      	movs	r1, #1
    f174:	6158      	str	r0, [r3, #20]
    f176:	6199      	str	r1, [r3, #24]
    f178:	4610      	mov	r0, r2
    f17a:	615a      	str	r2, [r3, #20]
    f17c:	4770      	bx	lr
    f17e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    f182:	2000      	movs	r0, #0
    f184:	899a      	ldrh	r2, [r3, #12]
    f186:	f36f 12c7 	bfc	r2, #7, #1
    f18a:	819a      	strh	r2, [r3, #12]
    f18c:	4770      	bx	lr
    f18e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    f192:	2000      	movs	r0, #0
    f194:	8993      	ldrh	r3, [r2, #12]
    f196:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    f19a:	8193      	strh	r3, [r2, #12]
    f19c:	4770      	bx	lr
    f19e:	4a18      	ldr	r2, [pc, #96]	; (f200 <am_hal_clkgen_control+0x130>)
    f1a0:	68d3      	ldr	r3, [r2, #12]
    f1a2:	b2db      	uxtb	r3, r3
    f1a4:	2b21      	cmp	r3, #33	; 0x21
    f1a6:	d00a      	beq.n	f1be <am_hal_clkgen_control+0xee>
    f1a8:	b139      	cbz	r1, f1ba <am_hal_clkgen_control+0xea>
    f1aa:	680b      	ldr	r3, [r1, #0]
    f1ac:	f043 0301 	orr.w	r3, r3, #1
    f1b0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    f1b4:	2000      	movs	r0, #0
    f1b6:	6213      	str	r3, [r2, #32]
    f1b8:	4770      	bx	lr
    f1ba:	4b12      	ldr	r3, [pc, #72]	; (f204 <am_hal_clkgen_control+0x134>)
    f1bc:	e7f8      	b.n	f1b0 <am_hal_clkgen_control+0xe0>
    f1be:	b500      	push	{lr}
    f1c0:	b083      	sub	sp, #12
    f1c2:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
    f1c6:	9101      	str	r1, [sp, #4]
    f1c8:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    f1cc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    f1d0:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    f1d4:	f000 f836 	bl	f244 <am_hal_flash_delay>
    f1d8:	9901      	ldr	r1, [sp, #4]
    f1da:	b149      	cbz	r1, f1f0 <am_hal_clkgen_control+0x120>
    f1dc:	680b      	ldr	r3, [r1, #0]
    f1de:	f043 0301 	orr.w	r3, r3, #1
    f1e2:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    f1e6:	2000      	movs	r0, #0
    f1e8:	6213      	str	r3, [r2, #32]
    f1ea:	b003      	add	sp, #12
    f1ec:	f85d fb04 	ldr.w	pc, [sp], #4
    f1f0:	4b04      	ldr	r3, [pc, #16]	; (f204 <am_hal_clkgen_control+0x134>)
    f1f2:	e7f6      	b.n	f1e2 <am_hal_clkgen_control+0x112>
    f1f4:	2006      	movs	r0, #6
    f1f6:	4770      	bx	lr
    f1f8:	100033e4 	.word	0x100033e4
    f1fc:	4ffff000 	.word	0x4ffff000
    f200:	40020000 	.word	0x40020000
    f204:	0025b801 	.word	0x0025b801

0000f208 <am_hal_clkgen_status_get>:
    f208:	b1b0      	cbz	r0, f238 <am_hal_clkgen_status_get+0x30>
    f20a:	b410      	push	{r4}
    f20c:	f04f 2140 	mov.w	r1, #1073758208	; 0x40004000
    f210:	4603      	mov	r3, r0
    f212:	698c      	ldr	r4, [r1, #24]
    f214:	4809      	ldr	r0, [pc, #36]	; (f23c <am_hal_clkgen_status_get+0x34>)
    f216:	4a0a      	ldr	r2, [pc, #40]	; (f240 <am_hal_clkgen_status_get+0x38>)
    f218:	f014 0f01 	tst.w	r4, #1
    f21c:	bf08      	it	eq
    f21e:	4602      	moveq	r2, r0
    f220:	601a      	str	r2, [r3, #0]
    f222:	69ca      	ldr	r2, [r1, #28]
    f224:	f85d 4b04 	ldr.w	r4, [sp], #4
    f228:	f002 0101 	and.w	r1, r2, #1
    f22c:	f3c2 0240 	ubfx	r2, r2, #1, #1
    f230:	2000      	movs	r0, #0
    f232:	6059      	str	r1, [r3, #4]
    f234:	721a      	strb	r2, [r3, #8]
    f236:	4770      	bx	lr
    f238:	2006      	movs	r0, #6
    f23a:	4770      	bx	lr
    f23c:	02dc6c00 	.word	0x02dc6c00
    f240:	016e3600 	.word	0x016e3600

0000f244 <am_hal_flash_delay>:
    f244:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    f248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    f24a:	075b      	lsls	r3, r3, #29
    f24c:	bf46      	itte	mi
    f24e:	0040      	lslmi	r0, r0, #1
    f250:	230e      	movmi	r3, #14
    f252:	230b      	movpl	r3, #11
    f254:	4298      	cmp	r0, r3
    f256:	d902      	bls.n	f25e <am_hal_flash_delay+0x1a>
    f258:	4a01      	ldr	r2, [pc, #4]	; (f260 <am_hal_flash_delay+0x1c>)
    f25a:	1ac0      	subs	r0, r0, r3
    f25c:	4710      	bx	r2
    f25e:	4770      	bx	lr
    f260:	0800009d 	.word	0x0800009d

0000f264 <am_hal_flash_delay_status_check>:
    f264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f268:	f89d c020 	ldrb.w	ip, [sp, #32]
    f26c:	f8df 805c 	ldr.w	r8, [pc, #92]	; f2cc <am_hal_flash_delay_status_check+0x68>
    f270:	4604      	mov	r4, r0
    f272:	460d      	mov	r5, r1
    f274:	4616      	mov	r6, r2
    f276:	461f      	mov	r7, r3
    f278:	f04f 2940 	mov.w	r9, #1073758208	; 0x40004000
    f27c:	f1bc 0f00 	cmp.w	ip, #0
    f280:	d00a      	beq.n	f298 <am_hal_flash_delay_status_check+0x34>
    f282:	e01a      	b.n	f2ba <am_hal_flash_delay_status_check+0x56>
    f284:	b1f4      	cbz	r4, f2c4 <am_hal_flash_delay_status_check+0x60>
    f286:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    f28a:	f013 0f04 	tst.w	r3, #4
    f28e:	bf0c      	ite	eq
    f290:	2005      	moveq	r0, #5
    f292:	2012      	movne	r0, #18
    f294:	3c01      	subs	r4, #1
    f296:	47c0      	blx	r8
    f298:	6828      	ldr	r0, [r5, #0]
    f29a:	4030      	ands	r0, r6
    f29c:	42b8      	cmp	r0, r7
    f29e:	d0f1      	beq.n	f284 <am_hal_flash_delay_status_check+0x20>
    f2a0:	2000      	movs	r0, #0
    f2a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f2a6:	b16c      	cbz	r4, f2c4 <am_hal_flash_delay_status_check+0x60>
    f2a8:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    f2ac:	f013 0f04 	tst.w	r3, #4
    f2b0:	bf0c      	ite	eq
    f2b2:	2005      	moveq	r0, #5
    f2b4:	2012      	movne	r0, #18
    f2b6:	3c01      	subs	r4, #1
    f2b8:	47c0      	blx	r8
    f2ba:	6828      	ldr	r0, [r5, #0]
    f2bc:	4030      	ands	r0, r6
    f2be:	42b8      	cmp	r0, r7
    f2c0:	d1f1      	bne.n	f2a6 <am_hal_flash_delay_status_check+0x42>
    f2c2:	e7ed      	b.n	f2a0 <am_hal_flash_delay_status_check+0x3c>
    f2c4:	2004      	movs	r0, #4
    f2c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f2ca:	bf00      	nop
    f2cc:	0800009d 	.word	0x0800009d

0000f2d0 <am_hal_flash_load_ui32>:
    f2d0:	4b00      	ldr	r3, [pc, #0]	; (f2d4 <am_hal_flash_load_ui32+0x4>)
    f2d2:	4718      	bx	r3
    f2d4:	08000075 	.word	0x08000075

0000f2d8 <am_hal_flash_store_ui32>:
    f2d8:	4b01      	ldr	r3, [pc, #4]	; (f2e0 <am_hal_flash_store_ui32+0x8>)
    f2da:	f043 0301 	orr.w	r3, r3, #1
    f2de:	4718      	bx	r3
    f2e0:	100021ec 	.word	0x100021ec

0000f2e4 <am_hal_gpio_pinconfig>:
    f2e4:	2831      	cmp	r0, #49	; 0x31
    f2e6:	f200 80c3 	bhi.w	f470 <am_hal_gpio_pinconfig+0x18c>
    f2ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f2ee:	4604      	mov	r4, r0
    f2f0:	f011 07e0 	ands.w	r7, r1, #224	; 0xe0
    f2f4:	f001 0007 	and.w	r0, r1, #7
    f2f8:	b085      	sub	sp, #20
    f2fa:	f3c1 03c1 	ubfx	r3, r1, #3, #2
    f2fe:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    f302:	d00f      	beq.n	f324 <am_hal_gpio_pinconfig+0x40>
    f304:	f3c1 1642 	ubfx	r6, r1, #5, #3
    f308:	1db5      	adds	r5, r6, #6
    f30a:	f005 0507 	and.w	r5, r5, #7
    f30e:	2d03      	cmp	r5, #3
    f310:	f042 0201 	orr.w	r2, r2, #1
    f314:	f240 80ae 	bls.w	f474 <am_hal_gpio_pinconfig+0x190>
    f318:	2fc0      	cmp	r7, #192	; 0xc0
    f31a:	f000 80e1 	beq.w	f4e0 <am_hal_gpio_pinconfig+0x1fc>
    f31e:	2f20      	cmp	r7, #32
    f320:	f000 80e3 	beq.w	f4ea <am_hal_gpio_pinconfig+0x206>
    f324:	b163      	cbz	r3, f340 <am_hal_gpio_pinconfig+0x5c>
    f326:	2b01      	cmp	r3, #1
    f328:	f000 80d3 	beq.w	f4d2 <am_hal_gpio_pinconfig+0x1ee>
    f32c:	2b02      	cmp	r3, #2
    f32e:	f040 80c9 	bne.w	f4c4 <am_hal_gpio_pinconfig+0x1e0>
    f332:	4b79      	ldr	r3, [pc, #484]	; (f518 <am_hal_gpio_pinconfig+0x234>)
    f334:	5d1b      	ldrb	r3, [r3, r4]
    f336:	075b      	lsls	r3, r3, #29
    f338:	f140 80c4 	bpl.w	f4c4 <am_hal_gpio_pinconfig+0x1e0>
    f33c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    f340:	4b76      	ldr	r3, [pc, #472]	; (f51c <am_hal_gpio_pinconfig+0x238>)
    f342:	5d1b      	ldrb	r3, [r3, r4]
    f344:	4103      	asrs	r3, r0
    f346:	005b      	lsls	r3, r3, #1
    f348:	f003 0302 	and.w	r3, r3, #2
    f34c:	4313      	orrs	r3, r2
    f34e:	4a74      	ldr	r2, [pc, #464]	; (f520 <am_hal_gpio_pinconfig+0x23c>)
    f350:	5d12      	ldrb	r2, [r2, r4]
    f352:	4282      	cmp	r2, r0
    f354:	f000 8099 	beq.w	f48a <am_hal_gpio_pinconfig+0x1a6>
    f358:	f3c1 3000 	ubfx	r0, r1, #12, #1
    f35c:	f3c1 2581 	ubfx	r5, r1, #10, #2
    f360:	f3c1 3280 	ubfx	r2, r1, #14, #1
    f364:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
    f368:	0a88      	lsrs	r0, r1, #10
    f36a:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    f36e:	f000 0008 	and.w	r0, r0, #8
    f372:	4302      	orrs	r2, r0
    f374:	f3c1 2007 	ubfx	r0, r1, #8, #8
    f378:	f000 050c 	and.w	r5, r0, #12
    f37c:	2d04      	cmp	r5, #4
    f37e:	f000 80a5 	beq.w	f4cc <am_hal_gpio_pinconfig+0x1e8>
    f382:	4d68      	ldr	r5, [pc, #416]	; (f524 <am_hal_gpio_pinconfig+0x240>)
    f384:	682d      	ldr	r5, [r5, #0]
    f386:	eba1 0805 	sub.w	r8, r1, r5
    f38a:	fab8 f888 	clz	r8, r8
    f38e:	ea4f 1858 	mov.w	r8, r8, lsr #5
    f392:	f010 0f60 	tst.w	r0, #96	; 0x60
    f396:	bf04      	itt	eq
    f398:	f3c1 30c0 	ubfxeq	r0, r1, #15, #1
    f39c:	f360 0200 	bfieq	r2, r0, #0, #1
    f3a0:	00a0      	lsls	r0, r4, #2
    f3a2:	f3c1 2101 	ubfx	r1, r1, #8, #2
    f3a6:	2902      	cmp	r1, #2
    f3a8:	d05c      	beq.n	f464 <am_hal_gpio_pinconfig+0x180>
    f3aa:	2903      	cmp	r1, #3
    f3ac:	d058      	beq.n	f460 <am_hal_gpio_pinconfig+0x17c>
    f3ae:	2901      	cmp	r1, #1
    f3b0:	ea4f 01c4 	mov.w	r1, r4, lsl #3
    f3b4:	bf08      	it	eq
    f3b6:	f043 0304 	orreq.w	r3, r3, #4
    f3ba:	f001 0118 	and.w	r1, r1, #24
    f3be:	2700      	movs	r7, #0
    f3c0:	f000 001c 	and.w	r0, r0, #28
    f3c4:	fa02 f600 	lsl.w	r6, r2, r0
    f3c8:	220f      	movs	r2, #15
    f3ca:	4082      	lsls	r2, r0
    f3cc:	43d2      	mvns	r2, r2
    f3ce:	f04f 09ff 	mov.w	r9, #255	; 0xff
    f3d2:	fa03 f501 	lsl.w	r5, r3, r1
    f3d6:	fa09 f901 	lsl.w	r9, r9, r1
    f3da:	9201      	str	r2, [sp, #4]
    f3dc:	f000 f900 	bl	f5e0 <am_hal_interrupt_master_disable>
    f3e0:	f024 0a03 	bic.w	sl, r4, #3
    f3e4:	ea4f 0b54 	mov.w	fp, r4, lsr #1
    f3e8:	f10a 4c80 	add.w	ip, sl, #1073741824	; 0x40000000
    f3ec:	4b4e      	ldr	r3, [pc, #312]	; (f528 <am_hal_gpio_pinconfig+0x244>)
    f3ee:	494f      	ldr	r1, [pc, #316]	; (f52c <am_hal_gpio_pinconfig+0x248>)
    f3f0:	9a01      	ldr	r2, [sp, #4]
    f3f2:	9003      	str	r0, [sp, #12]
    f3f4:	ea6f 0909 	mvn.w	r9, r9
    f3f8:	f02b 0b03 	bic.w	fp, fp, #3
    f3fc:	f50c 3c80 	add.w	ip, ip, #65536	; 0x10000
    f400:	f1b8 0f00 	cmp.w	r8, #0
    f404:	d00b      	beq.n	f41e <am_hal_gpio_pinconfig+0x13a>
    f406:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
    f40a:	f004 081f 	and.w	r8, r4, #31
    f40e:	4848      	ldr	r0, [pc, #288]	; (f530 <am_hal_gpio_pinconfig+0x24c>)
    f410:	f00e 0e04 	and.w	lr, lr, #4
    f414:	2401      	movs	r4, #1
    f416:	fa04 f408 	lsl.w	r4, r4, r8
    f41a:	f84e 4000 	str.w	r4, [lr, r0]
    f41e:	4845      	ldr	r0, [pc, #276]	; (f534 <am_hal_gpio_pinconfig+0x250>)
    f420:	2473      	movs	r4, #115	; 0x73
    f422:	6604      	str	r4, [r0, #96]	; 0x60
    f424:	f8dc 4000 	ldr.w	r4, [ip]
    f428:	ea04 0409 	and.w	r4, r4, r9
    f42c:	4325      	orrs	r5, r4
    f42e:	f8cc 5000 	str.w	r5, [ip]
    f432:	f85b 4003 	ldr.w	r4, [fp, r3]
    f436:	4022      	ands	r2, r4
    f438:	4332      	orrs	r2, r6
    f43a:	f84b 2003 	str.w	r2, [fp, r3]
    f43e:	f85a 3001 	ldr.w	r3, [sl, r1]
    f442:	ea03 0909 	and.w	r9, r3, r9
    f446:	2400      	movs	r4, #0
    f448:	ea49 0707 	orr.w	r7, r9, r7
    f44c:	f84a 7001 	str.w	r7, [sl, r1]
    f450:	6604      	str	r4, [r0, #96]	; 0x60
    f452:	9803      	ldr	r0, [sp, #12]
    f454:	f000 f8c8 	bl	f5e8 <am_hal_interrupt_master_set>
    f458:	4620      	mov	r0, r4
    f45a:	b005      	add	sp, #20
    f45c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f460:	f043 0304 	orr.w	r3, r3, #4
    f464:	00e1      	lsls	r1, r4, #3
    f466:	f001 0118 	and.w	r1, r1, #24
    f46a:	2701      	movs	r7, #1
    f46c:	408f      	lsls	r7, r1
    f46e:	e7a7      	b.n	f3c0 <am_hal_gpio_pinconfig+0xdc>
    f470:	2006      	movs	r0, #6
    f472:	4770      	bx	lr
    f474:	4d28      	ldr	r5, [pc, #160]	; (f518 <am_hal_gpio_pinconfig+0x234>)
    f476:	5d2d      	ldrb	r5, [r5, r4]
    f478:	3e02      	subs	r6, #2
    f47a:	ea42 1286 	orr.w	r2, r2, r6, lsl #6
    f47e:	07ee      	lsls	r6, r5, #31
    f480:	d536      	bpl.n	f4f0 <am_hal_gpio_pinconfig+0x20c>
    f482:	2b00      	cmp	r3, #0
    f484:	f43f af5c 	beq.w	f340 <am_hal_gpio_pinconfig+0x5c>
    f488:	e74d      	b.n	f326 <am_hal_gpio_pinconfig+0x42>
    f48a:	f3c1 4202 	ubfx	r2, r1, #16, #3
    f48e:	2a07      	cmp	r2, #7
    f490:	d030      	beq.n	f4f4 <am_hal_gpio_pinconfig+0x210>
    f492:	4d29      	ldr	r5, [pc, #164]	; (f538 <am_hal_gpio_pinconfig+0x254>)
    f494:	f3c1 40c1 	ubfx	r0, r1, #19, #2
    f498:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
    f49c:	f815 0024 	ldrb.w	r0, [r5, r4, lsl #2]
    f4a0:	4290      	cmp	r0, r2
    f4a2:	d029      	beq.n	f4f8 <am_hal_gpio_pinconfig+0x214>
    f4a4:	eb05 0584 	add.w	r5, r5, r4, lsl #2
    f4a8:	00a0      	lsls	r0, r4, #2
    f4aa:	786e      	ldrb	r6, [r5, #1]
    f4ac:	4296      	cmp	r6, r2
    f4ae:	d02d      	beq.n	f50c <am_hal_gpio_pinconfig+0x228>
    f4b0:	78ae      	ldrb	r6, [r5, #2]
    f4b2:	4296      	cmp	r6, r2
    f4b4:	d02c      	beq.n	f510 <am_hal_gpio_pinconfig+0x22c>
    f4b6:	78ed      	ldrb	r5, [r5, #3]
    f4b8:	4295      	cmp	r5, r2
    f4ba:	d02b      	beq.n	f514 <am_hal_gpio_pinconfig+0x230>
    f4bc:	481f      	ldr	r0, [pc, #124]	; (f53c <am_hal_gpio_pinconfig+0x258>)
    f4be:	b005      	add	sp, #20
    f4c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f4c4:	481e      	ldr	r0, [pc, #120]	; (f540 <am_hal_gpio_pinconfig+0x25c>)
    f4c6:	b005      	add	sp, #20
    f4c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f4cc:	f04f 0801 	mov.w	r8, #1
    f4d0:	e75f      	b.n	f392 <am_hal_gpio_pinconfig+0xae>
    f4d2:	4b11      	ldr	r3, [pc, #68]	; (f518 <am_hal_gpio_pinconfig+0x234>)
    f4d4:	5d1b      	ldrb	r3, [r3, r4]
    f4d6:	079d      	lsls	r5, r3, #30
    f4d8:	d5f4      	bpl.n	f4c4 <am_hal_gpio_pinconfig+0x1e0>
    f4da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    f4de:	e72f      	b.n	f340 <am_hal_gpio_pinconfig+0x5c>
    f4e0:	2c14      	cmp	r4, #20
    f4e2:	f43f af1f 	beq.w	f324 <am_hal_gpio_pinconfig+0x40>
    f4e6:	4817      	ldr	r0, [pc, #92]	; (f544 <am_hal_gpio_pinconfig+0x260>)
    f4e8:	e7b7      	b.n	f45a <am_hal_gpio_pinconfig+0x176>
    f4ea:	2c14      	cmp	r4, #20
    f4ec:	f47f af1a 	bne.w	f324 <am_hal_gpio_pinconfig+0x40>
    f4f0:	4815      	ldr	r0, [pc, #84]	; (f548 <am_hal_gpio_pinconfig+0x264>)
    f4f2:	e7b2      	b.n	f45a <am_hal_gpio_pinconfig+0x176>
    f4f4:	4815      	ldr	r0, [pc, #84]	; (f54c <am_hal_gpio_pinconfig+0x268>)
    f4f6:	e7b0      	b.n	f45a <am_hal_gpio_pinconfig+0x176>
    f4f8:	2200      	movs	r2, #0
    f4fa:	00a0      	lsls	r0, r4, #2
    f4fc:	0052      	lsls	r2, r2, #1
    f4fe:	f3c1 5540 	ubfx	r5, r1, #21, #1
    f502:	ea42 02c5 	orr.w	r2, r2, r5, lsl #3
    f506:	f04f 0800 	mov.w	r8, #0
    f50a:	e74a      	b.n	f3a2 <am_hal_gpio_pinconfig+0xbe>
    f50c:	2201      	movs	r2, #1
    f50e:	e7f5      	b.n	f4fc <am_hal_gpio_pinconfig+0x218>
    f510:	2202      	movs	r2, #2
    f512:	e7f3      	b.n	f4fc <am_hal_gpio_pinconfig+0x218>
    f514:	2203      	movs	r2, #3
    f516:	e7f1      	b.n	f4fc <am_hal_gpio_pinconfig+0x218>
    f518:	000125e8 	.word	0x000125e8
    f51c:	0001261c 	.word	0x0001261c
    f520:	00012718 	.word	0x00012718
    f524:	000125e0 	.word	0x000125e0
    f528:	40010040 	.word	0x40010040
    f52c:	400100e0 	.word	0x400100e0
    f530:	400100b4 	.word	0x400100b4
    f534:	40010000 	.word	0x40010000
    f538:	00012650 	.word	0x00012650
    f53c:	08000104 	.word	0x08000104
    f540:	08000102 	.word	0x08000102
    f544:	08000101 	.word	0x08000101
    f548:	08000100 	.word	0x08000100
    f54c:	08000103 	.word	0x08000103

0000f550 <am_hal_gpio_state_write>:
    f550:	2831      	cmp	r0, #49	; 0x31
    f552:	d81a      	bhi.n	f58a <am_hal_gpio_state_write+0x3a>
    f554:	b570      	push	{r4, r5, r6, lr}
    f556:	2905      	cmp	r1, #5
    f558:	b082      	sub	sp, #8
    f55a:	460d      	mov	r5, r1
    f55c:	d812      	bhi.n	f584 <am_hal_gpio_state_write+0x34>
    f55e:	f000 031f 	and.w	r3, r0, #31
    f562:	2201      	movs	r2, #1
    f564:	08c0      	lsrs	r0, r0, #3
    f566:	fa02 f603 	lsl.w	r6, r2, r3
    f56a:	f000 0404 	and.w	r4, r0, #4
    f56e:	f000 f837 	bl	f5e0 <am_hal_interrupt_master_disable>
    f572:	3d01      	subs	r5, #1
    f574:	9001      	str	r0, [sp, #4]
    f576:	2d04      	cmp	r5, #4
    f578:	d821      	bhi.n	f5be <am_hal_gpio_state_write+0x6e>
    f57a:	e8df f005 	tbb	[pc, r5]
    f57e:	1512      	.short	0x1512
    f580:	1d1a      	.short	0x1d1a
    f582:	08          	.byte	0x08
    f583:	00          	.byte	0x00
    f584:	2006      	movs	r0, #6
    f586:	b002      	add	sp, #8
    f588:	bd70      	pop	{r4, r5, r6, pc}
    f58a:	2005      	movs	r0, #5
    f58c:	4770      	bx	lr
    f58e:	4a0d      	ldr	r2, [pc, #52]	; (f5c4 <am_hal_gpio_state_write+0x74>)
    f590:	58a3      	ldr	r3, [r4, r2]
    f592:	4073      	eors	r3, r6
    f594:	50a3      	str	r3, [r4, r2]
    f596:	9801      	ldr	r0, [sp, #4]
    f598:	f000 f826 	bl	f5e8 <am_hal_interrupt_master_set>
    f59c:	2000      	movs	r0, #0
    f59e:	b002      	add	sp, #8
    f5a0:	bd70      	pop	{r4, r5, r6, pc}
    f5a2:	4b09      	ldr	r3, [pc, #36]	; (f5c8 <am_hal_gpio_state_write+0x78>)
    f5a4:	50e6      	str	r6, [r4, r3]
    f5a6:	e7f6      	b.n	f596 <am_hal_gpio_state_write+0x46>
    f5a8:	4a08      	ldr	r2, [pc, #32]	; (f5cc <am_hal_gpio_state_write+0x7c>)
    f5aa:	58a3      	ldr	r3, [r4, r2]
    f5ac:	4073      	eors	r3, r6
    f5ae:	50a3      	str	r3, [r4, r2]
    f5b0:	e7f1      	b.n	f596 <am_hal_gpio_state_write+0x46>
    f5b2:	4b04      	ldr	r3, [pc, #16]	; (f5c4 <am_hal_gpio_state_write+0x74>)
    f5b4:	50e6      	str	r6, [r4, r3]
    f5b6:	e7ee      	b.n	f596 <am_hal_gpio_state_write+0x46>
    f5b8:	4b05      	ldr	r3, [pc, #20]	; (f5d0 <am_hal_gpio_state_write+0x80>)
    f5ba:	50e6      	str	r6, [r4, r3]
    f5bc:	e7eb      	b.n	f596 <am_hal_gpio_state_write+0x46>
    f5be:	4b05      	ldr	r3, [pc, #20]	; (f5d4 <am_hal_gpio_state_write+0x84>)
    f5c0:	50e6      	str	r6, [r4, r3]
    f5c2:	e7e8      	b.n	f596 <am_hal_gpio_state_write+0x46>
    f5c4:	400100b4 	.word	0x400100b4
    f5c8:	40010090 	.word	0x40010090
    f5cc:	40010088 	.word	0x40010088
    f5d0:	400100a8 	.word	0x400100a8
    f5d4:	40010098 	.word	0x40010098

0000f5d8 <am_hal_interrupt_master_enable>:
    f5d8:	f3ef 8010 	mrs	r0, PRIMASK
    f5dc:	b662      	cpsie	i
    f5de:	4770      	bx	lr

0000f5e0 <am_hal_interrupt_master_disable>:
    f5e0:	f3ef 8010 	mrs	r0, PRIMASK
    f5e4:	b672      	cpsid	i
    f5e6:	4770      	bx	lr

0000f5e8 <am_hal_interrupt_master_set>:
    f5e8:	f380 8810 	msr	PRIMASK, r0
    f5ec:	4770      	bx	lr
    f5ee:	bf00      	nop

0000f5f0 <am_hal_itm_enable>:
    f5f0:	4a0e      	ldr	r2, [pc, #56]	; (f62c <am_hal_itm_enable+0x3c>)
    f5f2:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    f5f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    f5fa:	b410      	push	{r4}
    f5fc:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    f600:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    f604:	01db      	lsls	r3, r3, #7
    f606:	d5fb      	bpl.n	f600 <am_hal_itm_enable+0x10>
    f608:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
    f60c:	4c08      	ldr	r4, [pc, #32]	; (f630 <am_hal_itm_enable+0x40>)
    f60e:	4a09      	ldr	r2, [pc, #36]	; (f634 <am_hal_itm_enable+0x44>)
    f610:	f8c3 4fb0 	str.w	r4, [r3, #4016]	; 0xfb0
    f614:	200f      	movs	r0, #15
    f616:	f04f 31ff 	mov.w	r1, #4294967295
    f61a:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
    f61e:	f85d 4b04 	ldr.w	r4, [sp], #4
    f622:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
    f626:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
    f62a:	4770      	bx	lr
    f62c:	e000ed00 	.word	0xe000ed00
    f630:	c5acce55 	.word	0xc5acce55
    f634:	00150511 	.word	0x00150511

0000f638 <am_hal_itm_print>:
    f638:	7803      	ldrb	r3, [r0, #0]
    f63a:	b1a3      	cbz	r3, f666 <am_hal_itm_print+0x2e>
    f63c:	4603      	mov	r3, r0
    f63e:	f1c0 0c01 	rsb	ip, r0, #1
    f642:	eb0c 0103 	add.w	r1, ip, r3
    f646:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    f64a:	2a00      	cmp	r2, #0
    f64c:	d1f9      	bne.n	f642 <am_hal_itm_print+0xa>
    f64e:	4401      	add	r1, r0
    f650:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    f654:	f810 cb01 	ldrb.w	ip, [r0], #1
    f658:	6813      	ldr	r3, [r2, #0]
    f65a:	2b00      	cmp	r3, #0
    f65c:	d0fc      	beq.n	f658 <am_hal_itm_print+0x20>
    f65e:	4288      	cmp	r0, r1
    f660:	f882 c000 	strb.w	ip, [r2]
    f664:	d1f6      	bne.n	f654 <am_hal_itm_print+0x1c>
    f666:	4770      	bx	lr

0000f668 <am_hal_mcuctrl_info_get>:
    f668:	2900      	cmp	r1, #0
    f66a:	f000 808f 	beq.w	f78c <am_hal_mcuctrl_info_get+0x124>
    f66e:	2801      	cmp	r0, #1
    f670:	b430      	push	{r4, r5}
    f672:	d006      	beq.n	f682 <am_hal_mcuctrl_info_get+0x1a>
    f674:	2802      	cmp	r0, #2
    f676:	d06d      	beq.n	f754 <am_hal_mcuctrl_info_get+0xec>
    f678:	2800      	cmp	r0, #0
    f67a:	d055      	beq.n	f728 <am_hal_mcuctrl_info_get+0xc0>
    f67c:	2006      	movs	r0, #6
    f67e:	bc30      	pop	{r4, r5}
    f680:	4770      	bx	lr
    f682:	4a43      	ldr	r2, [pc, #268]	; (f790 <am_hal_mcuctrl_info_get+0x128>)
    f684:	4843      	ldr	r0, [pc, #268]	; (f794 <am_hal_mcuctrl_info_get+0x12c>)
    f686:	6813      	ldr	r3, [r2, #0]
    f688:	600b      	str	r3, [r1, #0]
    f68a:	6854      	ldr	r4, [r2, #4]
    f68c:	604c      	str	r4, [r1, #4]
    f68e:	6894      	ldr	r4, [r2, #8]
    f690:	608c      	str	r4, [r1, #8]
    f692:	68d4      	ldr	r4, [r2, #12]
    f694:	60cc      	str	r4, [r1, #12]
    f696:	f3c3 5503 	ubfx	r5, r3, #20, #4
    f69a:	6914      	ldr	r4, [r2, #16]
    f69c:	610c      	str	r4, [r1, #16]
    f69e:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
    f6a2:	4c3d      	ldr	r4, [pc, #244]	; (f798 <am_hal_mcuctrl_info_get+0x130>)
    f6a4:	6950      	ldr	r0, [r2, #20]
    f6a6:	6148      	str	r0, [r1, #20]
    f6a8:	f003 0201 	and.w	r2, r3, #1
    f6ac:	f3c3 4303 	ubfx	r3, r3, #16, #4
    f6b0:	e9c1 2506 	strd	r2, r5, [r1, #24]
    f6b4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    f6b8:	4a38      	ldr	r2, [pc, #224]	; (f79c <am_hal_mcuctrl_info_get+0x134>)
    f6ba:	620b      	str	r3, [r1, #32]
    f6bc:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
    f6c0:	f8d2 00e4 	ldr.w	r0, [r2, #228]	; 0xe4
    f6c4:	b2db      	uxtb	r3, r3
    f6c6:	f000 000f 	and.w	r0, r0, #15
    f6ca:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    f6ce:	624b      	str	r3, [r1, #36]	; 0x24
    f6d0:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    f6d4:	f8d2 00e8 	ldr.w	r0, [r2, #232]	; 0xe8
    f6d8:	f3c3 1303 	ubfx	r3, r3, #4, #4
    f6dc:	f000 000f 	and.w	r0, r0, #15
    f6e0:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
    f6e4:	628b      	str	r3, [r1, #40]	; 0x28
    f6e6:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
    f6ea:	f8d2 00ec 	ldr.w	r0, [r2, #236]	; 0xec
    f6ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    f6f2:	f3c0 1003 	ubfx	r0, r0, #4, #4
    f6f6:	4303      	orrs	r3, r0
    f6f8:	62cb      	str	r3, [r1, #44]	; 0x2c
    f6fa:	f8d2 40fc 	ldr.w	r4, [r2, #252]	; 0xfc
    f6fe:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    f702:	f8d2 00f4 	ldr.w	r0, [r2, #244]	; 0xf4
    f706:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
    f70a:	b2db      	uxtb	r3, r3
    f70c:	041b      	lsls	r3, r3, #16
    f70e:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
    f712:	fa5f fc82 	uxtb.w	ip, r2
    f716:	ea43 030c 	orr.w	r3, r3, ip
    f71a:	b2c2      	uxtb	r2, r0
    f71c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    f720:	630b      	str	r3, [r1, #48]	; 0x30
    f722:	2000      	movs	r0, #0
    f724:	bc30      	pop	{r4, r5}
    f726:	4770      	bx	lr
    f728:	4a19      	ldr	r2, [pc, #100]	; (f790 <am_hal_mcuctrl_info_get+0x128>)
    f72a:	6993      	ldr	r3, [r2, #24]
    f72c:	f3c3 1480 	ubfx	r4, r3, #6, #1
    f730:	700c      	strb	r4, [r1, #0]
    f732:	f8d2 41a0 	ldr.w	r4, [r2, #416]	; 0x1a0
    f736:	f3c3 0380 	ubfx	r3, r3, #2, #1
    f73a:	704b      	strb	r3, [r1, #1]
    f73c:	f3c4 6381 	ubfx	r3, r4, #26, #2
    f740:	710b      	strb	r3, [r1, #4]
    f742:	6953      	ldr	r3, [r2, #20]
    f744:	f3c3 0240 	ubfx	r2, r3, #1, #1
    f748:	f003 0301 	and.w	r3, r3, #1
    f74c:	bc30      	pop	{r4, r5}
    f74e:	708a      	strb	r2, [r1, #2]
    f750:	70cb      	strb	r3, [r1, #3]
    f752:	4770      	bx	lr
    f754:	4a0e      	ldr	r2, [pc, #56]	; (f790 <am_hal_mcuctrl_info_get+0x128>)
    f756:	6848      	ldr	r0, [r1, #4]
    f758:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
    f75c:	f003 0401 	and.w	r4, r3, #1
    f760:	700c      	strb	r4, [r1, #0]
    f762:	f3c3 0440 	ubfx	r4, r3, #1, #1
    f766:	720c      	strb	r4, [r1, #8]
    f768:	f8d2 41c4 	ldr.w	r4, [r2, #452]	; 0x1c4
    f76c:	60cc      	str	r4, [r1, #12]
    f76e:	f8d2 41c0 	ldr.w	r4, [r2, #448]	; 0x1c0
    f772:	4320      	orrs	r0, r4
    f774:	f3c3 0380 	ubfx	r3, r3, #2, #1
    f778:	6048      	str	r0, [r1, #4]
    f77a:	f8d2 21c8 	ldr.w	r2, [r2, #456]	; 0x1c8
    f77e:	740b      	strb	r3, [r1, #16]
    f780:	694b      	ldr	r3, [r1, #20]
    f782:	4313      	orrs	r3, r2
    f784:	2000      	movs	r0, #0
    f786:	bc30      	pop	{r4, r5}
    f788:	614b      	str	r3, [r1, #20]
    f78a:	4770      	bx	lr
    f78c:	2006      	movs	r0, #6
    f78e:	4770      	bx	lr
    f790:	40020000 	.word	0x40020000
    f794:	0001274c 	.word	0x0001274c
    f798:	0001278c 	.word	0x0001278c
    f79c:	f0000f00 	.word	0xf0000f00

0000f7a0 <am_hal_pwrctrl_periph_enable>:
    f7a0:	b570      	push	{r4, r5, r6, lr}
    f7a2:	b082      	sub	sp, #8
    f7a4:	4604      	mov	r4, r0
    f7a6:	f7ff ff1b 	bl	f5e0 <am_hal_interrupt_master_disable>
    f7aa:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    f7ae:	4e0f      	ldr	r6, [pc, #60]	; (f7ec <am_hal_pwrctrl_periph_enable+0x4c>)
    f7b0:	4d0f      	ldr	r5, [pc, #60]	; (f7f0 <am_hal_pwrctrl_periph_enable+0x50>)
    f7b2:	9001      	str	r0, [sp, #4]
    f7b4:	00a4      	lsls	r4, r4, #2
    f7b6:	68b3      	ldr	r3, [r6, #8]
    f7b8:	592a      	ldr	r2, [r5, r4]
    f7ba:	4313      	orrs	r3, r2
    f7bc:	60b3      	str	r3, [r6, #8]
    f7be:	9801      	ldr	r0, [sp, #4]
    f7c0:	442c      	add	r4, r5
    f7c2:	f7ff ff11 	bl	f5e8 <am_hal_interrupt_master_set>
    f7c6:	20a0      	movs	r0, #160	; 0xa0
    f7c8:	f7ff fd3c 	bl	f244 <am_hal_flash_delay>
    f7cc:	69b3      	ldr	r3, [r6, #24]
    f7ce:	6864      	ldr	r4, [r4, #4]
    f7d0:	4223      	tst	r3, r4
    f7d2:	d103      	bne.n	f7dc <am_hal_pwrctrl_periph_enable+0x3c>
    f7d4:	20a0      	movs	r0, #160	; 0xa0
    f7d6:	f7ff fd35 	bl	f244 <am_hal_flash_delay>
    f7da:	69b3      	ldr	r3, [r6, #24]
    f7dc:	4b03      	ldr	r3, [pc, #12]	; (f7ec <am_hal_pwrctrl_periph_enable+0x4c>)
    f7de:	699b      	ldr	r3, [r3, #24]
    f7e0:	4223      	tst	r3, r4
    f7e2:	bf0c      	ite	eq
    f7e4:	2001      	moveq	r0, #1
    f7e6:	2000      	movne	r0, #0
    f7e8:	b002      	add	sp, #8
    f7ea:	bd70      	pop	{r4, r5, r6, pc}
    f7ec:	40021000 	.word	0x40021000
    f7f0:	000127cc 	.word	0x000127cc

0000f7f4 <am_hal_pwrctrl_periph_disable>:
    f7f4:	b570      	push	{r4, r5, r6, lr}
    f7f6:	b082      	sub	sp, #8
    f7f8:	4604      	mov	r4, r0
    f7fa:	f7ff fef1 	bl	f5e0 <am_hal_interrupt_master_disable>
    f7fe:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    f802:	4e10      	ldr	r6, [pc, #64]	; (f844 <am_hal_pwrctrl_periph_disable+0x50>)
    f804:	4d10      	ldr	r5, [pc, #64]	; (f848 <am_hal_pwrctrl_periph_disable+0x54>)
    f806:	9001      	str	r0, [sp, #4]
    f808:	00a4      	lsls	r4, r4, #2
    f80a:	68b3      	ldr	r3, [r6, #8]
    f80c:	592a      	ldr	r2, [r5, r4]
    f80e:	ea23 0302 	bic.w	r3, r3, r2
    f812:	60b3      	str	r3, [r6, #8]
    f814:	9801      	ldr	r0, [sp, #4]
    f816:	442c      	add	r4, r5
    f818:	f7ff fee6 	bl	f5e8 <am_hal_interrupt_master_set>
    f81c:	20a0      	movs	r0, #160	; 0xa0
    f81e:	f7ff fd11 	bl	f244 <am_hal_flash_delay>
    f822:	69b3      	ldr	r3, [r6, #24]
    f824:	6864      	ldr	r4, [r4, #4]
    f826:	4223      	tst	r3, r4
    f828:	d003      	beq.n	f832 <am_hal_pwrctrl_periph_disable+0x3e>
    f82a:	20a0      	movs	r0, #160	; 0xa0
    f82c:	f7ff fd0a 	bl	f244 <am_hal_flash_delay>
    f830:	69b3      	ldr	r3, [r6, #24]
    f832:	4b04      	ldr	r3, [pc, #16]	; (f844 <am_hal_pwrctrl_periph_disable+0x50>)
    f834:	699b      	ldr	r3, [r3, #24]
    f836:	4223      	tst	r3, r4
    f838:	bf14      	ite	ne
    f83a:	2001      	movne	r0, #1
    f83c:	2000      	moveq	r0, #0
    f83e:	b002      	add	sp, #8
    f840:	bd70      	pop	{r4, r5, r6, pc}
    f842:	bf00      	nop
    f844:	40021000 	.word	0x40021000
    f848:	000127cc 	.word	0x000127cc

0000f84c <am_hal_pwrctrl_low_power_init>:
    f84c:	b530      	push	{r4, r5, lr}
    f84e:	4b69      	ldr	r3, [pc, #420]	; (f9f4 <am_hal_pwrctrl_low_power_init+0x1a8>)
    f850:	681a      	ldr	r2, [r3, #0]
    f852:	b085      	sub	sp, #20
    f854:	b912      	cbnz	r2, f85c <am_hal_pwrctrl_low_power_init+0x10>
    f856:	4a68      	ldr	r2, [pc, #416]	; (f9f8 <am_hal_pwrctrl_low_power_init+0x1ac>)
    f858:	6812      	ldr	r2, [r2, #0]
    f85a:	601a      	str	r2, [r3, #0]
    f85c:	4b67      	ldr	r3, [pc, #412]	; (f9fc <am_hal_pwrctrl_low_power_init+0x1b0>)
    f85e:	68db      	ldr	r3, [r3, #12]
    f860:	b2db      	uxtb	r3, r3
    f862:	2b12      	cmp	r3, #18
    f864:	d104      	bne.n	f870 <am_hal_pwrctrl_low_power_init+0x24>
    f866:	4c66      	ldr	r4, [pc, #408]	; (fa00 <am_hal_pwrctrl_low_power_init+0x1b4>)
    f868:	6863      	ldr	r3, [r4, #4]
    f86a:	07d8      	lsls	r0, r3, #31
    f86c:	f100 8088 	bmi.w	f980 <am_hal_pwrctrl_low_power_init+0x134>
    f870:	4b62      	ldr	r3, [pc, #392]	; (f9fc <am_hal_pwrctrl_low_power_init+0x1b0>)
    f872:	68da      	ldr	r2, [r3, #12]
    f874:	b2d2      	uxtb	r2, r2
    f876:	2a20      	cmp	r2, #32
    f878:	d934      	bls.n	f8e4 <am_hal_pwrctrl_low_power_init+0x98>
    f87a:	f8d3 2354 	ldr.w	r2, [r3, #852]	; 0x354
    f87e:	2002      	movs	r0, #2
    f880:	f360 4213 	bfi	r2, r0, #16, #4
    f884:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    f888:	f8d3 1354 	ldr.w	r1, [r3, #852]	; 0x354
    f88c:	2203      	movs	r2, #3
    f88e:	f362 5117 	bfi	r1, r2, #20, #4
    f892:	f8c3 1354 	str.w	r1, [r3, #852]	; 0x354
    f896:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    f89a:	2405      	movs	r4, #5
    f89c:	f364 0103 	bfi	r1, r4, #0, #4
    f8a0:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    f8a4:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    f8a8:	f360 1107 	bfi	r1, r0, #4, #4
    f8ac:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    f8b0:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    f8b4:	2406      	movs	r4, #6
    f8b6:	f364 210b 	bfi	r1, r4, #8, #4
    f8ba:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    f8be:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    f8c2:	2001      	movs	r0, #1
    f8c4:	f360 310f 	bfi	r1, r0, #12, #4
    f8c8:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    f8cc:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    f8d0:	f362 61de 	bfi	r1, r2, #27, #4
    f8d4:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    f8d8:	f8d3 135c 	ldr.w	r1, [r3, #860]	; 0x35c
    f8dc:	f362 0103 	bfi	r1, r2, #0, #4
    f8e0:	f8c3 135c 	str.w	r1, [r3, #860]	; 0x35c
    f8e4:	4a45      	ldr	r2, [pc, #276]	; (f9fc <am_hal_pwrctrl_low_power_init+0x1b0>)
    f8e6:	68d3      	ldr	r3, [r2, #12]
    f8e8:	b2db      	uxtb	r3, r3
    f8ea:	2b11      	cmp	r3, #17
    f8ec:	d905      	bls.n	f8fa <am_hal_pwrctrl_low_power_init+0xae>
    f8ee:	f8d2 335c 	ldr.w	r3, [r2, #860]	; 0x35c
    f8f2:	f36f 6318 	bfc	r3, #24, #1
    f8f6:	f8c2 335c 	str.w	r3, [r2, #860]	; 0x35c
    f8fa:	2100      	movs	r1, #0
    f8fc:	200c      	movs	r0, #12
    f8fe:	f000 fd59 	bl	103b4 <am_hal_cachectrl_control>
    f902:	4b3f      	ldr	r3, [pc, #252]	; (fa00 <am_hal_pwrctrl_low_power_init+0x1b4>)
    f904:	699b      	ldr	r3, [r3, #24]
    f906:	f3c3 2500 	ubfx	r5, r3, #8, #1
    f90a:	05db      	lsls	r3, r3, #23
    f90c:	d420      	bmi.n	f950 <am_hal_pwrctrl_low_power_init+0x104>
    f90e:	4c3b      	ldr	r4, [pc, #236]	; (f9fc <am_hal_pwrctrl_low_power_init+0x1b0>)
    f910:	68e3      	ldr	r3, [r4, #12]
    f912:	b2db      	uxtb	r3, r3
    f914:	2b11      	cmp	r3, #17
    f916:	d84e      	bhi.n	f9b6 <am_hal_pwrctrl_low_power_init+0x16a>
    f918:	4c38      	ldr	r4, [pc, #224]	; (f9fc <am_hal_pwrctrl_low_power_init+0x1b0>)
    f91a:	493a      	ldr	r1, [pc, #232]	; (fa04 <am_hal_pwrctrl_low_power_init+0x1b8>)
    f91c:	7e22      	ldrb	r2, [r4, #24]
    f91e:	2001      	movs	r0, #1
    f920:	4302      	orrs	r2, r0
    f922:	2307      	movs	r3, #7
    f924:	7622      	strb	r2, [r4, #24]
    f926:	9000      	str	r0, [sp, #0]
    f928:	461a      	mov	r2, r3
    f92a:	f242 7010 	movw	r0, #10000	; 0x2710
    f92e:	f7ff fc99 	bl	f264 <am_hal_flash_delay_status_check>
    f932:	2800      	cmp	r0, #0
    f934:	d15a      	bne.n	f9ec <am_hal_pwrctrl_low_power_init+0x1a0>
    f936:	4b32      	ldr	r3, [pc, #200]	; (fa00 <am_hal_pwrctrl_low_power_init+0x1b4>)
    f938:	681a      	ldr	r2, [r3, #0]
    f93a:	f042 0201 	orr.w	r2, r2, #1
    f93e:	601a      	str	r2, [r3, #0]
    f940:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    f942:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    f946:	625a      	str	r2, [r3, #36]	; 0x24
    f948:	68e3      	ldr	r3, [r4, #12]
    f94a:	b2db      	uxtb	r3, r3
    f94c:	2b11      	cmp	r3, #17
    f94e:	d002      	beq.n	f956 <am_hal_pwrctrl_low_power_init+0x10a>
    f950:	2000      	movs	r0, #0
    f952:	b005      	add	sp, #20
    f954:	bd30      	pop	{r4, r5, pc}
    f956:	f8d4 335c 	ldr.w	r3, [r4, #860]	; 0x35c
    f95a:	f360 5356 	bfi	r3, r0, #21, #2
    f95e:	f8c4 335c 	str.w	r3, [r4, #860]	; 0x35c
    f962:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    f966:	220f      	movs	r2, #15
    f968:	f362 138b 	bfi	r3, r2, #6, #6
    f96c:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    f970:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    f974:	f362 0305 	bfi	r3, r2, #0, #6
    f978:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    f97c:	b005      	add	sp, #20
    f97e:	bd30      	pop	{r4, r5, pc}
    f980:	f7ff fe2e 	bl	f5e0 <am_hal_interrupt_master_disable>
    f984:	9002      	str	r0, [sp, #8]
    f986:	68a3      	ldr	r3, [r4, #8]
    f988:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    f98c:	60a3      	str	r3, [r4, #8]
    f98e:	9802      	ldr	r0, [sp, #8]
    f990:	f7ff fe2a 	bl	f5e8 <am_hal_interrupt_master_set>
    f994:	20a0      	movs	r0, #160	; 0xa0
    f996:	f7ff fc55 	bl	f244 <am_hal_flash_delay>
    f99a:	69a3      	ldr	r3, [r4, #24]
    f99c:	0619      	lsls	r1, r3, #24
    f99e:	d403      	bmi.n	f9a8 <am_hal_pwrctrl_low_power_init+0x15c>
    f9a0:	20a0      	movs	r0, #160	; 0xa0
    f9a2:	f7ff fc4f 	bl	f244 <am_hal_flash_delay>
    f9a6:	69a3      	ldr	r3, [r4, #24]
    f9a8:	4b15      	ldr	r3, [pc, #84]	; (fa00 <am_hal_pwrctrl_low_power_init+0x1b4>)
    f9aa:	699b      	ldr	r3, [r3, #24]
    f9ac:	061a      	lsls	r2, r3, #24
    f9ae:	f53f af5f 	bmi.w	f870 <am_hal_pwrctrl_low_power_init+0x24>
    f9b2:	2001      	movs	r0, #1
    f9b4:	e7cd      	b.n	f952 <am_hal_pwrctrl_low_power_init+0x106>
    f9b6:	f7ff fe13 	bl	f5e0 <am_hal_interrupt_master_disable>
    f9ba:	9003      	str	r0, [sp, #12]
    f9bc:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    f9c0:	2219      	movs	r2, #25
    f9c2:	f362 138b 	bfi	r3, r2, #6, #6
    f9c6:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    f9ca:	f8d4 2368 	ldr.w	r2, [r4, #872]	; 0x368
    f9ce:	210c      	movs	r1, #12
    f9d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    f9d4:	f361 0205 	bfi	r2, r1, #0, #6
    f9d8:	f8c4 2368 	str.w	r2, [r4, #872]	; 0x368
    f9dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    f9de:	f365 5296 	bfi	r2, r5, #22, #1
    f9e2:	63da      	str	r2, [r3, #60]	; 0x3c
    f9e4:	9803      	ldr	r0, [sp, #12]
    f9e6:	f7ff fdff 	bl	f5e8 <am_hal_interrupt_master_set>
    f9ea:	e795      	b.n	f918 <am_hal_pwrctrl_low_power_init+0xcc>
    f9ec:	2004      	movs	r0, #4
    f9ee:	b005      	add	sp, #20
    f9f0:	bd30      	pop	{r4, r5, pc}
    f9f2:	bf00      	nop
    f9f4:	100033e4 	.word	0x100033e4
    f9f8:	4ffff000 	.word	0x4ffff000
    f9fc:	40020000 	.word	0x40020000
    fa00:	40021000 	.word	0x40021000
    fa04:	40020018 	.word	0x40020018

0000fa08 <am_hal_rtc_osc_disable>:
    fa08:	4a03      	ldr	r2, [pc, #12]	; (fa18 <am_hal_rtc_osc_disable+0x10>)
    fa0a:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    fa0e:	f043 0310 	orr.w	r3, r3, #16
    fa12:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
    fa16:	4770      	bx	lr
    fa18:	40004200 	.word	0x40004200

0000fa1c <am_hal_tpiu_enable>:
    fa1c:	b510      	push	{r4, lr}
    fa1e:	4b23      	ldr	r3, [pc, #140]	; (faac <am_hal_tpiu_enable+0x90>)
    fa20:	6804      	ldr	r4, [r0, #0]
    fa22:	2200      	movs	r2, #0
    fa24:	b084      	sub	sp, #16
    fa26:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    fa2a:	b334      	cbz	r4, fa7a <am_hal_tpiu_enable+0x5e>
    fa2c:	4a20      	ldr	r2, [pc, #128]	; (fab0 <am_hal_tpiu_enable+0x94>)
    fa2e:	4921      	ldr	r1, [pc, #132]	; (fab4 <am_hal_tpiu_enable+0x98>)
    fa30:	2001      	movs	r0, #1
    fa32:	6058      	str	r0, [r3, #4]
    fa34:	f5a4 4361 	sub.w	r3, r4, #57600	; 0xe100
    fa38:	a801      	add	r0, sp, #4
    fa3a:	428b      	cmp	r3, r1
    fa3c:	bf88      	it	hi
    fa3e:	4614      	movhi	r4, r2
    fa40:	f7ff fbe2 	bl	f208 <am_hal_clkgen_status_get>
    fa44:	9b01      	ldr	r3, [sp, #4]
    fa46:	1c5a      	adds	r2, r3, #1
    fa48:	d02d      	beq.n	faa6 <am_hal_tpiu_enable+0x8a>
    fa4a:	08db      	lsrs	r3, r3, #3
    fa4c:	fbb3 f4f4 	udiv	r4, r3, r4
    fa50:	3c01      	subs	r4, #1
    fa52:	b2a4      	uxth	r4, r4
    fa54:	4b15      	ldr	r3, [pc, #84]	; (faac <am_hal_tpiu_enable+0x90>)
    fa56:	4a18      	ldr	r2, [pc, #96]	; (fab8 <am_hal_tpiu_enable+0x9c>)
    fa58:	611c      	str	r4, [r3, #16]
    fa5a:	2102      	movs	r1, #2
    fa5c:	f8c3 10f0 	str.w	r1, [r3, #240]	; 0xf0
    fa60:	2000      	movs	r0, #0
    fa62:	f240 2101 	movw	r1, #513	; 0x201
    fa66:	f8c3 0f00 	str.w	r0, [r3, #3840]	; 0xf00
    fa6a:	f8c2 1250 	str.w	r1, [r2, #592]	; 0x250
    fa6e:	f44f 7048 	mov.w	r0, #800	; 0x320
    fa72:	f7ff fbe7 	bl	f244 <am_hal_flash_delay>
    fa76:	b004      	add	sp, #16
    fa78:	bd10      	pop	{r4, pc}
    fa7a:	6902      	ldr	r2, [r0, #16]
    fa7c:	611a      	str	r2, [r3, #16]
    fa7e:	6882      	ldr	r2, [r0, #8]
    fa80:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
    fa84:	68c1      	ldr	r1, [r0, #12]
    fa86:	2201      	movs	r2, #1
    fa88:	3901      	subs	r1, #1
    fa8a:	408a      	lsls	r2, r1
    fa8c:	605a      	str	r2, [r3, #4]
    fa8e:	f8c3 4f00 	str.w	r4, [r3, #3840]	; 0xf00
    fa92:	4a09      	ldr	r2, [pc, #36]	; (fab8 <am_hal_tpiu_enable+0x9c>)
    fa94:	6843      	ldr	r3, [r0, #4]
    fa96:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
    fa9a:	f44f 7048 	mov.w	r0, #800	; 0x320
    fa9e:	f7ff fbd1 	bl	f244 <am_hal_flash_delay>
    faa2:	b004      	add	sp, #16
    faa4:	bd10      	pop	{r4, pc}
    faa6:	2405      	movs	r4, #5
    faa8:	e7d4      	b.n	fa54 <am_hal_tpiu_enable+0x38>
    faaa:	bf00      	nop
    faac:	e0040000 	.word	0xe0040000
    fab0:	000f4240 	.word	0x000f4240
    fab4:	001da380 	.word	0x001da380
    fab8:	40020000 	.word	0x40020000

0000fabc <am_hal_uart_initialize>:
    fabc:	2801      	cmp	r0, #1
    fabe:	d81a      	bhi.n	faf6 <am_hal_uart_initialize+0x3a>
    fac0:	b1e9      	cbz	r1, fafe <am_hal_uart_initialize+0x42>
    fac2:	b530      	push	{r4, r5, lr}
    fac4:	2264      	movs	r2, #100	; 0x64
    fac6:	4d0f      	ldr	r5, [pc, #60]	; (fb04 <am_hal_uart_initialize+0x48>)
    fac8:	fb00 f202 	mul.w	r2, r0, r2
    facc:	18ac      	adds	r4, r5, r2
    face:	78e3      	ldrb	r3, [r4, #3]
    fad0:	f3c3 0e00 	ubfx	lr, r3, #0, #1
    fad4:	f013 0301 	ands.w	r3, r3, #1
    fad8:	d10f      	bne.n	fafa <am_hal_uart_initialize+0x3e>
    fada:	6260      	str	r0, [r4, #36]	; 0x24
    fadc:	58a8      	ldr	r0, [r5, r2]
    fade:	f000 4c7e 	and.w	ip, r0, #4261412864	; 0xfe000000
    fae2:	4809      	ldr	r0, [pc, #36]	; (fb08 <am_hal_uart_initialize+0x4c>)
    fae4:	ea4c 0000 	orr.w	r0, ip, r0
    fae8:	50a8      	str	r0, [r5, r2]
    faea:	f884 e004 	strb.w	lr, [r4, #4]
    faee:	6623      	str	r3, [r4, #96]	; 0x60
    faf0:	4618      	mov	r0, r3
    faf2:	600c      	str	r4, [r1, #0]
    faf4:	bd30      	pop	{r4, r5, pc}
    faf6:	2005      	movs	r0, #5
    faf8:	4770      	bx	lr
    fafa:	2007      	movs	r0, #7
    fafc:	bd30      	pop	{r4, r5, pc}
    fafe:	2006      	movs	r0, #6
    fb00:	4770      	bx	lr
    fb02:	bf00      	nop
    fb04:	100033e8 	.word	0x100033e8
    fb08:	01ea9e06 	.word	0x01ea9e06

0000fb0c <am_hal_uart_power_control>:
    fb0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    fb0e:	4604      	mov	r4, r0
    fb10:	6800      	ldr	r0, [r0, #0]
    fb12:	4b39      	ldr	r3, [pc, #228]	; (fbf8 <am_hal_uart_power_control+0xec>)
    fb14:	f020 467e 	bic.w	r6, r0, #4261412864	; 0xfe000000
    fb18:	429e      	cmp	r6, r3
    fb1a:	b085      	sub	sp, #20
    fb1c:	d13f      	bne.n	fb9e <am_hal_uart_power_control+0x92>
    fb1e:	6a65      	ldr	r5, [r4, #36]	; 0x24
    fb20:	f105 0008 	add.w	r0, r5, #8
    fb24:	b2c7      	uxtb	r7, r0
    fb26:	b189      	cbz	r1, fb4c <am_hal_uart_power_control+0x40>
    fb28:	3901      	subs	r1, #1
    fb2a:	2901      	cmp	r1, #1
    fb2c:	d834      	bhi.n	fb98 <am_hal_uart_power_control+0x8c>
    fb2e:	2a00      	cmp	r2, #0
    fb30:	d138      	bne.n	fba4 <am_hal_uart_power_control+0x98>
    fb32:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    fb36:	351c      	adds	r5, #28
    fb38:	032d      	lsls	r5, r5, #12
    fb3a:	f04f 33ff 	mov.w	r3, #4294967295
    fb3e:	646b      	str	r3, [r5, #68]	; 0x44
    fb40:	4638      	mov	r0, r7
    fb42:	f7ff fe57 	bl	f7f4 <am_hal_pwrctrl_periph_disable>
    fb46:	2000      	movs	r0, #0
    fb48:	b005      	add	sp, #20
    fb4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fb4c:	2a00      	cmp	r2, #0
    fb4e:	d04a      	beq.n	fbe6 <am_hal_uart_power_control+0xda>
    fb50:	7923      	ldrb	r3, [r4, #4]
    fb52:	2b00      	cmp	r3, #0
    fb54:	d04e      	beq.n	fbf4 <am_hal_uart_power_control+0xe8>
    fb56:	4638      	mov	r0, r7
    fb58:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    fb5c:	9101      	str	r1, [sp, #4]
    fb5e:	351c      	adds	r5, #28
    fb60:	f7ff fe1e 	bl	f7a0 <am_hal_pwrctrl_periph_enable>
    fb64:	f7ff fd3c 	bl	f5e0 <am_hal_interrupt_master_disable>
    fb68:	032d      	lsls	r5, r5, #12
    fb6a:	68a3      	ldr	r3, [r4, #8]
    fb6c:	9002      	str	r0, [sp, #8]
    fb6e:	622b      	str	r3, [r5, #32]
    fb70:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    fb74:	626a      	str	r2, [r5, #36]	; 0x24
    fb76:	62ab      	str	r3, [r5, #40]	; 0x28
    fb78:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
    fb7c:	62ea      	str	r2, [r5, #44]	; 0x2c
    fb7e:	632b      	str	r3, [r5, #48]	; 0x30
    fb80:	e9d4 2307 	ldrd	r2, r3, [r4, #28]
    fb84:	9901      	ldr	r1, [sp, #4]
    fb86:	636a      	str	r2, [r5, #52]	; 0x34
    fb88:	63ab      	str	r3, [r5, #56]	; 0x38
    fb8a:	9802      	ldr	r0, [sp, #8]
    fb8c:	7121      	strb	r1, [r4, #4]
    fb8e:	f7ff fd2b 	bl	f5e8 <am_hal_interrupt_master_set>
    fb92:	9901      	ldr	r1, [sp, #4]
    fb94:	4608      	mov	r0, r1
    fb96:	e000      	b.n	fb9a <am_hal_uart_power_control+0x8e>
    fb98:	2006      	movs	r0, #6
    fb9a:	b005      	add	sp, #20
    fb9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fb9e:	2002      	movs	r0, #2
    fba0:	b005      	add	sp, #20
    fba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fba4:	f7ff fd1c 	bl	f5e0 <am_hal_interrupt_master_disable>
    fba8:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    fbac:	351c      	adds	r5, #28
    fbae:	032d      	lsls	r5, r5, #12
    fbb0:	9003      	str	r0, [sp, #12]
    fbb2:	6a2b      	ldr	r3, [r5, #32]
    fbb4:	60a3      	str	r3, [r4, #8]
    fbb6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    fbb8:	60e3      	str	r3, [r4, #12]
    fbba:	6aab      	ldr	r3, [r5, #40]	; 0x28
    fbbc:	6123      	str	r3, [r4, #16]
    fbbe:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    fbc0:	6163      	str	r3, [r4, #20]
    fbc2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    fbc4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    fbc6:	61a3      	str	r3, [r4, #24]
    fbc8:	6bab      	ldr	r3, [r5, #56]	; 0x38
    fbca:	61e2      	str	r2, [r4, #28]
    fbcc:	2201      	movs	r2, #1
    fbce:	6223      	str	r3, [r4, #32]
    fbd0:	9803      	ldr	r0, [sp, #12]
    fbd2:	7122      	strb	r2, [r4, #4]
    fbd4:	f7ff fd08 	bl	f5e8 <am_hal_interrupt_master_set>
    fbd8:	6823      	ldr	r3, [r4, #0]
    fbda:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    fbde:	42b3      	cmp	r3, r6
    fbe0:	d1ae      	bne.n	fb40 <am_hal_uart_power_control+0x34>
    fbe2:	6a65      	ldr	r5, [r4, #36]	; 0x24
    fbe4:	e7a5      	b.n	fb32 <am_hal_uart_power_control+0x26>
    fbe6:	4638      	mov	r0, r7
    fbe8:	9201      	str	r2, [sp, #4]
    fbea:	f7ff fdd9 	bl	f7a0 <am_hal_pwrctrl_periph_enable>
    fbee:	9a01      	ldr	r2, [sp, #4]
    fbf0:	4610      	mov	r0, r2
    fbf2:	e7d2      	b.n	fb9a <am_hal_uart_power_control+0x8e>
    fbf4:	2007      	movs	r0, #7
    fbf6:	e7d0      	b.n	fb9a <am_hal_uart_power_control+0x8e>
    fbf8:	01ea9e06 	.word	0x01ea9e06

0000fbfc <am_hal_uart_configure>:
    fbfc:	6803      	ldr	r3, [r0, #0]
    fbfe:	4a78      	ldr	r2, [pc, #480]	; (fde0 <am_hal_uart_configure+0x1e4>)
    fc00:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    fc04:	4293      	cmp	r3, r2
    fc06:	d001      	beq.n	fc0c <am_hal_uart_configure+0x10>
    fc08:	2002      	movs	r0, #2
    fc0a:	4770      	bx	lr
    fc0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fc10:	6a44      	ldr	r4, [r0, #36]	; 0x24
    fc12:	f504 2480 	add.w	r4, r4, #262144	; 0x40000
    fc16:	341c      	adds	r4, #28
    fc18:	0324      	lsls	r4, r4, #12
    fc1a:	2700      	movs	r7, #0
    fc1c:	b084      	sub	sp, #16
    fc1e:	6327      	str	r7, [r4, #48]	; 0x30
    fc20:	460e      	mov	r6, r1
    fc22:	4605      	mov	r5, r0
    fc24:	f7ff fcdc 	bl	f5e0 <am_hal_interrupt_master_disable>
    fc28:	9001      	str	r0, [sp, #4]
    fc2a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    fc2c:	f043 0308 	orr.w	r3, r3, #8
    fc30:	8623      	strh	r3, [r4, #48]	; 0x30
    fc32:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    fc34:	2201      	movs	r2, #1
    fc36:	f362 1306 	bfi	r3, r2, #4, #3
    fc3a:	8623      	strh	r3, [r4, #48]	; 0x30
    fc3c:	9801      	ldr	r0, [sp, #4]
    fc3e:	f7ff fcd3 	bl	f5e8 <am_hal_interrupt_master_set>
    fc42:	f7ff fccd 	bl	f5e0 <am_hal_interrupt_master_disable>
    fc46:	9002      	str	r0, [sp, #8]
    fc48:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    fc4a:	f367 0300 	bfi	r3, r7, #0, #1
    fc4e:	8623      	strh	r3, [r4, #48]	; 0x30
    fc50:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    fc52:	f367 2349 	bfi	r3, r7, #9, #1
    fc56:	8623      	strh	r3, [r4, #48]	; 0x30
    fc58:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    fc5a:	f367 2308 	bfi	r3, r7, #8, #1
    fc5e:	8623      	strh	r3, [r4, #48]	; 0x30
    fc60:	9802      	ldr	r0, [sp, #8]
    fc62:	f7ff fcc1 	bl	f5e8 <am_hal_interrupt_master_set>
    fc66:	4b5f      	ldr	r3, [pc, #380]	; (fde4 <am_hal_uart_configure+0x1e8>)
    fc68:	6832      	ldr	r2, [r6, #0]
    fc6a:	68db      	ldr	r3, [r3, #12]
    fc6c:	b2db      	uxtb	r3, r3
    fc6e:	2b12      	cmp	r3, #18
    fc70:	d076      	beq.n	fd60 <am_hal_uart_configure+0x164>
    fc72:	4b5c      	ldr	r3, [pc, #368]	; (fde4 <am_hal_uart_configure+0x1e8>)
    fc74:	68db      	ldr	r3, [r3, #12]
    fc76:	b2db      	uxtb	r3, r3
    fc78:	2b20      	cmp	r3, #32
    fc7a:	d902      	bls.n	fc82 <am_hal_uart_configure+0x86>
    fc7c:	4b5a      	ldr	r3, [pc, #360]	; (fde8 <am_hal_uart_configure+0x1ec>)
    fc7e:	429a      	cmp	r2, r3
    fc80:	d871      	bhi.n	fd66 <am_hal_uart_configure+0x16a>
    fc82:	6b23      	ldr	r3, [r4, #48]	; 0x30
    fc84:	f3c3 1302 	ubfx	r3, r3, #4, #3
    fc88:	3b01      	subs	r3, #1
    fc8a:	b2db      	uxtb	r3, r3
    fc8c:	2b03      	cmp	r3, #3
    fc8e:	d86c      	bhi.n	fd6a <am_hal_uart_configure+0x16e>
    fc90:	4956      	ldr	r1, [pc, #344]	; (fdec <am_hal_uart_configure+0x1f0>)
    fc92:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    fc96:	0112      	lsls	r2, r2, #4
    fc98:	4291      	cmp	r1, r2
    fc9a:	ea4f 1381 	mov.w	r3, r1, lsl #6
    fc9e:	fbb1 f0f2 	udiv	r0, r1, r2
    fca2:	fbb3 f3f2 	udiv	r3, r3, r2
    fca6:	eba3 1380 	sub.w	r3, r3, r0, lsl #6
    fcaa:	d364      	bcc.n	fd76 <am_hal_uart_configure+0x17a>
    fcac:	6260      	str	r0, [r4, #36]	; 0x24
    fcae:	6260      	str	r0, [r4, #36]	; 0x24
    fcb0:	62a3      	str	r3, [r4, #40]	; 0x28
    fcb2:	089b      	lsrs	r3, r3, #2
    fcb4:	eb03 1300 	add.w	r3, r3, r0, lsl #4
    fcb8:	fbb1 f3f3 	udiv	r3, r1, r3
    fcbc:	662b      	str	r3, [r5, #96]	; 0x60
    fcbe:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    fcc0:	f36f 338e 	bfc	r3, #14, #1
    fcc4:	8623      	strh	r3, [r4, #48]	; 0x30
    fcc6:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    fcc8:	f36f 33cf 	bfc	r3, #15, #1
    fccc:	8623      	strh	r3, [r4, #48]	; 0x30
    fcce:	6933      	ldr	r3, [r6, #16]
    fcd0:	6b22      	ldr	r2, [r4, #48]	; 0x30
    fcd2:	6971      	ldr	r1, [r6, #20]
    fcd4:	431a      	orrs	r2, r3
    fcd6:	6873      	ldr	r3, [r6, #4]
    fcd8:	6322      	str	r2, [r4, #48]	; 0x30
    fcda:	68f2      	ldr	r2, [r6, #12]
    fcdc:	6361      	str	r1, [r4, #52]	; 0x34
    fcde:	4313      	orrs	r3, r2
    fce0:	68b2      	ldr	r2, [r6, #8]
    fce2:	4313      	orrs	r3, r2
    fce4:	f043 0310 	orr.w	r3, r3, #16
    fce8:	62e3      	str	r3, [r4, #44]	; 0x2c
    fcea:	f7ff fc79 	bl	f5e0 <am_hal_interrupt_master_disable>
    fcee:	9003      	str	r0, [sp, #12]
    fcf0:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    fcf2:	f043 0301 	orr.w	r3, r3, #1
    fcf6:	8623      	strh	r3, [r4, #48]	; 0x30
    fcf8:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    fcfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    fcfe:	8623      	strh	r3, [r4, #48]	; 0x30
    fd00:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    fd02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    fd06:	8623      	strh	r3, [r4, #48]	; 0x30
    fd08:	9803      	ldr	r0, [sp, #12]
    fd0a:	f7ff fc6d 	bl	f5e8 <am_hal_interrupt_master_set>
    fd0e:	682a      	ldr	r2, [r5, #0]
    fd10:	4b33      	ldr	r3, [pc, #204]	; (fde0 <am_hal_uart_configure+0x1e4>)
    fd12:	f022 487e 	bic.w	r8, r2, #4261412864	; 0xfe000000
    fd16:	4598      	cmp	r8, r3
    fd18:	d11e      	bne.n	fd58 <am_hal_uart_configure+0x15c>
    fd1a:	69b1      	ldr	r1, [r6, #24]
    fd1c:	e9d6 4708 	ldrd	r4, r7, [r6, #32]
    fd20:	b109      	cbz	r1, fd26 <am_hal_uart_configure+0x12a>
    fd22:	69f3      	ldr	r3, [r6, #28]
    fd24:	bb5b      	cbnz	r3, fd7e <am_hal_uart_configure+0x182>
    fd26:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    fd28:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    fd2c:	331c      	adds	r3, #28
    fd2e:	031b      	lsls	r3, r3, #12
    fd30:	2200      	movs	r2, #0
    fd32:	f885 2028 	strb.w	r2, [r5, #40]	; 0x28
    fd36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    fd38:	f022 0220 	bic.w	r2, r2, #32
    fd3c:	639a      	str	r2, [r3, #56]	; 0x38
    fd3e:	b10c      	cbz	r4, fd44 <am_hal_uart_configure+0x148>
    fd40:	2f00      	cmp	r7, #0
    fd42:	d132      	bne.n	fdaa <am_hal_uart_configure+0x1ae>
    fd44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    fd46:	2000      	movs	r0, #0
    fd48:	f022 0250 	bic.w	r2, r2, #80	; 0x50
    fd4c:	f885 0044 	strb.w	r0, [r5, #68]	; 0x44
    fd50:	639a      	str	r2, [r3, #56]	; 0x38
    fd52:	b004      	add	sp, #16
    fd54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fd58:	2000      	movs	r0, #0
    fd5a:	b004      	add	sp, #16
    fd5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fd60:	f5b2 2f61 	cmp.w	r2, #921600	; 0xe1000
    fd64:	d985      	bls.n	fc72 <am_hal_uart_configure+0x76>
    fd66:	4822      	ldr	r0, [pc, #136]	; (fdf0 <am_hal_uart_configure+0x1f4>)
    fd68:	e7f3      	b.n	fd52 <am_hal_uart_configure+0x156>
    fd6a:	4822      	ldr	r0, [pc, #136]	; (fdf4 <am_hal_uart_configure+0x1f8>)
    fd6c:	2300      	movs	r3, #0
    fd6e:	662b      	str	r3, [r5, #96]	; 0x60
    fd70:	b004      	add	sp, #16
    fd72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fd76:	2300      	movs	r3, #0
    fd78:	481d      	ldr	r0, [pc, #116]	; (fdf0 <am_hal_uart_configure+0x1f4>)
    fd7a:	662b      	str	r3, [r5, #96]	; 0x60
    fd7c:	e7e9      	b.n	fd52 <am_hal_uart_configure+0x156>
    fd7e:	2201      	movs	r2, #1
    fd80:	f885 2028 	strb.w	r2, [r5, #40]	; 0x28
    fd84:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    fd88:	f000 fc8e 	bl	106a8 <am_hal_queue_init>
    fd8c:	682b      	ldr	r3, [r5, #0]
    fd8e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    fd92:	4543      	cmp	r3, r8
    fd94:	d1e0      	bne.n	fd58 <am_hal_uart_configure+0x15c>
    fd96:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    fd98:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    fd9c:	331c      	adds	r3, #28
    fd9e:	031b      	lsls	r3, r3, #12
    fda0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    fda2:	f042 0220 	orr.w	r2, r2, #32
    fda6:	639a      	str	r2, [r3, #56]	; 0x38
    fda8:	e7c9      	b.n	fd3e <am_hal_uart_configure+0x142>
    fdaa:	2201      	movs	r2, #1
    fdac:	f885 2044 	strb.w	r2, [r5, #68]	; 0x44
    fdb0:	463b      	mov	r3, r7
    fdb2:	4621      	mov	r1, r4
    fdb4:	f105 0048 	add.w	r0, r5, #72	; 0x48
    fdb8:	f000 fc76 	bl	106a8 <am_hal_queue_init>
    fdbc:	682b      	ldr	r3, [r5, #0]
    fdbe:	4a08      	ldr	r2, [pc, #32]	; (fde0 <am_hal_uart_configure+0x1e4>)
    fdc0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    fdc4:	4293      	cmp	r3, r2
    fdc6:	d1c7      	bne.n	fd58 <am_hal_uart_configure+0x15c>
    fdc8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    fdca:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    fdce:	331c      	adds	r3, #28
    fdd0:	031b      	lsls	r3, r3, #12
    fdd2:	2000      	movs	r0, #0
    fdd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    fdd6:	f042 0250 	orr.w	r2, r2, #80	; 0x50
    fdda:	639a      	str	r2, [r3, #56]	; 0x38
    fddc:	e7b9      	b.n	fd52 <am_hal_uart_configure+0x156>
    fdde:	bf00      	nop
    fde0:	01ea9e06 	.word	0x01ea9e06
    fde4:	40020000 	.word	0x40020000
    fde8:	0016e360 	.word	0x0016e360
    fdec:	00012880 	.word	0x00012880
    fdf0:	08000003 	.word	0x08000003
    fdf4:	08000002 	.word	0x08000002

0000fdf8 <am_hal_uart_transfer>:
    fdf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fdfc:	ed2d 8b02 	vpush	{d8}
    fe00:	680d      	ldr	r5, [r1, #0]
    fe02:	b091      	sub	sp, #68	; 0x44
    fe04:	4604      	mov	r4, r0
    fe06:	b14d      	cbz	r5, fe1c <am_hal_uart_transfer+0x24>
    fe08:	2d01      	cmp	r5, #1
    fe0a:	f000 808f 	beq.w	ff2c <am_hal_uart_transfer+0x134>
    fe0e:	2507      	movs	r5, #7
    fe10:	4628      	mov	r0, r5
    fe12:	b011      	add	sp, #68	; 0x44
    fe14:	ecbd 8b02 	vpop	{d8}
    fe18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fe1c:	e9d1 b802 	ldrd	fp, r8, [r1, #8]
    fe20:	684b      	ldr	r3, [r1, #4]
    fe22:	690a      	ldr	r2, [r1, #16]
    fe24:	9202      	str	r2, [sp, #8]
    fe26:	4618      	mov	r0, r3
    fe28:	f1b8 0f00 	cmp.w	r8, #0
    fe2c:	f000 8111 	beq.w	10052 <am_hal_uart_transfer+0x25a>
    fe30:	f1bb 0f00 	cmp.w	fp, #0
    fe34:	f000 8172 	beq.w	1011c <am_hal_uart_transfer+0x324>
    fe38:	2c00      	cmp	r4, #0
    fe3a:	f000 8165 	beq.w	10108 <am_hal_uart_transfer+0x310>
    fe3e:	46a9      	mov	r9, r5
    fe40:	462f      	mov	r7, r5
    fe42:	9501      	str	r5, [sp, #4]
    fe44:	4625      	mov	r5, r4
    fe46:	4619      	mov	r1, r3
    fe48:	682a      	ldr	r2, [r5, #0]
    fe4a:	461c      	mov	r4, r3
    fe4c:	4bad      	ldr	r3, [pc, #692]	; (10104 <am_hal_uart_transfer+0x30c>)
    fe4e:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    fe52:	429a      	cmp	r2, r3
    fe54:	465e      	mov	r6, fp
    fe56:	d12d      	bne.n	feb4 <am_hal_uart_transfer+0xbc>
    fe58:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
    fe5c:	bb7a      	cbnz	r2, febe <am_hal_uart_transfer+0xc6>
    fe5e:	1e48      	subs	r0, r1, #1
    fe60:	6a69      	ldr	r1, [r5, #36]	; 0x24
    fe62:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    fe66:	311c      	adds	r1, #28
    fe68:	0309      	lsls	r1, r1, #12
    fe6a:	698b      	ldr	r3, [r1, #24]
    fe6c:	069b      	lsls	r3, r3, #26
    fe6e:	d405      	bmi.n	fe7c <am_hal_uart_transfer+0x84>
    fe70:	3201      	adds	r2, #1
    fe72:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    fe76:	600b      	str	r3, [r1, #0]
    fe78:	4296      	cmp	r6, r2
    fe7a:	d8f6      	bhi.n	fe6a <am_hal_uart_transfer+0x72>
    fe7c:	4417      	add	r7, r2
    fe7e:	1ab6      	subs	r6, r6, r2
    fe80:	b936      	cbnz	r6, fe90 <am_hal_uart_transfer+0x98>
    fe82:	9d01      	ldr	r5, [sp, #4]
    fe84:	9b02      	ldr	r3, [sp, #8]
    fe86:	2b00      	cmp	r3, #0
    fe88:	f000 808c 	beq.w	ffa4 <am_hal_uart_transfer+0x1ac>
    fe8c:	601f      	str	r7, [r3, #0]
    fe8e:	e7bf      	b.n	fe10 <am_hal_uart_transfer+0x18>
    fe90:	2010      	movs	r0, #16
    fe92:	f7ff f9d7 	bl	f244 <am_hal_flash_delay>
    fe96:	f1b8 3fff 	cmp.w	r8, #4294967295
    fe9a:	bf18      	it	ne
    fe9c:	f109 0901 	addne.w	r9, r9, #1
    fea0:	45c8      	cmp	r8, r9
    fea2:	d9ee      	bls.n	fe82 <am_hal_uart_transfer+0x8a>
    fea4:	682a      	ldr	r2, [r5, #0]
    fea6:	4b97      	ldr	r3, [pc, #604]	; (10104 <am_hal_uart_transfer+0x30c>)
    fea8:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    feac:	429a      	cmp	r2, r3
    feae:	eb04 0107 	add.w	r1, r4, r7
    feb2:	d0d1      	beq.n	fe58 <am_hal_uart_transfer+0x60>
    feb4:	9b02      	ldr	r3, [sp, #8]
    feb6:	b103      	cbz	r3, feba <am_hal_uart_transfer+0xc2>
    feb8:	601f      	str	r7, [r3, #0]
    feba:	2502      	movs	r5, #2
    febc:	e7a8      	b.n	fe10 <am_hal_uart_transfer+0x18>
    febe:	e9d5 020d 	ldrd	r0, r2, [r5, #52]	; 0x34
    fec2:	1a12      	subs	r2, r2, r0
    fec4:	42b2      	cmp	r2, r6
    fec6:	4613      	mov	r3, r2
    fec8:	f105 0b2c 	add.w	fp, r5, #44	; 0x2c
    fecc:	bf28      	it	cs
    fece:	4633      	movcs	r3, r6
    fed0:	461a      	mov	r2, r3
    fed2:	4658      	mov	r0, fp
    fed4:	9303      	str	r3, [sp, #12]
    fed6:	f000 fbf3 	bl	106c0 <am_hal_queue_item_add>
    feda:	f8d5 a024 	ldr.w	sl, [r5, #36]	; 0x24
    fede:	f7ff fb7f 	bl	f5e0 <am_hal_interrupt_master_disable>
    fee2:	f50a 2a80 	add.w	sl, sl, #262144	; 0x40000
    fee6:	f10a 0a1c 	add.w	sl, sl, #28
    feea:	9008      	str	r0, [sp, #32]
    feec:	ea4f 3a0a 	mov.w	sl, sl, lsl #12
    fef0:	e00d      	b.n	ff0e <am_hal_uart_transfer+0x116>
    fef2:	f000 fc23 	bl	1073c <am_hal_queue_item_get>
    fef6:	b190      	cbz	r0, ff1e <am_hal_uart_transfer+0x126>
    fef8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    fefa:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    fefe:	321c      	adds	r2, #28
    ff00:	0312      	lsls	r2, r2, #12
    ff02:	6993      	ldr	r3, [r2, #24]
    ff04:	0699      	lsls	r1, r3, #26
    ff06:	bf5c      	itt	pl
    ff08:	f89d 301c 	ldrbpl.w	r3, [sp, #28]
    ff0c:	6013      	strpl	r3, [r2, #0]
    ff0e:	f8da 3018 	ldr.w	r3, [sl, #24]
    ff12:	069b      	lsls	r3, r3, #26
    ff14:	f04f 0201 	mov.w	r2, #1
    ff18:	a907      	add	r1, sp, #28
    ff1a:	4658      	mov	r0, fp
    ff1c:	d5e9      	bpl.n	fef2 <am_hal_uart_transfer+0xfa>
    ff1e:	9b03      	ldr	r3, [sp, #12]
    ff20:	9808      	ldr	r0, [sp, #32]
    ff22:	441f      	add	r7, r3
    ff24:	1af6      	subs	r6, r6, r3
    ff26:	f7ff fb5f 	bl	f5e8 <am_hal_interrupt_master_set>
    ff2a:	e7a9      	b.n	fe80 <am_hal_uart_transfer+0x88>
    ff2c:	68cd      	ldr	r5, [r1, #12]
    ff2e:	690b      	ldr	r3, [r1, #16]
    ff30:	9301      	str	r3, [sp, #4]
    ff32:	e9d1 b701 	ldrd	fp, r7, [r1, #4]
    ff36:	2d00      	cmp	r5, #0
    ff38:	f000 80b5 	beq.w	100a6 <am_hal_uart_transfer+0x2ae>
    ff3c:	2f00      	cmp	r7, #0
    ff3e:	f000 811e 	beq.w	1017e <am_hal_uart_transfer+0x386>
    ff42:	2800      	cmp	r0, #0
    ff44:	f000 80e7 	beq.w	10116 <am_hal_uart_transfer+0x31e>
    ff48:	6822      	ldr	r2, [r4, #0]
    ff4a:	f8df a1b8 	ldr.w	sl, [pc, #440]	; 10104 <am_hal_uart_transfer+0x30c>
    ff4e:	f100 0348 	add.w	r3, r0, #72	; 0x48
    ff52:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    ff56:	ee08 3a10 	vmov	s16, r3
    ff5a:	f04f 0900 	mov.w	r9, #0
    ff5e:	462b      	mov	r3, r5
    ff60:	4552      	cmp	r2, sl
    ff62:	46c8      	mov	r8, r9
    ff64:	465d      	mov	r5, fp
    ff66:	461e      	mov	r6, r3
    ff68:	d133      	bne.n	ffd2 <am_hal_uart_transfer+0x1da>
    ff6a:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
    ff6e:	2a00      	cmp	r2, #0
    ff70:	d137      	bne.n	ffe2 <am_hal_uart_transfer+0x1ea>
    ff72:	6a61      	ldr	r1, [r4, #36]	; 0x24
    ff74:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    ff78:	311c      	adds	r1, #28
    ff7a:	1e68      	subs	r0, r5, #1
    ff7c:	0309      	lsls	r1, r1, #12
    ff7e:	698b      	ldr	r3, [r1, #24]
    ff80:	06dd      	lsls	r5, r3, #27
    ff82:	d408      	bmi.n	ff96 <am_hal_uart_transfer+0x19e>
    ff84:	680b      	ldr	r3, [r1, #0]
    ff86:	f413 6f70 	tst.w	r3, #3840	; 0xf00
    ff8a:	d15e      	bne.n	1004a <am_hal_uart_transfer+0x252>
    ff8c:	3201      	adds	r2, #1
    ff8e:	4297      	cmp	r7, r2
    ff90:	f800 3f01 	strb.w	r3, [r0, #1]!
    ff94:	d8f3      	bhi.n	ff7e <am_hal_uart_transfer+0x186>
    ff96:	4490      	add	r8, r2
    ff98:	1abf      	subs	r7, r7, r2
    ff9a:	b957      	cbnz	r7, ffb2 <am_hal_uart_transfer+0x1ba>
    ff9c:	9b01      	ldr	r3, [sp, #4]
    ff9e:	b10b      	cbz	r3, ffa4 <am_hal_uart_transfer+0x1ac>
    ffa0:	f8c3 8000 	str.w	r8, [r3]
    ffa4:	2500      	movs	r5, #0
    ffa6:	4628      	mov	r0, r5
    ffa8:	b011      	add	sp, #68	; 0x44
    ffaa:	ecbd 8b02 	vpop	{d8}
    ffae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ffb2:	2010      	movs	r0, #16
    ffb4:	f7ff f946 	bl	f244 <am_hal_flash_delay>
    ffb8:	1c73      	adds	r3, r6, #1
    ffba:	bf18      	it	ne
    ffbc:	f109 0901 	addne.w	r9, r9, #1
    ffc0:	454e      	cmp	r6, r9
    ffc2:	d9eb      	bls.n	ff9c <am_hal_uart_transfer+0x1a4>
    ffc4:	6822      	ldr	r2, [r4, #0]
    ffc6:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    ffca:	4552      	cmp	r2, sl
    ffcc:	eb0b 0508 	add.w	r5, fp, r8
    ffd0:	d0cb      	beq.n	ff6a <am_hal_uart_transfer+0x172>
    ffd2:	2502      	movs	r5, #2
    ffd4:	9b01      	ldr	r3, [sp, #4]
    ffd6:	2b00      	cmp	r3, #0
    ffd8:	f43f af1a 	beq.w	fe10 <am_hal_uart_transfer+0x18>
    ffdc:	f8c3 8000 	str.w	r8, [r3]
    ffe0:	e716      	b.n	fe10 <am_hal_uart_transfer+0x18>
    ffe2:	f7ff fafd 	bl	f5e0 <am_hal_interrupt_master_disable>
    ffe6:	9007      	str	r0, [sp, #28]
    ffe8:	6a60      	ldr	r0, [r4, #36]	; 0x24
    ffea:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    ffee:	301c      	adds	r0, #28
    fff0:	0300      	lsls	r0, r0, #12
    fff2:	f10d 0c20 	add.w	ip, sp, #32
    fff6:	2200      	movs	r2, #0
    fff8:	6983      	ldr	r3, [r0, #24]
    fffa:	06db      	lsls	r3, r3, #27
    fffc:	d409      	bmi.n	10012 <am_hal_uart_transfer+0x21a>
    fffe:	6803      	ldr	r3, [r0, #0]
   10000:	f413 6f70 	tst.w	r3, #3840	; 0xf00
   10004:	f102 0201 	add.w	r2, r2, #1
   10008:	d119      	bne.n	1003e <am_hal_uart_transfer+0x246>
   1000a:	2a20      	cmp	r2, #32
   1000c:	f80c 3b01 	strb.w	r3, [ip], #1
   10010:	d1f2      	bne.n	fff8 <am_hal_uart_transfer+0x200>
   10012:	ee18 0a10 	vmov	r0, s16
   10016:	a908      	add	r1, sp, #32
   10018:	f000 fb52 	bl	106c0 <am_hal_queue_item_add>
   1001c:	2800      	cmp	r0, #0
   1001e:	d075      	beq.n	1010c <am_hal_uart_transfer+0x314>
   10020:	9807      	ldr	r0, [sp, #28]
   10022:	f7ff fae1 	bl	f5e8 <am_hal_interrupt_master_set>
   10026:	6d22      	ldr	r2, [r4, #80]	; 0x50
   10028:	42ba      	cmp	r2, r7
   1002a:	bf28      	it	cs
   1002c:	463a      	movcs	r2, r7
   1002e:	ee18 0a10 	vmov	r0, s16
   10032:	4629      	mov	r1, r5
   10034:	4490      	add	r8, r2
   10036:	1abf      	subs	r7, r7, r2
   10038:	f000 fb80 	bl	1073c <am_hal_queue_item_get>
   1003c:	e7ad      	b.n	ff9a <am_hal_uart_transfer+0x1a2>
   1003e:	9807      	ldr	r0, [sp, #28]
   10040:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
   10044:	f7ff fad0 	bl	f5e8 <am_hal_interrupt_master_set>
   10048:	e7c4      	b.n	ffd4 <am_hal_uart_transfer+0x1dc>
   1004a:	4490      	add	r8, r2
   1004c:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
   10050:	e7c0      	b.n	ffd4 <am_hal_uart_transfer+0x1dc>
   10052:	2c00      	cmp	r4, #0
   10054:	f43f af31 	beq.w	feba <am_hal_uart_transfer+0xc2>
   10058:	6822      	ldr	r2, [r4, #0]
   1005a:	492a      	ldr	r1, [pc, #168]	; (10104 <am_hal_uart_transfer+0x30c>)
   1005c:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   10060:	428a      	cmp	r2, r1
   10062:	f47f af2a 	bne.w	feba <am_hal_uart_transfer+0xc2>
   10066:	9b02      	ldr	r3, [sp, #8]
   10068:	b10b      	cbz	r3, 1006e <am_hal_uart_transfer+0x276>
   1006a:	f8c3 8000 	str.w	r8, [r3]
   1006e:	f1bb 0f00 	cmp.w	fp, #0
   10072:	d097      	beq.n	ffa4 <am_hal_uart_transfer+0x1ac>
   10074:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
   10078:	2d00      	cmp	r5, #0
   1007a:	d151      	bne.n	10120 <am_hal_uart_transfer+0x328>
   1007c:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1007e:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
   10082:	311c      	adds	r1, #28
   10084:	1e42      	subs	r2, r0, #1
   10086:	0309      	lsls	r1, r1, #12
   10088:	698b      	ldr	r3, [r1, #24]
   1008a:	0698      	lsls	r0, r3, #26
   1008c:	d405      	bmi.n	1009a <am_hal_uart_transfer+0x2a2>
   1008e:	3501      	adds	r5, #1
   10090:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   10094:	600b      	str	r3, [r1, #0]
   10096:	45ab      	cmp	fp, r5
   10098:	d1f6      	bne.n	10088 <am_hal_uart_transfer+0x290>
   1009a:	9b02      	ldr	r3, [sp, #8]
   1009c:	2b00      	cmp	r3, #0
   1009e:	d081      	beq.n	ffa4 <am_hal_uart_transfer+0x1ac>
   100a0:	601d      	str	r5, [r3, #0]
   100a2:	2500      	movs	r5, #0
   100a4:	e6b4      	b.n	fe10 <am_hal_uart_transfer+0x18>
   100a6:	2800      	cmp	r0, #0
   100a8:	f43f af07 	beq.w	feba <am_hal_uart_transfer+0xc2>
   100ac:	6802      	ldr	r2, [r0, #0]
   100ae:	4915      	ldr	r1, [pc, #84]	; (10104 <am_hal_uart_transfer+0x30c>)
   100b0:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   100b4:	428a      	cmp	r2, r1
   100b6:	f47f af00 	bne.w	feba <am_hal_uart_transfer+0xc2>
   100ba:	b103      	cbz	r3, 100be <am_hal_uart_transfer+0x2c6>
   100bc:	601d      	str	r5, [r3, #0]
   100be:	2f00      	cmp	r7, #0
   100c0:	f43f af70 	beq.w	ffa4 <am_hal_uart_transfer+0x1ac>
   100c4:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
   100c8:	2a00      	cmp	r2, #0
   100ca:	d15a      	bne.n	10182 <am_hal_uart_transfer+0x38a>
   100cc:	6a61      	ldr	r1, [r4, #36]	; 0x24
   100ce:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
   100d2:	311c      	adds	r1, #28
   100d4:	f10b 33ff 	add.w	r3, fp, #4294967295
   100d8:	0309      	lsls	r1, r1, #12
   100da:	4614      	mov	r4, r2
   100dc:	698a      	ldr	r2, [r1, #24]
   100de:	06d2      	lsls	r2, r2, #27
   100e0:	d409      	bmi.n	100f6 <am_hal_uart_transfer+0x2fe>
   100e2:	680a      	ldr	r2, [r1, #0]
   100e4:	f412 6070 	ands.w	r0, r2, #3840	; 0xf00
   100e8:	d176      	bne.n	101d8 <am_hal_uart_transfer+0x3e0>
   100ea:	3401      	adds	r4, #1
   100ec:	42a7      	cmp	r7, r4
   100ee:	f803 2f01 	strb.w	r2, [r3, #1]!
   100f2:	d1f3      	bne.n	100dc <am_hal_uart_transfer+0x2e4>
   100f4:	4605      	mov	r5, r0
   100f6:	9b01      	ldr	r3, [sp, #4]
   100f8:	2b00      	cmp	r3, #0
   100fa:	f43f ae89 	beq.w	fe10 <am_hal_uart_transfer+0x18>
   100fe:	601c      	str	r4, [r3, #0]
   10100:	e686      	b.n	fe10 <am_hal_uart_transfer+0x18>
   10102:	bf00      	nop
   10104:	01ea9e06 	.word	0x01ea9e06
   10108:	4627      	mov	r7, r4
   1010a:	e6d3      	b.n	feb4 <am_hal_uart_transfer+0xbc>
   1010c:	9807      	ldr	r0, [sp, #28]
   1010e:	4d39      	ldr	r5, [pc, #228]	; (101f4 <am_hal_uart_transfer+0x3fc>)
   10110:	f7ff fa6a 	bl	f5e8 <am_hal_interrupt_master_set>
   10114:	e75e      	b.n	ffd4 <am_hal_uart_transfer+0x1dc>
   10116:	2502      	movs	r5, #2
   10118:	4680      	mov	r8, r0
   1011a:	e75b      	b.n	ffd4 <am_hal_uart_transfer+0x1dc>
   1011c:	462f      	mov	r7, r5
   1011e:	e6b1      	b.n	fe84 <am_hal_uart_transfer+0x8c>
   10120:	6b65      	ldr	r5, [r4, #52]	; 0x34
   10122:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   10124:	1b52      	subs	r2, r2, r5
   10126:	455a      	cmp	r2, fp
   10128:	f104 072c 	add.w	r7, r4, #44	; 0x2c
   1012c:	4601      	mov	r1, r0
   1012e:	bf28      	it	cs
   10130:	465a      	movcs	r2, fp
   10132:	4638      	mov	r0, r7
   10134:	4615      	mov	r5, r2
   10136:	f000 fac3 	bl	106c0 <am_hal_queue_item_add>
   1013a:	6a66      	ldr	r6, [r4, #36]	; 0x24
   1013c:	f7ff fa50 	bl	f5e0 <am_hal_interrupt_master_disable>
   10140:	f506 2680 	add.w	r6, r6, #262144	; 0x40000
   10144:	361c      	adds	r6, #28
   10146:	9005      	str	r0, [sp, #20]
   10148:	0336      	lsls	r6, r6, #12
   1014a:	e00f      	b.n	1016c <am_hal_uart_transfer+0x374>
   1014c:	a908      	add	r1, sp, #32
   1014e:	4638      	mov	r0, r7
   10150:	f000 faf4 	bl	1073c <am_hal_queue_item_get>
   10154:	b178      	cbz	r0, 10176 <am_hal_uart_transfer+0x37e>
   10156:	6a62      	ldr	r2, [r4, #36]	; 0x24
   10158:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
   1015c:	321c      	adds	r2, #28
   1015e:	0312      	lsls	r2, r2, #12
   10160:	6993      	ldr	r3, [r2, #24]
   10162:	0699      	lsls	r1, r3, #26
   10164:	bf5c      	itt	pl
   10166:	f89d 3020 	ldrbpl.w	r3, [sp, #32]
   1016a:	6013      	strpl	r3, [r2, #0]
   1016c:	69b3      	ldr	r3, [r6, #24]
   1016e:	069b      	lsls	r3, r3, #26
   10170:	f04f 0201 	mov.w	r2, #1
   10174:	d5ea      	bpl.n	1014c <am_hal_uart_transfer+0x354>
   10176:	9805      	ldr	r0, [sp, #20]
   10178:	f7ff fa36 	bl	f5e8 <am_hal_interrupt_master_set>
   1017c:	e78d      	b.n	1009a <am_hal_uart_transfer+0x2a2>
   1017e:	46b8      	mov	r8, r7
   10180:	e70c      	b.n	ff9c <am_hal_uart_transfer+0x1a4>
   10182:	f7ff fa2d 	bl	f5e0 <am_hal_interrupt_master_disable>
   10186:	6a61      	ldr	r1, [r4, #36]	; 0x24
   10188:	9006      	str	r0, [sp, #24]
   1018a:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
   1018e:	311c      	adds	r1, #28
   10190:	0309      	lsls	r1, r1, #12
   10192:	ae08      	add	r6, sp, #32
   10194:	2200      	movs	r2, #0
   10196:	698b      	ldr	r3, [r1, #24]
   10198:	06d8      	lsls	r0, r3, #27
   1019a:	d409      	bmi.n	101b0 <am_hal_uart_transfer+0x3b8>
   1019c:	680b      	ldr	r3, [r1, #0]
   1019e:	f413 6f70 	tst.w	r3, #3840	; 0xf00
   101a2:	f102 0201 	add.w	r2, r2, #1
   101a6:	d11a      	bne.n	101de <am_hal_uart_transfer+0x3e6>
   101a8:	2a20      	cmp	r2, #32
   101aa:	f806 3b01 	strb.w	r3, [r6], #1
   101ae:	d1f2      	bne.n	10196 <am_hal_uart_transfer+0x39e>
   101b0:	f104 0648 	add.w	r6, r4, #72	; 0x48
   101b4:	a908      	add	r1, sp, #32
   101b6:	4630      	mov	r0, r6
   101b8:	f000 fa82 	bl	106c0 <am_hal_queue_item_add>
   101bc:	b1a8      	cbz	r0, 101ea <am_hal_uart_transfer+0x3f2>
   101be:	9806      	ldr	r0, [sp, #24]
   101c0:	f7ff fa12 	bl	f5e8 <am_hal_interrupt_master_set>
   101c4:	6d24      	ldr	r4, [r4, #80]	; 0x50
   101c6:	42bc      	cmp	r4, r7
   101c8:	bf28      	it	cs
   101ca:	463c      	movcs	r4, r7
   101cc:	4659      	mov	r1, fp
   101ce:	4630      	mov	r0, r6
   101d0:	4622      	mov	r2, r4
   101d2:	f000 fab3 	bl	1073c <am_hal_queue_item_get>
   101d6:	e78e      	b.n	100f6 <am_hal_uart_transfer+0x2fe>
   101d8:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
   101dc:	e78b      	b.n	100f6 <am_hal_uart_transfer+0x2fe>
   101de:	9806      	ldr	r0, [sp, #24]
   101e0:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
   101e4:	f7ff fa00 	bl	f5e8 <am_hal_interrupt_master_set>
   101e8:	e612      	b.n	fe10 <am_hal_uart_transfer+0x18>
   101ea:	9806      	ldr	r0, [sp, #24]
   101ec:	4d01      	ldr	r5, [pc, #4]	; (101f4 <am_hal_uart_transfer+0x3fc>)
   101ee:	f7ff f9fb 	bl	f5e8 <am_hal_interrupt_master_set>
   101f2:	e60d      	b.n	fe10 <am_hal_uart_transfer+0x18>
   101f4:	08000001 	.word	0x08000001

000101f8 <am_hal_uart_interrupt_service>:
   101f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   101fc:	4680      	mov	r8, r0
   101fe:	484a      	ldr	r0, [pc, #296]	; (10328 <am_hal_uart_interrupt_service+0x130>)
   10200:	f8d8 3000 	ldr.w	r3, [r8]
   10204:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   10208:	4283      	cmp	r3, r0
   1020a:	b08a      	sub	sp, #40	; 0x28
   1020c:	d126      	bne.n	1025c <am_hal_uart_interrupt_service+0x64>
   1020e:	f011 0f50 	tst.w	r1, #80	; 0x50
   10212:	f8d8 5024 	ldr.w	r5, [r8, #36]	; 0x24
   10216:	460e      	mov	r6, r1
   10218:	4614      	mov	r4, r2
   1021a:	d002      	beq.n	10222 <am_hal_uart_interrupt_service+0x2a>
   1021c:	f898 3044 	ldrb.w	r3, [r8, #68]	; 0x44
   10220:	bb6b      	cbnz	r3, 1027e <am_hal_uart_interrupt_service+0x86>
   10222:	06b6      	lsls	r6, r6, #26
   10224:	d40a      	bmi.n	1023c <am_hal_uart_interrupt_service+0x44>
   10226:	b12c      	cbz	r4, 10234 <am_hal_uart_interrupt_service+0x3c>
   10228:	f898 3028 	ldrb.w	r3, [r8, #40]	; 0x28
   1022c:	b163      	cbz	r3, 10248 <am_hal_uart_interrupt_service+0x50>
   1022e:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
   10232:	b1bb      	cbz	r3, 10264 <am_hal_uart_interrupt_service+0x6c>
   10234:	2000      	movs	r0, #0
   10236:	b00a      	add	sp, #40	; 0x28
   10238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1023c:	f898 3028 	ldrb.w	r3, [r8, #40]	; 0x28
   10240:	2b00      	cmp	r3, #0
   10242:	d13e      	bne.n	102c2 <am_hal_uart_interrupt_service+0xca>
   10244:	2c00      	cmp	r4, #0
   10246:	d0f5      	beq.n	10234 <am_hal_uart_interrupt_service+0x3c>
   10248:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
   1024c:	351c      	adds	r5, #28
   1024e:	032d      	lsls	r5, r5, #12
   10250:	69ab      	ldr	r3, [r5, #24]
   10252:	071b      	lsls	r3, r3, #28
   10254:	d40e      	bmi.n	10274 <am_hal_uart_interrupt_service+0x7c>
   10256:	2301      	movs	r3, #1
   10258:	6023      	str	r3, [r4, #0]
   1025a:	e7eb      	b.n	10234 <am_hal_uart_interrupt_service+0x3c>
   1025c:	2002      	movs	r0, #2
   1025e:	b00a      	add	sp, #40	; 0x28
   10260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10264:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
   10268:	351c      	adds	r5, #28
   1026a:	032d      	lsls	r5, r5, #12
   1026c:	69ab      	ldr	r3, [r5, #24]
   1026e:	071a      	lsls	r2, r3, #28
   10270:	d4e0      	bmi.n	10234 <am_hal_uart_interrupt_service+0x3c>
   10272:	e7f0      	b.n	10256 <am_hal_uart_interrupt_service+0x5e>
   10274:	2000      	movs	r0, #0
   10276:	6020      	str	r0, [r4, #0]
   10278:	b00a      	add	sp, #40	; 0x28
   1027a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1027e:	f7ff f9af 	bl	f5e0 <am_hal_interrupt_master_disable>
   10282:	f8d8 1024 	ldr.w	r1, [r8, #36]	; 0x24
   10286:	9001      	str	r0, [sp, #4]
   10288:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
   1028c:	311c      	adds	r1, #28
   1028e:	0309      	lsls	r1, r1, #12
   10290:	a802      	add	r0, sp, #8
   10292:	2200      	movs	r2, #0
   10294:	698b      	ldr	r3, [r1, #24]
   10296:	06df      	lsls	r7, r3, #27
   10298:	d409      	bmi.n	102ae <am_hal_uart_interrupt_service+0xb6>
   1029a:	680b      	ldr	r3, [r1, #0]
   1029c:	f413 6f70 	tst.w	r3, #3840	; 0xf00
   102a0:	f102 0201 	add.w	r2, r2, #1
   102a4:	d134      	bne.n	10310 <am_hal_uart_interrupt_service+0x118>
   102a6:	2a20      	cmp	r2, #32
   102a8:	f800 3b01 	strb.w	r3, [r0], #1
   102ac:	d1f2      	bne.n	10294 <am_hal_uart_interrupt_service+0x9c>
   102ae:	a902      	add	r1, sp, #8
   102b0:	f108 0048 	add.w	r0, r8, #72	; 0x48
   102b4:	f000 fa04 	bl	106c0 <am_hal_queue_item_add>
   102b8:	b380      	cbz	r0, 1031c <am_hal_uart_interrupt_service+0x124>
   102ba:	9801      	ldr	r0, [sp, #4]
   102bc:	f7ff f994 	bl	f5e8 <am_hal_interrupt_master_set>
   102c0:	e7af      	b.n	10222 <am_hal_uart_interrupt_service+0x2a>
   102c2:	f8d8 6024 	ldr.w	r6, [r8, #36]	; 0x24
   102c6:	f7ff f98b 	bl	f5e0 <am_hal_interrupt_master_disable>
   102ca:	f506 2680 	add.w	r6, r6, #262144	; 0x40000
   102ce:	361c      	adds	r6, #28
   102d0:	9002      	str	r0, [sp, #8]
   102d2:	0336      	lsls	r6, r6, #12
   102d4:	f108 072c 	add.w	r7, r8, #44	; 0x2c
   102d8:	e011      	b.n	102fe <am_hal_uart_interrupt_service+0x106>
   102da:	f10d 0103 	add.w	r1, sp, #3
   102de:	4638      	mov	r0, r7
   102e0:	f000 fa2c 	bl	1073c <am_hal_queue_item_get>
   102e4:	b180      	cbz	r0, 10308 <am_hal_uart_interrupt_service+0x110>
   102e6:	f8d8 1024 	ldr.w	r1, [r8, #36]	; 0x24
   102ea:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
   102ee:	311c      	adds	r1, #28
   102f0:	0309      	lsls	r1, r1, #12
   102f2:	698b      	ldr	r3, [r1, #24]
   102f4:	0698      	lsls	r0, r3, #26
   102f6:	bf5c      	itt	pl
   102f8:	f89d 3003 	ldrbpl.w	r3, [sp, #3]
   102fc:	600b      	strpl	r3, [r1, #0]
   102fe:	69b3      	ldr	r3, [r6, #24]
   10300:	0699      	lsls	r1, r3, #26
   10302:	f04f 0201 	mov.w	r2, #1
   10306:	d5e8      	bpl.n	102da <am_hal_uart_interrupt_service+0xe2>
   10308:	9802      	ldr	r0, [sp, #8]
   1030a:	f7ff f96d 	bl	f5e8 <am_hal_interrupt_master_set>
   1030e:	e78a      	b.n	10226 <am_hal_uart_interrupt_service+0x2e>
   10310:	9801      	ldr	r0, [sp, #4]
   10312:	f7ff f969 	bl	f5e8 <am_hal_interrupt_master_set>
   10316:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   1031a:	e78c      	b.n	10236 <am_hal_uart_interrupt_service+0x3e>
   1031c:	9801      	ldr	r0, [sp, #4]
   1031e:	f7ff f963 	bl	f5e8 <am_hal_interrupt_master_set>
   10322:	4802      	ldr	r0, [pc, #8]	; (1032c <am_hal_uart_interrupt_service+0x134>)
   10324:	e787      	b.n	10236 <am_hal_uart_interrupt_service+0x3e>
   10326:	bf00      	nop
   10328:	01ea9e06 	.word	0x01ea9e06
   1032c:	08000001 	.word	0x08000001

00010330 <am_hal_uart_interrupt_enable>:
   10330:	6803      	ldr	r3, [r0, #0]
   10332:	4a08      	ldr	r2, [pc, #32]	; (10354 <am_hal_uart_interrupt_enable+0x24>)
   10334:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   10338:	4293      	cmp	r3, r2
   1033a:	d109      	bne.n	10350 <am_hal_uart_interrupt_enable+0x20>
   1033c:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1033e:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   10342:	331c      	adds	r3, #28
   10344:	031b      	lsls	r3, r3, #12
   10346:	2000      	movs	r0, #0
   10348:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1034a:	4311      	orrs	r1, r2
   1034c:	6399      	str	r1, [r3, #56]	; 0x38
   1034e:	4770      	bx	lr
   10350:	2002      	movs	r0, #2
   10352:	4770      	bx	lr
   10354:	01ea9e06 	.word	0x01ea9e06

00010358 <am_hal_uart_interrupt_clear>:
   10358:	6803      	ldr	r3, [r0, #0]
   1035a:	4a07      	ldr	r2, [pc, #28]	; (10378 <am_hal_uart_interrupt_clear+0x20>)
   1035c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   10360:	4293      	cmp	r3, r2
   10362:	d107      	bne.n	10374 <am_hal_uart_interrupt_clear+0x1c>
   10364:	6a43      	ldr	r3, [r0, #36]	; 0x24
   10366:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   1036a:	331c      	adds	r3, #28
   1036c:	031b      	lsls	r3, r3, #12
   1036e:	2000      	movs	r0, #0
   10370:	6459      	str	r1, [r3, #68]	; 0x44
   10372:	4770      	bx	lr
   10374:	2002      	movs	r0, #2
   10376:	4770      	bx	lr
   10378:	01ea9e06 	.word	0x01ea9e06

0001037c <am_hal_uart_interrupt_status_get>:
   1037c:	6803      	ldr	r3, [r0, #0]
   1037e:	b410      	push	{r4}
   10380:	4c0b      	ldr	r4, [pc, #44]	; (103b0 <am_hal_uart_interrupt_status_get+0x34>)
   10382:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   10386:	42a3      	cmp	r3, r4
   10388:	d10d      	bne.n	103a6 <am_hal_uart_interrupt_status_get+0x2a>
   1038a:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1038c:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   10390:	331c      	adds	r3, #28
   10392:	031b      	lsls	r3, r3, #12
   10394:	b92a      	cbnz	r2, 103a2 <am_hal_uart_interrupt_status_get+0x26>
   10396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   10398:	f85d 4b04 	ldr.w	r4, [sp], #4
   1039c:	600b      	str	r3, [r1, #0]
   1039e:	2000      	movs	r0, #0
   103a0:	4770      	bx	lr
   103a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   103a4:	e7f8      	b.n	10398 <am_hal_uart_interrupt_status_get+0x1c>
   103a6:	2002      	movs	r0, #2
   103a8:	f85d 4b04 	ldr.w	r4, [sp], #4
   103ac:	4770      	bx	lr
   103ae:	bf00      	nop
   103b0:	01ea9e06 	.word	0x01ea9e06

000103b4 <am_hal_cachectrl_control>:
   103b4:	b510      	push	{r4, lr}
   103b6:	3801      	subs	r0, #1
   103b8:	b08e      	sub	sp, #56	; 0x38
   103ba:	2810      	cmp	r0, #16
   103bc:	f200 815e 	bhi.w	1067c <am_hal_cachectrl_control+0x2c8>
   103c0:	e8df f010 	tbh	[pc, r0, lsl #1]
   103c4:	00360018 	.word	0x00360018
   103c8:	0040003d 	.word	0x0040003d
   103cc:	00450043 	.word	0x00450043
   103d0:	0011001a 	.word	0x0011001a
   103d4:	00540047 	.word	0x00540047
   103d8:	009a0061 	.word	0x009a0061
   103dc:	010c00d3 	.word	0x010c00d3
   103e0:	013f0126 	.word	0x013f0126
   103e4:	001d      	.short	0x001d
   103e6:	f44f 7300 	mov.w	r3, #512	; 0x200
   103ea:	4aac      	ldr	r2, [pc, #688]	; (1069c <am_hal_cachectrl_control+0x2e8>)
   103ec:	2000      	movs	r0, #0
   103ee:	6093      	str	r3, [r2, #8]
   103f0:	b00e      	add	sp, #56	; 0x38
   103f2:	bd10      	pop	{r4, pc}
   103f4:	2301      	movs	r3, #1
   103f6:	e7f8      	b.n	103ea <am_hal_cachectrl_control+0x36>
   103f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
   103fc:	e7f5      	b.n	103ea <am_hal_cachectrl_control+0x36>
   103fe:	2900      	cmp	r1, #0
   10400:	f000 813c 	beq.w	1067c <am_hal_cachectrl_control+0x2c8>
   10404:	684a      	ldr	r2, [r1, #4]
   10406:	48a6      	ldr	r0, [pc, #664]	; (106a0 <am_hal_cachectrl_control+0x2ec>)
   10408:	4202      	tst	r2, r0
   1040a:	f040 8137 	bne.w	1067c <am_hal_cachectrl_control+0x2c8>
   1040e:	688b      	ldr	r3, [r1, #8]
   10410:	4018      	ands	r0, r3
   10412:	f040 8133 	bne.w	1067c <am_hal_cachectrl_control+0x2c8>
   10416:	780c      	ldrb	r4, [r1, #0]
   10418:	2c00      	cmp	r4, #0
   1041a:	f040 8133 	bne.w	10684 <am_hal_cachectrl_control+0x2d0>
   1041e:	4c9f      	ldr	r4, [pc, #636]	; (1069c <am_hal_cachectrl_control+0x2e8>)
   10420:	7849      	ldrb	r1, [r1, #1]
   10422:	6122      	str	r2, [r4, #16]
   10424:	6163      	str	r3, [r4, #20]
   10426:	6823      	ldr	r3, [r4, #0]
   10428:	f361 0382 	bfi	r3, r1, #2, #1
   1042c:	6023      	str	r3, [r4, #0]
   1042e:	e7df      	b.n	103f0 <am_hal_cachectrl_control+0x3c>
   10430:	4b9a      	ldr	r3, [pc, #616]	; (1069c <am_hal_cachectrl_control+0x2e8>)
   10432:	681b      	ldr	r3, [r3, #0]
   10434:	01db      	lsls	r3, r3, #7
   10436:	f140 811f 	bpl.w	10678 <am_hal_cachectrl_control+0x2c4>
   1043a:	2302      	movs	r3, #2
   1043c:	e7d5      	b.n	103ea <am_hal_cachectrl_control+0x36>
   1043e:	f44f 6388 	mov.w	r3, #1088	; 0x440
   10442:	e7d2      	b.n	103ea <am_hal_cachectrl_control+0x36>
   10444:	f44f 7308 	mov.w	r3, #544	; 0x220
   10448:	e7cf      	b.n	103ea <am_hal_cachectrl_control+0x36>
   1044a:	2340      	movs	r3, #64	; 0x40
   1044c:	e7cd      	b.n	103ea <am_hal_cachectrl_control+0x36>
   1044e:	2320      	movs	r3, #32
   10450:	e7cb      	b.n	103ea <am_hal_cachectrl_control+0x36>
   10452:	f7ff f8c5 	bl	f5e0 <am_hal_interrupt_master_disable>
   10456:	4a91      	ldr	r2, [pc, #580]	; (1069c <am_hal_cachectrl_control+0x2e8>)
   10458:	9000      	str	r0, [sp, #0]
   1045a:	6813      	ldr	r3, [r2, #0]
   1045c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   10460:	6013      	str	r3, [r2, #0]
   10462:	9800      	ldr	r0, [sp, #0]
   10464:	f7ff f8c0 	bl	f5e8 <am_hal_interrupt_master_set>
   10468:	2000      	movs	r0, #0
   1046a:	e7c1      	b.n	103f0 <am_hal_cachectrl_control+0x3c>
   1046c:	f7ff f8b8 	bl	f5e0 <am_hal_interrupt_master_disable>
   10470:	4a8a      	ldr	r2, [pc, #552]	; (1069c <am_hal_cachectrl_control+0x2e8>)
   10472:	9001      	str	r0, [sp, #4]
   10474:	6813      	ldr	r3, [r2, #0]
   10476:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1047a:	6013      	str	r3, [r2, #0]
   1047c:	9801      	ldr	r0, [sp, #4]
   1047e:	f7ff f8b3 	bl	f5e8 <am_hal_interrupt_master_set>
   10482:	2000      	movs	r0, #0
   10484:	e7b4      	b.n	103f0 <am_hal_cachectrl_control+0x3c>
   10486:	f7ff f8ab 	bl	f5e0 <am_hal_interrupt_master_disable>
   1048a:	4603      	mov	r3, r0
   1048c:	4885      	ldr	r0, [pc, #532]	; (106a4 <am_hal_cachectrl_control+0x2f0>)
   1048e:	9302      	str	r3, [sp, #8]
   10490:	f7fe ff1e 	bl	f2d0 <am_hal_flash_load_ui32>
   10494:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
   10498:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
   1049c:	4881      	ldr	r0, [pc, #516]	; (106a4 <am_hal_cachectrl_control+0x2f0>)
   1049e:	f7fe ff1b 	bl	f2d8 <am_hal_flash_store_ui32>
   104a2:	9802      	ldr	r0, [sp, #8]
   104a4:	f7ff f8a0 	bl	f5e8 <am_hal_interrupt_master_set>
   104a8:	f7ff f89a 	bl	f5e0 <am_hal_interrupt_master_disable>
   104ac:	4603      	mov	r3, r0
   104ae:	487d      	ldr	r0, [pc, #500]	; (106a4 <am_hal_cachectrl_control+0x2f0>)
   104b0:	9303      	str	r3, [sp, #12]
   104b2:	f7fe ff0d 	bl	f2d0 <am_hal_flash_load_ui32>
   104b6:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
   104ba:	f440 61ee 	orr.w	r1, r0, #1904	; 0x770
   104be:	4879      	ldr	r0, [pc, #484]	; (106a4 <am_hal_cachectrl_control+0x2f0>)
   104c0:	f7fe ff0a 	bl	f2d8 <am_hal_flash_store_ui32>
   104c4:	9803      	ldr	r0, [sp, #12]
   104c6:	f7ff f88f 	bl	f5e8 <am_hal_interrupt_master_set>
   104ca:	f7ff f889 	bl	f5e0 <am_hal_interrupt_master_disable>
   104ce:	4603      	mov	r3, r0
   104d0:	4874      	ldr	r0, [pc, #464]	; (106a4 <am_hal_cachectrl_control+0x2f0>)
   104d2:	9304      	str	r3, [sp, #16]
   104d4:	f7fe fefc 	bl	f2d0 <am_hal_flash_load_ui32>
   104d8:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
   104dc:	f020 000f 	bic.w	r0, r0, #15
   104e0:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
   104e4:	f041 0103 	orr.w	r1, r1, #3
   104e8:	486e      	ldr	r0, [pc, #440]	; (106a4 <am_hal_cachectrl_control+0x2f0>)
   104ea:	f7fe fef5 	bl	f2d8 <am_hal_flash_store_ui32>
   104ee:	9804      	ldr	r0, [sp, #16]
   104f0:	f7ff f87a 	bl	f5e8 <am_hal_interrupt_master_set>
   104f4:	2000      	movs	r0, #0
   104f6:	e77b      	b.n	103f0 <am_hal_cachectrl_control+0x3c>
   104f8:	f7ff f872 	bl	f5e0 <am_hal_interrupt_master_disable>
   104fc:	4603      	mov	r3, r0
   104fe:	4869      	ldr	r0, [pc, #420]	; (106a4 <am_hal_cachectrl_control+0x2f0>)
   10500:	9305      	str	r3, [sp, #20]
   10502:	f7fe fee5 	bl	f2d0 <am_hal_flash_load_ui32>
   10506:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
   1050a:	f440 51b8 	orr.w	r1, r0, #5888	; 0x1700
   1050e:	4865      	ldr	r0, [pc, #404]	; (106a4 <am_hal_cachectrl_control+0x2f0>)
   10510:	f7fe fee2 	bl	f2d8 <am_hal_flash_store_ui32>
   10514:	9805      	ldr	r0, [sp, #20]
   10516:	f7ff f867 	bl	f5e8 <am_hal_interrupt_master_set>
   1051a:	f7ff f861 	bl	f5e0 <am_hal_interrupt_master_disable>
   1051e:	4603      	mov	r3, r0
   10520:	4860      	ldr	r0, [pc, #384]	; (106a4 <am_hal_cachectrl_control+0x2f0>)
   10522:	9306      	str	r3, [sp, #24]
   10524:	f7fe fed4 	bl	f2d0 <am_hal_flash_load_ui32>
   10528:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
   1052c:	f440 61ea 	orr.w	r1, r0, #1872	; 0x750
   10530:	485c      	ldr	r0, [pc, #368]	; (106a4 <am_hal_cachectrl_control+0x2f0>)
   10532:	f7fe fed1 	bl	f2d8 <am_hal_flash_store_ui32>
   10536:	9806      	ldr	r0, [sp, #24]
   10538:	f7ff f856 	bl	f5e8 <am_hal_interrupt_master_set>
   1053c:	f7ff f850 	bl	f5e0 <am_hal_interrupt_master_disable>
   10540:	4603      	mov	r3, r0
   10542:	4858      	ldr	r0, [pc, #352]	; (106a4 <am_hal_cachectrl_control+0x2f0>)
   10544:	9307      	str	r3, [sp, #28]
   10546:	f7fe fec3 	bl	f2d0 <am_hal_flash_load_ui32>
   1054a:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
   1054e:	f020 000f 	bic.w	r0, r0, #15
   10552:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
   10556:	f041 0101 	orr.w	r1, r1, #1
   1055a:	4852      	ldr	r0, [pc, #328]	; (106a4 <am_hal_cachectrl_control+0x2f0>)
   1055c:	f7fe febc 	bl	f2d8 <am_hal_flash_store_ui32>
   10560:	9807      	ldr	r0, [sp, #28]
   10562:	f7ff f841 	bl	f5e8 <am_hal_interrupt_master_set>
   10566:	2000      	movs	r0, #0
   10568:	e742      	b.n	103f0 <am_hal_cachectrl_control+0x3c>
   1056a:	f7ff f839 	bl	f5e0 <am_hal_interrupt_master_disable>
   1056e:	4603      	mov	r3, r0
   10570:	484c      	ldr	r0, [pc, #304]	; (106a4 <am_hal_cachectrl_control+0x2f0>)
   10572:	9308      	str	r3, [sp, #32]
   10574:	f7fe feac 	bl	f2d0 <am_hal_flash_load_ui32>
   10578:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
   1057c:	f440 51b8 	orr.w	r1, r0, #5888	; 0x1700
   10580:	4848      	ldr	r0, [pc, #288]	; (106a4 <am_hal_cachectrl_control+0x2f0>)
   10582:	f7fe fea9 	bl	f2d8 <am_hal_flash_store_ui32>
   10586:	9808      	ldr	r0, [sp, #32]
   10588:	f7ff f82e 	bl	f5e8 <am_hal_interrupt_master_set>
   1058c:	f7ff f828 	bl	f5e0 <am_hal_interrupt_master_disable>
   10590:	4603      	mov	r3, r0
   10592:	4844      	ldr	r0, [pc, #272]	; (106a4 <am_hal_cachectrl_control+0x2f0>)
   10594:	9309      	str	r3, [sp, #36]	; 0x24
   10596:	f7fe fe9b 	bl	f2d0 <am_hal_flash_load_ui32>
   1059a:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
   1059e:	f440 61ec 	orr.w	r1, r0, #1888	; 0x760
   105a2:	4840      	ldr	r0, [pc, #256]	; (106a4 <am_hal_cachectrl_control+0x2f0>)
   105a4:	f7fe fe98 	bl	f2d8 <am_hal_flash_store_ui32>
   105a8:	9809      	ldr	r0, [sp, #36]	; 0x24
   105aa:	f7ff f81d 	bl	f5e8 <am_hal_interrupt_master_set>
   105ae:	f7ff f817 	bl	f5e0 <am_hal_interrupt_master_disable>
   105b2:	4603      	mov	r3, r0
   105b4:	483b      	ldr	r0, [pc, #236]	; (106a4 <am_hal_cachectrl_control+0x2f0>)
   105b6:	930a      	str	r3, [sp, #40]	; 0x28
   105b8:	f7fe fe8a 	bl	f2d0 <am_hal_flash_load_ui32>
   105bc:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
   105c0:	f020 000f 	bic.w	r0, r0, #15
   105c4:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
   105c8:	f041 0101 	orr.w	r1, r1, #1
   105cc:	4835      	ldr	r0, [pc, #212]	; (106a4 <am_hal_cachectrl_control+0x2f0>)
   105ce:	f7fe fe83 	bl	f2d8 <am_hal_flash_store_ui32>
   105d2:	980a      	ldr	r0, [sp, #40]	; 0x28
   105d4:	f7ff f808 	bl	f5e8 <am_hal_interrupt_master_set>
   105d8:	2000      	movs	r0, #0
   105da:	e709      	b.n	103f0 <am_hal_cachectrl_control+0x3c>
   105dc:	2900      	cmp	r1, #0
   105de:	d04d      	beq.n	1067c <am_hal_cachectrl_control+0x2c8>
   105e0:	680c      	ldr	r4, [r1, #0]
   105e2:	2c03      	cmp	r4, #3
   105e4:	d84c      	bhi.n	10680 <am_hal_cachectrl_control+0x2cc>
   105e6:	f7fe fffb 	bl	f5e0 <am_hal_interrupt_master_disable>
   105ea:	4603      	mov	r3, r0
   105ec:	482d      	ldr	r0, [pc, #180]	; (106a4 <am_hal_cachectrl_control+0x2f0>)
   105ee:	930b      	str	r3, [sp, #44]	; 0x2c
   105f0:	f7fe fe6e 	bl	f2d0 <am_hal_flash_load_ui32>
   105f4:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
   105f8:	ea40 3104 	orr.w	r1, r0, r4, lsl #12
   105fc:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
   10600:	4828      	ldr	r0, [pc, #160]	; (106a4 <am_hal_cachectrl_control+0x2f0>)
   10602:	f7fe fe69 	bl	f2d8 <am_hal_flash_store_ui32>
   10606:	980b      	ldr	r0, [sp, #44]	; 0x2c
   10608:	f7fe ffee 	bl	f5e8 <am_hal_interrupt_master_set>
   1060c:	2000      	movs	r0, #0
   1060e:	e6ef      	b.n	103f0 <am_hal_cachectrl_control+0x3c>
   10610:	b3a1      	cbz	r1, 1067c <am_hal_cachectrl_control+0x2c8>
   10612:	680c      	ldr	r4, [r1, #0]
   10614:	2c07      	cmp	r4, #7
   10616:	d833      	bhi.n	10680 <am_hal_cachectrl_control+0x2cc>
   10618:	f7fe ffe2 	bl	f5e0 <am_hal_interrupt_master_disable>
   1061c:	4603      	mov	r3, r0
   1061e:	4821      	ldr	r0, [pc, #132]	; (106a4 <am_hal_cachectrl_control+0x2f0>)
   10620:	930c      	str	r3, [sp, #48]	; 0x30
   10622:	f7fe fe55 	bl	f2d0 <am_hal_flash_load_ui32>
   10626:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
   1062a:	ea40 1104 	orr.w	r1, r0, r4, lsl #4
   1062e:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
   10632:	481c      	ldr	r0, [pc, #112]	; (106a4 <am_hal_cachectrl_control+0x2f0>)
   10634:	f7fe fe50 	bl	f2d8 <am_hal_flash_store_ui32>
   10638:	980c      	ldr	r0, [sp, #48]	; 0x30
   1063a:	f7fe ffd5 	bl	f5e8 <am_hal_interrupt_master_set>
   1063e:	2000      	movs	r0, #0
   10640:	e6d6      	b.n	103f0 <am_hal_cachectrl_control+0x3c>
   10642:	b1d9      	cbz	r1, 1067c <am_hal_cachectrl_control+0x2c8>
   10644:	680c      	ldr	r4, [r1, #0]
   10646:	2c0f      	cmp	r4, #15
   10648:	d81a      	bhi.n	10680 <am_hal_cachectrl_control+0x2cc>
   1064a:	f7fe ffc9 	bl	f5e0 <am_hal_interrupt_master_disable>
   1064e:	4603      	mov	r3, r0
   10650:	4814      	ldr	r0, [pc, #80]	; (106a4 <am_hal_cachectrl_control+0x2f0>)
   10652:	930d      	str	r3, [sp, #52]	; 0x34
   10654:	f7fe fe3c 	bl	f2d0 <am_hal_flash_load_ui32>
   10658:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
   1065c:	f020 000f 	bic.w	r0, r0, #15
   10660:	ea40 0104 	orr.w	r1, r0, r4
   10664:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
   10668:	480e      	ldr	r0, [pc, #56]	; (106a4 <am_hal_cachectrl_control+0x2f0>)
   1066a:	f7fe fe35 	bl	f2d8 <am_hal_flash_store_ui32>
   1066e:	980d      	ldr	r0, [sp, #52]	; 0x34
   10670:	f7fe ffba 	bl	f5e8 <am_hal_interrupt_master_set>
   10674:	2000      	movs	r0, #0
   10676:	e6bb      	b.n	103f0 <am_hal_cachectrl_control+0x3c>
   10678:	2007      	movs	r0, #7
   1067a:	e6b9      	b.n	103f0 <am_hal_cachectrl_control+0x3c>
   1067c:	2006      	movs	r0, #6
   1067e:	e6b7      	b.n	103f0 <am_hal_cachectrl_control+0x3c>
   10680:	2001      	movs	r0, #1
   10682:	e6b5      	b.n	103f0 <am_hal_cachectrl_control+0x3c>
   10684:	2c01      	cmp	r4, #1
   10686:	d1f9      	bne.n	1067c <am_hal_cachectrl_control+0x2c8>
   10688:	4c04      	ldr	r4, [pc, #16]	; (1069c <am_hal_cachectrl_control+0x2e8>)
   1068a:	7849      	ldrb	r1, [r1, #1]
   1068c:	61a2      	str	r2, [r4, #24]
   1068e:	61e3      	str	r3, [r4, #28]
   10690:	6823      	ldr	r3, [r4, #0]
   10692:	f361 03c3 	bfi	r3, r1, #3, #1
   10696:	6023      	str	r3, [r4, #0]
   10698:	e6aa      	b.n	103f0 <am_hal_cachectrl_control+0x3c>
   1069a:	bf00      	nop
   1069c:	40018000 	.word	0x40018000
   106a0:	f800000f 	.word	0xf800000f
   106a4:	40018004 	.word	0x40018004

000106a8 <am_hal_queue_init>:
   106a8:	b410      	push	{r4}
   106aa:	2400      	movs	r4, #0
   106ac:	e9c0 4400 	strd	r4, r4, [r0]
   106b0:	e9c0 4302 	strd	r4, r3, [r0, #8]
   106b4:	e9c0 2104 	strd	r2, r1, [r0, #16]
   106b8:	f85d 4b04 	ldr.w	r4, [sp], #4
   106bc:	4770      	bx	lr
   106be:	bf00      	nop

000106c0 <am_hal_queue_item_add>:
   106c0:	b570      	push	{r4, r5, r6, lr}
   106c2:	6905      	ldr	r5, [r0, #16]
   106c4:	b082      	sub	sp, #8
   106c6:	4604      	mov	r4, r0
   106c8:	fb02 f505 	mul.w	r5, r2, r5
   106cc:	460e      	mov	r6, r1
   106ce:	f7fe ff87 	bl	f5e0 <am_hal_interrupt_master_disable>
   106d2:	68e2      	ldr	r2, [r4, #12]
   106d4:	9001      	str	r0, [sp, #4]
   106d6:	68a0      	ldr	r0, [r4, #8]
   106d8:	1a13      	subs	r3, r2, r0
   106da:	42ab      	cmp	r3, r5
   106dc:	d31c      	bcc.n	10718 <am_hal_queue_item_add+0x58>
   106de:	b195      	cbz	r5, 10706 <am_hal_queue_item_add+0x46>
   106e0:	6823      	ldr	r3, [r4, #0]
   106e2:	b306      	cbz	r6, 10726 <am_hal_queue_item_add+0x66>
   106e4:	1e71      	subs	r1, r6, #1
   106e6:	194e      	adds	r6, r1, r5
   106e8:	6962      	ldr	r2, [r4, #20]
   106ea:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   106ee:	54d0      	strb	r0, [r2, r3]
   106f0:	6823      	ldr	r3, [r4, #0]
   106f2:	68e0      	ldr	r0, [r4, #12]
   106f4:	3301      	adds	r3, #1
   106f6:	428e      	cmp	r6, r1
   106f8:	fbb3 f2f0 	udiv	r2, r3, r0
   106fc:	fb00 3312 	mls	r3, r0, r2, r3
   10700:	6023      	str	r3, [r4, #0]
   10702:	d1f1      	bne.n	106e8 <am_hal_queue_item_add+0x28>
   10704:	68a0      	ldr	r0, [r4, #8]
   10706:	4405      	add	r5, r0
   10708:	60a5      	str	r5, [r4, #8]
   1070a:	9801      	ldr	r0, [sp, #4]
   1070c:	f7fe ff6c 	bl	f5e8 <am_hal_interrupt_master_set>
   10710:	2401      	movs	r4, #1
   10712:	4620      	mov	r0, r4
   10714:	b002      	add	sp, #8
   10716:	bd70      	pop	{r4, r5, r6, pc}
   10718:	9801      	ldr	r0, [sp, #4]
   1071a:	f7fe ff65 	bl	f5e8 <am_hal_interrupt_master_set>
   1071e:	2400      	movs	r4, #0
   10720:	4620      	mov	r0, r4
   10722:	b002      	add	sp, #8
   10724:	bd70      	pop	{r4, r5, r6, pc}
   10726:	4631      	mov	r1, r6
   10728:	3101      	adds	r1, #1
   1072a:	3301      	adds	r3, #1
   1072c:	428d      	cmp	r5, r1
   1072e:	fbb3 f6f2 	udiv	r6, r3, r2
   10732:	fb02 3316 	mls	r3, r2, r6, r3
   10736:	d1f7      	bne.n	10728 <am_hal_queue_item_add+0x68>
   10738:	6023      	str	r3, [r4, #0]
   1073a:	e7e4      	b.n	10706 <am_hal_queue_item_add+0x46>

0001073c <am_hal_queue_item_get>:
   1073c:	b570      	push	{r4, r5, r6, lr}
   1073e:	6905      	ldr	r5, [r0, #16]
   10740:	4604      	mov	r4, r0
   10742:	b082      	sub	sp, #8
   10744:	fb02 f505 	mul.w	r5, r2, r5
   10748:	460e      	mov	r6, r1
   1074a:	f7fe ff49 	bl	f5e0 <am_hal_interrupt_master_disable>
   1074e:	68a2      	ldr	r2, [r4, #8]
   10750:	9001      	str	r0, [sp, #4]
   10752:	42aa      	cmp	r2, r5
   10754:	d31c      	bcc.n	10790 <am_hal_queue_item_get+0x54>
   10756:	b195      	cbz	r5, 1077e <am_hal_queue_item_get+0x42>
   10758:	6863      	ldr	r3, [r4, #4]
   1075a:	b306      	cbz	r6, 1079e <am_hal_queue_item_get+0x62>
   1075c:	1e71      	subs	r1, r6, #1
   1075e:	194e      	adds	r6, r1, r5
   10760:	6962      	ldr	r2, [r4, #20]
   10762:	5cd3      	ldrb	r3, [r2, r3]
   10764:	f801 3f01 	strb.w	r3, [r1, #1]!
   10768:	6863      	ldr	r3, [r4, #4]
   1076a:	68e0      	ldr	r0, [r4, #12]
   1076c:	3301      	adds	r3, #1
   1076e:	428e      	cmp	r6, r1
   10770:	fbb3 f2f0 	udiv	r2, r3, r0
   10774:	fb00 3312 	mls	r3, r0, r2, r3
   10778:	6063      	str	r3, [r4, #4]
   1077a:	d1f1      	bne.n	10760 <am_hal_queue_item_get+0x24>
   1077c:	68a2      	ldr	r2, [r4, #8]
   1077e:	9801      	ldr	r0, [sp, #4]
   10780:	1b52      	subs	r2, r2, r5
   10782:	60a2      	str	r2, [r4, #8]
   10784:	f7fe ff30 	bl	f5e8 <am_hal_interrupt_master_set>
   10788:	2401      	movs	r4, #1
   1078a:	4620      	mov	r0, r4
   1078c:	b002      	add	sp, #8
   1078e:	bd70      	pop	{r4, r5, r6, pc}
   10790:	9801      	ldr	r0, [sp, #4]
   10792:	f7fe ff29 	bl	f5e8 <am_hal_interrupt_master_set>
   10796:	2400      	movs	r4, #0
   10798:	4620      	mov	r0, r4
   1079a:	b002      	add	sp, #8
   1079c:	bd70      	pop	{r4, r5, r6, pc}
   1079e:	68e0      	ldr	r0, [r4, #12]
   107a0:	4631      	mov	r1, r6
   107a2:	3101      	adds	r1, #1
   107a4:	3301      	adds	r3, #1
   107a6:	42a9      	cmp	r1, r5
   107a8:	fbb3 f6f0 	udiv	r6, r3, r0
   107ac:	fb00 3316 	mls	r3, r0, r6, r3
   107b0:	d1f7      	bne.n	107a2 <am_hal_queue_item_get+0x66>
   107b2:	6063      	str	r3, [r4, #4]
   107b4:	e7e3      	b.n	1077e <am_hal_queue_item_get+0x42>
   107b6:	bf00      	nop
   107b8:	78323025 	.word	0x78323025
   107bc:	00000020 	.word	0x00000020
   107c0:	0000000a 	.word	0x0000000a
   107c4:	50205854 	.word	0x50205854
   107c8:	7265776f 	.word	0x7265776f
   107cc:	74655320 	.word	0x74655320
   107d0:	676e6974 	.word	0x676e6974
   107d4:	6d6f4320 	.word	0x6d6f4320
   107d8:	646e616d 	.word	0x646e616d
   107dc:	0a4b4f20 	.word	0x0a4b4f20
   107e0:	00000000 	.word	0x00000000
   107e4:	61766e49 	.word	0x61766e49
   107e8:	2064696c 	.word	0x2064696c
   107ec:	50205854 	.word	0x50205854
   107f0:	7265776f 	.word	0x7265776f
   107f4:	6c615620 	.word	0x6c615620
   107f8:	25206575 	.word	0x25206575
   107fc:	00000a64 	.word	0x00000a64
   10800:	484d3233 	.word	0x484d3233
   10804:	7243207a 	.word	0x7243207a
   10808:	61747379 	.word	0x61747379
   1080c:	7254206c 	.word	0x7254206c
   10810:	43206d69 	.word	0x43206d69
   10814:	616d6d6f 	.word	0x616d6d6f
   10818:	4f20646e 	.word	0x4f20646e
   1081c:	00000a4b 	.word	0x00000a4b
   10820:	75646f4d 	.word	0x75646f4d
   10824:	6974616c 	.word	0x6974616c
   10828:	49206e6f 	.word	0x49206e6f
   1082c:	7865646e 	.word	0x7865646e
   10830:	6d6f4320 	.word	0x6d6f4320
   10834:	646e616d 	.word	0x646e616d
   10838:	0a4b4f20 	.word	0x0a4b4f20
   1083c:	00000000 	.word	0x00000000
   10840:	656e6567 	.word	0x656e6567
   10844:	65746172 	.word	0x65746172
   10848:	72616320 	.word	0x72616320
   1084c:	72656972 	.word	0x72656972
   10850:	76617720 	.word	0x76617720
   10854:	4b4f2065 	.word	0x4b4f2065
   10858:	0000000a 	.word	0x0000000a
   1085c:	656e6567 	.word	0x656e6567
   10860:	65746172 	.word	0x65746172
   10864:	6e6f6320 	.word	0x6e6f6320
   10868:	6e617473 	.word	0x6e617473
   1086c:	6f6d2074 	.word	0x6f6d2074
   10870:	61726564 	.word	0x61726564
   10874:	20646574 	.word	0x20646574
   10878:	6e676973 	.word	0x6e676973
   1087c:	77206c61 	.word	0x77206c61
   10880:	20657661 	.word	0x20657661
   10884:	000a4b4f 	.word	0x000a4b4f
   10888:	61766e49 	.word	0x61766e49
   1088c:	2064696c 	.word	0x2064696c
   10890:	54524155 	.word	0x54524155
   10894:	65705320 	.word	0x65705320
   10898:	6c616963 	.word	0x6c616963
   1089c:	6d6f4320 	.word	0x6d6f4320
   108a0:	646e616d 	.word	0x646e616d
   108a4:	0d732520 	.word	0x0d732520
   108a8:	0000000a 	.word	0x0000000a
   108ac:	6c6f7041 	.word	0x6c6f7041
   108b0:	20336f6c 	.word	0x20336f6c
   108b4:	54524155 	.word	0x54524155
   108b8:	206f7420 	.word	0x206f7420
   108bc:	20495053 	.word	0x20495053
   108c0:	64697242 	.word	0x64697242
   108c4:	000a6567 	.word	0x000a6567
   108c8:	64616552 	.word	0x64616552
   108cc:	6f726620 	.word	0x6f726620
   108d0:	4c42206d 	.word	0x4c42206d
   108d4:	6f432045 	.word	0x6f432045
   108d8:	6f72746e 	.word	0x6f72746e
   108dc:	72656c6c 	.word	0x72656c6c
   108e0:	69616620 	.word	0x69616620
   108e4:	0a64656c 	.word	0x0a64656c
   108e8:	00000000 	.word	0x00000000
   108ec:	42200a0d 	.word	0x42200a0d
   108f0:	6320454c 	.word	0x6320454c
   108f4:	72746e6f 	.word	0x72746e6f
   108f8:	656c6c6f 	.word	0x656c6c6f
   108fc:	65722072 	.word	0x65722072
   10900:	6e6f7073 	.word	0x6e6f7073
   10904:	74206573 	.word	0x74206573
   10908:	6f656d69 	.word	0x6f656d69
   1090c:	20217475 	.word	0x20217475
   10910:	656b6177 	.word	0x656b6177
   10914:	6f437075 	.word	0x6f437075
   10918:	3d746e75 	.word	0x3d746e75
   1091c:	002c6425 	.word	0x002c6425
   10920:	0001c200 	.word	0x0001c200
   10924:	00000060 	.word	0x00000060
	...
   10934:	0000001b 	.word	0x0000001b
   10938:	100021f8 	.word	0x100021f8
   1093c:	00000800 	.word	0x00000800
	...

0001094c <g_AM_BSP_GPIO_COM_UART_RX>:
   1094c:	00000000                                ....

00010950 <g_AM_BSP_GPIO_COM_UART_TX>:
   10950:	00000000                                ....

00010954 <g_AM_BSP_GPIO_ITM_SWO>:
   10954:	00000002                                ....

00010958 <am_hal_ble_default_config>:
   10958:	00000004 00000020 00000020 00000002     .... ... .......
   10968:	00000000 00000032 00010101              ....2.......

00010974 <ccitt_table>:
   10974:	80050000 000a800f 001e801b 80110014     ................
   10984:	00368033 8039003c 802d0028 00228027     3.6.<.9.(.-.'.".
   10994:	00668063 8069006c 807d0078 00728077     c.f.l.i.x.}.w.r.
   109a4:	80550050 005a805f 004e804b 80410044     P.U._.Z.K.N.D.A.
   109b4:	00c680c3 80c900cc 80dd00d8 00d280d7     ................
   109c4:	80f500f0 00fa80ff 00ee80eb 80e100e4     ................
   109d4:	80a500a0 00aa80af 00be80bb 80b100b4     ................
   109e4:	00968093 8099009c 808d0088 00828087     ................
   109f4:	01868183 8189018c 819d0198 01928197     ................
   10a04:	81b501b0 01ba81bf 01ae81ab 81a101a4     ................
   10a14:	81e501e0 01ea81ef 01fe81fb 81f101f4     ................
   10a24:	01d681d3 81d901dc 81cd01c8 01c281c7     ................
   10a34:	81450140 014a814f 015e815b 81510154     @.E.O.J.[.^.T.Q.
   10a44:	01768173 8179017c 816d0168 01628167     s.v.|.y.h.m.g.b.
   10a54:	01268123 8129012c 813d0138 01328137     #.&.,.).8.=.7.2.
   10a64:	81150110 011a811f 010e810b 81010104     ................
   10a74:	03068303 8309030c 831d0318 03128317     ................
   10a84:	83350330 033a833f 032e832b 83210324     0.5.?.:.+...$.!.
   10a94:	83650360 036a836f 037e837b 83710374     `.e.o.j.{.~.t.q.
   10aa4:	03568353 8359035c 834d0348 03428347     S.V.\.Y.H.M.G.B.
   10ab4:	83c503c0 03ca83cf 03de83db 83d103d4     ................
   10ac4:	03f683f3 83f903fc 83ed03e8 03e283e7     ................
   10ad4:	03a683a3 83a903ac 83bd03b8 03b283b7     ................
   10ae4:	83950390 039a839f 038e838b 83810384     ................
   10af4:	82850280 028a828f 029e829b 82910294     ................
   10b04:	02b682b3 82b902bc 82ad02a8 02a282a7     ................
   10b14:	02e682e3 82e902ec 82fd02f8 02f282f7     ................
   10b24:	82d502d0 02da82df 02ce82cb 82c102c4     ................
   10b34:	02468243 8249024c 825d0258 02528257     C.F.L.I.X.].W.R.
   10b44:	82750270 027a827f 026e826b 82610264     p.u...z.k.n.d.a.
   10b54:	82250220 022a822f 023e823b 82310234      .%./.*.;.>.4.1.
   10b64:	02168213 8219021c 820d0208 02028207     ................

00010b74 <am_ble_buffer_patch_data>:
   10b74:	0d382200 0000ffff 00093532 00093965     ."8.....25..e9..
   10b84:	0009452b 000948a9 000953f7 00095c1a     +E...H...S...\..
   10b94:	0009641c 00096afd 0009751a 00097bde     .d...j...u...{..
   10ba4:	0009854b 00098bb3 0009951f 00099c4f     K...........O...
   10bb4:	0009a2f5 0009ad1e 00000000 00000000     ................
	...
   10bf0:	47004800 20004841 bf00bf00 b005bf00     .H.GAH. ........
   10c00:	0000bdf0 20006790 00002710 20001000     .....g. .'..... 
   10c10:	00001388 20001018 000003ff b0ffb5ff     ....... ........
   10c20:	4607b082 4616460c 48302500 99846006     ...F.F.F.%0H.`..
   10c30:	28eed004 2003d002 bd707360 28f17c60     ...(... `sp.`|.(
   10c40:	28f2d006 28f3d004 2002d002 bd707360     ...(...(... `sp.
   10c50:	73602000 0000bd70 20001018 2000100a     . `sp...... ... 
   10c60:	47004800 20004d81 28008870 2014d116     .H.G.M. p..(... 
   10c70:	200b2101 fcc6f7ed 0000bd10 47004800     .!. .........H.G
   10c80:	20004e15 d0022800 28017808 7808d01a     .N. .(...x.(...x
   10c90:	d0172802 d00e2800 d00c2801 fed9f7f0     .(...(...(......
   10ca0:	d0082800 f816f000 f7ef2032 f7f0f851     .(......2 ..Q...
   10cb0:	e000e180 e000e100 68014802 43912228     .........H.h(".C
   10cc0:	47706001 52c00000 47004800 20004881     .`pG...R.H.G.H. 
   10cd0:	47706001 52c00000 68014802 43912250     .`pG...R.H.hP".C
   10ce0:	47706001 52c00000 47004800 200048a1     .`pG...R.H.G.H. 
   10cf0:	508040c0 460bb510 24024611 4350220c     .@.P...F.F.$."PC
   10d00:	18804a06 d0062800 2a006842 4618d003     .J...(..Bh.*...F
   10d10:	fb10f000 46204604 0000bd10 00015698     .....F F.....V..
   10d20:	47084900 20004e99 fd5cf7f3 5b00207c     .I.G.N. ..\.| .[
   10d30:	1940f80b 2900b2c1 3440d003 f7f98fa0     ..@....)..@4....
   10d40:	bd70fd73 e7e12101 47084900 20005081     s.p..!...I.G.P. 
   10d50:	8810f380 f7f34628 2100f94d 8810f381     ....(F..M..!....
   10d60:	d00f2800 460a8881 2a463a0a 1c64d20c     .(.....F.:F*..d.
   10d70:	03d20bd2 84c2430a f3802000 47708810     .....C... ....pG
   10d80:	00000466 50804440 47084900 200050ed     f...@D.P.I.G.P. 
   10d90:	8f809011 9812900e 900d3008 30309812     .........0....00
   10da0:	9812900c 900b3044 900a2000 980c2501     ....D0... ...%..
   10db0:	f8a4f007 d02d2800 bf00bf00 bf00bf00     .....(-.........
   10dc0:	bf00bf00 bf00bf00 bf00bf00 9a0ce091     ................
   10dd0:	232220ff 300a4611 fb9ef7fd 88617007     . "#.F.0.....pa.
   10de0:	88a181c1 88e18201 892180c1 7aa18101     ..........!....z
   10df0:	e02301c0 9802e077 01401a08 42900940     ..#.w.....@.@..B
   10e00:	9802d91c 01401a40 42400940 9802e016     ....@.@.@.@B....
   10e10:	bf00bf00 bf00bf00 bf00bf00 bf00bf00     ................
   10e20:	2000bf00 9802e00a 01401a38 42900940     ... ....8.@.@..B
   10e30:	607565c1 84b88960 20019a04 88607550     .eu``...... Pu`.
   10e40:	9a0485f8 75107860 47004800 200048e1     ....`x.u.H.G.H. 
   10e50:	0000bf00 8d3a8960 b2801e40 d1034282     ....`.:.@....B..
   10e60:	43012008 71819803 bdf0b007 20006160     . .C...q....`a. 
	...
   10e80:	00000021 00000000 00000001 00000000     !...............
   10e90:	ffffffff 000003ff 1f3c00ff 00000000     ..........<.....
   10ea0:	00002001 00007d89 00002002 000076fd     . ...}... ...v..
   10eb0:	8c001810 9b080bc0 42181e5b 9808d105     ........[..B....
   10ec0:	47004800 200048c1 0000bf00 18d24b80     .H.G.H. .....K..
   10ed0:	20018450 8810f380 280068b8 2000d016     P.. .....h.(... 
   10ee0:	d0192800 28006b38 2000d012 d0132800     .(..8k.(... .(..
   10ef0:	1900fc9f 68594b06 088a1809 1b090094     .....KYh........
   10f00:	01416059 18801a08 0000bd10 2000602c     Y`A.........,`. 
   10f10:	200067b8 47084900 20005579 6a80217d     .g. .I.GyU. }!.j
   10f20:	42880209 1a40d302 e0002201 2a001a08     ...B..@..".....*
   10f30:	1a081929 f7ee4621 b288feb1 3028bd70     )...!F......p.(0
   10f40:	7e003060 b4104770 32404602 24068cd3     `0.~pG...F@2...$
   10f50:	8d144363 b29b18e3 30608493 46187541     cC........`0Au.F
   10f60:	4770bc10 30603028 28007d40 20002000     ..pG(0`0@}.(. . 
   10f70:	07007940 2004d502 e0347060 f0056928     @y..... `p4.(i..
   10f80:	2800fb51 2002d002 e02c7060 f0039803     Q..(... `p,.....
   10f90:	2804fe4d 4668d107 20027901 d0054388     M..(..hF.y. .C..
   10fa0:	28002000 2000d004 e01c7060 e7f82001     . .(... `p... ..
   10fb0:	20006758 50800040 200067b8 04000000     Xg. @..P.g. ....
   10fc0:	200067c8 47084900 200055cd 207d6a81     .g. .I.G.U. .j} 
   10fd0:	42810200 1a08d302 e0002201 2a001a40     ...B....."..@..*
   10fe0:	4360d004 fca4f7eb e0031a20 f7eb4360     ..`C.... ...`C..
   10ff0:	2400b5f8 7800481c d12d2800 68704e1b     ...$.H.x.(-..Nph
   11000:	28004d1b 4f1bda09 200b2101 210147b8     .M.(...O.!. .G.!
   11010:	47a8200b 28006870 2100dbf6 47a8200b     . .Gph.(...!. .G
   11020:	200a4e15 270547b0 69f8073f 0d2d0505     .N. .G.'?..i..-.
   11030:	d1042d00 68c04811 0e800580 2c64d00c     .-...H.h......d,
   11040:	2014d20a 69f847b0 0d000500 d90442a8     ... .G.i.....B..
   11050:	1c644605 d3f42c64 4903bdf8 70082001     .Fd.d,.....I. .p
   11060:	70084907 0000bdf8 20001001 45800080     .I.p....... ...E
   11070:	00002455 00002391 00003ba1 52c00000     U$...#...;.....R
   11080:	20001000 4818b510 29406801 2140d201     ... ...H.h@)..@!
   11090:	7a806001 d00107c0 bd102000 47804813     .`.z..... ...H.G
   110a0:	07002005 491269c0 d0040500 28017808     . ...i.I.....x.(
   110b0:	2802d014 7808d012 d0082800 d0062801     ...(...x.(...(..
   110c0:	d0042802 4780480b 2032490b 490b4788     .(...H.G.I2 .G.I
   110d0:	47882004 4780480a bd102000 20044909     . .G.H.G. ...I. 
   110e0:	20014788 0000bd10 200067b8 00009305     .G. .....g. ....
   110f0:	20001018 00014b25 00003ba1 00014441     ... %K...;..AD..
   11100:	00014aaf 00014489 b08db5f0 496c4604     .J...D.......FlI
   11110:	4788a804 5b00207c 25009003 90022000     ...G| .[...%. ..
   11120:	f3802001 6c608810 f3812100 46268810     . ....`l.!....&F
   11130:	28003660 4621d06b 910c3144 910b3928     `6.(k.!FD1..(9..
   11140:	910a3164 00ca8881 1851495e 0bc98cc9     d1......^IQ.....
   11150:	d05c2900 f3812101 68008810 495a9001     .)\..!.....h..ZI
   11160:	4788980c 69e04607 d0032800 28002000     ...G.F.i.(... .(
   11170:	e008d002 e7fa2001 980b4953 28004788     ..... ..SI...G.(
   11180:	4952d001 20004788 8810f380 494d88b8     ..RI.G. ......MI
   11190:	184000c0 0bd28cc2 84c203d2 280788b8     ..@............(
   111a0:	7e30d21e 76301e40 f3802001 6b208810     ..0~@.0v. .... k
   111b0:	d0132800 28002000 980ad005 798021fb     .(... .(.....!.y
   111c0:	990a4008 49417188 47884638 f3802000     .@...qAI8F.G. ..
   111d0:	4a3f8810 98037b39 e0154790 e7ea2001     ..?J9{...G... ..
   111e0:	d90f2809 184000c0 0a008d00 49399000     .(....@.......9I
   111f0:	47884638 d0072800 28009800 1c6dd004     8F.G.(.....(..m.
   11200:	e001b2ed b2ed1c6d 28009801 9803d19a     ....m......(....
   11210:	d00e2807 d00c2d00 f3802001 7e308810     .(...-... ....0~
   11220:	76301b40 f3802000 4a2b8810 98034629     @.0v. ....+J)F..
   11230:	20014790 8810f380 4f234828 47b89009     .G. ....(H#O...G
   11240:	20004604 8810f380 d0360020 88e04e1f     .F. .... .6..N..
   11250:	42889903 2807d112 7aa1d007 4f209100     ...B...(...z.. O
   11260:	7b227ae3 47b88921 4b1ee005 89207921     .z"{!..G...K!y .
   11270:	4798462a 46209002 e00347b0 46214a1a     *F.G.. F.G...J!F
   11280:	4790a804 f3802001 490f8810 47889809     ...G. .....I...G
   11290:	00204604 9804d10c d0032800 28002000     .F ......(... .(
   112a0:	e005d002 e7fa2001 a9044a10 47909809     ..... ...J.....G
   112b0:	f3802000 2c008810 9802d1c9 bdf0b00d     . .....,........
   112c0:	000038b5 50804440 00003945 000093a5     .8..@D.PE9......
   112d0:	0000b809 0000565d 0000b705 200061b8     ....]V.......a. 
   112e0:	0000b729 00012235 00003967 0000390f     )...5"..g9...9..
   112f0:	2400b5f1 4e164d15 f3802001 98008810     ...$.M.N. ......
   11300:	210047a8 8810f381 d0172800 460a8881     .G.!.....(.....F
   11310:	2a463a0a 00c9d214 8d091989 21010a0f     .:F*...........!
   11320:	8810f381 4788490b d0032800 d0012f00     .....I.G.(.../..
   11330:	b2e41c64 f3802000 e7dd8810 bdf84620     d.... ...... F..
   11340:	29491fc9 4904d3d8 e7d54788 00003945     ..I)...I.G..E9..
   11350:	50804440 0000565d 000093a5 b092b5f1     @D.P]V..........
   11360:	30409812 8f809011 9812900e 900d3008     ..@0.........0..
   11370:	30309812 9812900c 900b3044 900a2000     ..00....D0... ..
   11380:	980c2501 2c006804 2000d003 d0022800     .%...h.,... .(..
   11390:	2001e093 980ee7fa 48f900c1 90101808     ... .......H....
   113a0:	0bc08cc0 d06e2800 49f6980e 900f0080     .....(n....I....
   113b0:	30a05808 20017946 d5190771 d0172c00     .X.0Fy. q....,..
   113c0:	06b04ff1 7b20d507 078047b8 2000d401     .O.... {.G..... 
   113d0:	2001e006 7b20e004 07c047b8 2001d003     ... .. {.G..... 
   113e0:	d0022800 2000e004 6824e7fa d1e82c00     .(..... ..$h.,..
   113f0:	d0622800 22004be5 980c4621 68a64798     .(b..K."!F...G.h
   11400:	a9094ae3 47904630 d1562800 4fdc88a0     .J..0F.G.(V....O
   11410:	19c000c0 49df8d40 20001841 7912aa08     ....@..IA.. ...y
   11420:	dd062a00 540a5c32 aa081c40 42907912     .*..2\.T@....y.B
   11430:	49d9dbf8 478868a0 980f49d2 30a05808     ...I.h.G.I...X.0
   11440:	07c07940 a908d003 1d007908 a8089009     @y.......y......
   11450:	98107901 02098d02 430ab2d2 21038502     .y.........C...!
   11460:	8d029810 430a438a 98118502 21008f80     .....C.C.......!
   11470:	19c000c0 980b84c1 28006800 2000d004     .........h.(... 
   11480:	d0032800 e018e010 e7f92001 88a1980b     .(....... ......
   11490:	00ca6840 888049c1 00c01851 8cc219c0     @h...I..Q.......
   114a0:	03d20bd2 84c2430a 46214abd 4790980b     .....C...J!F...G
   114b0:	30609812 1c497e01 98117601 28078f80     ..`0.~I..v.....(
   114c0:	990ed208 49af008a 31a05889 07497949     .......I.X.1IyI.
   114d0:	2500d500 6809990d d01f2900 462a2100     ...%...h.)...!*F
   114e0:	d077438a d2762807 48ae49af 90094788     .Cw..(v..I.H.G..
   114f0:	90082000 8f809811 48a20081 30a05840     . .........H@X.0
   11500:	07c07940 90070fc0 6806980d d0092e00     @y.........h....
   11510:	6830990d 28006008 e003d002 e7de2101     ..0h.`.(.....!..
   11520:	6048990d d07d2e00 90062000 90039812     ..H`..}.. ......
   11530:	9004a806 9b099f07 25089705 20005f75     ...........%u_. 
   11540:	90019002 90002001 8e429811 b2d44684     ..... ....B..F..
   11550:	46292001 b2893109 2f009f05 1d09d001     . )F.1...../....
   11560:	00c9b289 b2893108 8e3f4667 d205428f     .....1..gF?..B..
   11570:	05793f50 42a20e0c b2d4d200 dd0142a5     P?y....B.....B..
   11580:	00640864 1a6f4621 42971c62 1909db05     d.d.!Fo.b..B....
   11590:	b2c01c40 42971a6f 4298daf9 2500d901     @...o..B...B...%
   115a0:	9904e034 4f817008 487e4981 46014788     4....p.O.I~H.G.F
   115b0:	28009800 2000d012 7ab09000 0f800780     ...(... ...z....
   115c0:	d0092801 72882002 88c268f0 88809202     .(... .r.h......
   115d0:	e0099001 e058e062 e7f42001 72882001     ....b.X.. ... .r
   115e0:	19009802 9002b280 dd0142a5 e00072cc     .........B...r..
   115f0:	980172cd 980280c8 1b288108 2d00b205     .r........(....-
   11600:	2201dc22 98039b05 250147b8 d0202d00     "..".....G.%.- .
   11610:	7e004668 18099908 9108b2c9 1a089909     hF.~............
   11620:	e000b280 9009e035 69c09812 d01a2800     ....5......i.(..
   11630:	6a009812 98126006 20006206 98086030     ...j.`...b. 0`..
   11640:	d913280a e0242500 9b052200 47b89803     .(...%$..".....G
   11650:	980de7aa 28006800 990dd101 6030604e     .....h.(....N`0`
   11660:	6006980d 9812e015 e7e461c6 6806980d     ...`.....a.....h
   11670:	d0062e00 6830990d 28006008 990dd101     ......0h.`.(....
   11680:	2e006048 e74fd000 4a4ae003 980b990d     H`....O...JJ....
   11690:	2d004790 4948d002 4788980d 6800980b     .G.-..HI...G...h
   116a0:	d0032800 28002000 e04bd002 e7fa2001     .(... .(..K.. ..
   116b0:	8f809811 d2452807 30809812 280478c0     .....(E....0.x.(
   116c0:	493bd140 47884837 d03b2800 21008882     @.;I7H.G.(;....!
   116d0:	00d24b2b 855118d2 00c98881 8d8a18c9     +K....Q.........
   116e0:	0c640454 858c2200 00c98881 8d0c18c9     T.d.."..........
   116f0:	850cb2e4 24018881 18c900c9 08ad8d0d     .......$........
   11700:	432500ad 8881850d 18c900c9 0be48ccc     ..%C............
   11710:	84cc03e4 8884990b 00e56849 88894c1f     ........Ih...L..
   11720:	00c9192c 8ccb18c9 03db0bdb 84cb4323     ,...........#C..
   11730:	6809990b d00d2900 6849990b 990b6008     ...h.)....Ih.`..
   11740:	60026048 6800980b d0062800 29002100     H`.`...h.(...!.)
   11750:	e03cd005 6008990b 2101e7f1 2800e7f7     ..<....`...!...(
   11760:	4a07d00a 00c98881 8cc91889 29000bc9     ...J...........)
   11770:	6800d024 d1f52800 d0262800 0000e027     $..h.(...(&.'...
   11780:	50804440 20006160 0000af81 00003817     @D.P`a. .....8..
   11790:	00010341 50804000 000093a5 00000466     A....@.P....f...
   117a0:	00003967 200061e4 000039bb 00010011     g9...a. .9......
   117b0:	00003945 0000390f 000038b5 00ca8881     E9...9...8......
   117c0:	18514907 910ab289 2000e7d6 990a900a     .IQ........ ....
   117d0:	225a980e 4a034350 84811880 bdf0b013     ..Z"PC.J........
   117e0:	00000466 50804080 2300b410 46022114     f....@.P...#.!.F
   117f0:	4911434a 6809247d 42a10224 1b09d902     JC.I}$.h$..B....
   11800:	e0002301 43481a61 18410081 0c0c0a88     .#..a.HC..A.....
   11810:	0c4c1900 0d4c1900 0e4c1900 0fc91900     ..L...L...L.....
   11820:	08c01840 d0012b00 e0011810 1e401a10     @....+........@.
   11830:	bc101e40 00004770 20006054 2300b4f0     @...pG..T`. ...#
   11840:	6be54c18 227d4918 02126809 d3024291     .L.k.I}".h...B..
   11850:	23011a8a 1a52e000 43564606 435113f2     ...#..R..FVC..QC
   11860:	261e1a71 104f434e 118f19f6 124919f6     q..&NCO.......I.
   11870:	13ce1871 d0012b00 e0001a80 19421810     q....+........B.
   11880:	008d0891 2b001b52 0143d004 18401a18     ....R..+..C...@.
   11890:	e0031b80 1a180143 19801840 bcf063e2     ....C...@....c..
   118a0:	00004770 20006780 20006054              pG...g. T`. 

000118ac <am_ble_performance_copy_patch_data>:
   118ac:	006e1100 00000400 00000000 01c50101     ..n.............
   118bc:	00000039 00000000 00000000 00000000     9...............
   118cc:	00000000 ffffffff 2000b570 8849490c     ........p.. .II.
   118dc:	188b4a0c 490c881a 24001c9b 022d2513     .J.....I...$.%-.
   118ec:	1c40540c dbfb42a8 2a002000 5c1cdd04     .T@..B... .*...\
   118fc:	1c40540c dbfa4290 47804804 bd702000     .T@..B...H.G. p.
   1190c:	20004800 20004802 20003500 000133af     .H. .H. .5. .3..
   1191c:	b51f08a0 98002400 d243281d 44790001     .....$...(C...yD
   1192c:	18497909 130e448f 40251a40 40404040     .yI..D..@.%@@@@@
   1193c:	40404040 402a4040 2d404040 35403240     @@@@@@*@@@@-@2@5
   1194c:	00404038 b2c09801 fa07f000 9802e02c     8@@.........,...
   1195c:	9801b2c1 f000b2c0 e025f8b8 b2839806     ..........%.....
   1196c:	b2829803 b2c19802 b2c09801 f971f000     ..............q.
   1197c:	9801e01a f000b2c0 e015f90a f829f000     ..............).
   1198c:	9801e012 f000b280 e00df962 fb3bf000     ........b.....;.
   1199c:	f000e00a e007fb94 b2c09801 fac7f000     ................
   119ac:	e0014604 43e42400 b0044620 b403bd10     .F...$.C F......
   119bc:	90014801 2739bd01 b4030000 90014801     .H....9'.....H..
   119cc:	2895bd01 b4030000 90014801 0101bd01     ...(.....H......
   119dc:	b4f00000 22432000 68510612 340124ff     ..... C"..Qh.$.4
   119ec:	60514321 03236851 60514319 05db23a3     !CQ`Qh#..CQ`.#..
   119fc:	08496819 60190049 6909492a 4d29b2ce     .hI.I..`*I.i..)M
   11a0c:	88294f2a d30142b9 e00d2004 42b94f28     *O)..B... ..(O.B
   11a1c:	2003d301 4f26e008 d30142b9 e0032002     ... ..&O.B... ..
   11a2c:	42b94f25 2001d300 18394f24 7e093120     %O.B... $O9. 1.~
   11a3c:	da0942b1 dd012800 b2401e40 7a091839     .B...(..@.@.9..z
   11a4c:	19c00040 e00b8b00 da042804 42b15c39     @........(..9\.B
   11a5c:	1c40db01 1839b240 00407a09 8b0019c0     ..@.@.9..z@.....
   11a6c:	62314e17 08496819 60190049 6b314e15     .N1b.hI.I..`.N1k
   11a7c:	4327460f 62986337 633143a1 68518028     .F'C7c.b.C1c(.Qh
   11a8c:	438103b0 78004810 0fc007c0 43190503     ...C.H.x.......C
   11a9c:	68516051 43a10200 60514301 4770bcf0     Q`Qh...C.CQ`..pG
   11aac:	00800000 604e4580 3ff62000 38f60000     .....EN`. .?...8
   11abc:	2df60000 09f60000 67fc0000 04802000     ...-.......g. ..
   11acc:	004050c0 603a4580 b5f02000 2243b082     .P@..E:`. ....C"
   11adc:	68530612 04642401 60534323 0fd207ca     ..Sh.$d.#CS`....
   11aec:	078a4696 074a0fd3 070a0fd4 92010fd2     .F....J.........
   11afc:	0fd206ca 068a9200 46940fd2 0fd5064a     ...........FJ...
   11b0c:	4a1f09ce 27036811 43b9057f 4f1d6912     ...J.h.'...C.i.O
   11b1c:	2800403a 2801d006 2701d009 280205bf     :@.(...(...'...(
   11b2c:	4339d003 d0062800 4339e01b 2701e7fa     ..9C.(....9C...'
   11b3c:	4339057f 0330e7f6 016a4310 46624310     ..9C..0..Cj..CbF
   11b4c:	431002d2 01d29a00 9a014310 43100192     ...C.....C.....C
   11b5c:	431002a2 4310025a 02124672 4a084310     ...CZ..CrF...C.J
   11b6c:	48076110 20436001 68410600 04522201     .a.H.`C ..Ah."R.
   11b7c:	4a054391 07d27812 43110b92 b0026041     .C.J.x.....CA`..
   11b8c:	0000bdf0 e00343c0 603affff b5f82000     .....C....:`. ..
   11b9c:	20432400 68410600 03bf2701 60414339     .$C ..Ah.'..9CA`
   11bac:	00ba6841 60414311 68054821 430d1c51     Ah...CA`!H.hQ..C
   11bbc:	4e1f6005 47b020c8 6888491f 60884338     .`.N. .G.I.h8C.`
   11bcc:	68f0460e 0fc70400 2001491a 46204788     .F.h.....I. .G F
   11bdc:	1c64491a d8014288 d0f22f00 40054818     .Id..B.../...H.@
   11bec:	60054813 03402001 68f160b0 40014815     .H.`. @..`.h.H.@
   11bfc:	4a146870 43084010 68306070 0289213f     ph.J.@.Cp`0h?!..
   11c0c:	60304388 06092143 2001684a 43820380     .C0`C!..Jh. ...C
   11c1c:	7800480e 0fc007c0 431a0383 684a604a     .H.x.......CJ`Jh
   11c2c:	041b2301 0400439a 604a4302 0000bdf8     .#...C...CJ`....
   11c3c:	3ba15240 00000000 271051c0 fffe0000     @R.;.....Q.'....
   11c4c:	3f3ffffe c0c00000 603affff 47702000     ..??......:`. pG
   11c5c:	b5f00000 2508b083 2000493c 20437008     .......%<I. .pC 
   11c6c:	68410600 431102aa 27296041 067f4938     ..Ah...CA`)'8I..
   11c7c:	684160f9 43914b37 07db781b 43190c9b     .`Ah7K.C.x.....C
   11c8c:	24256041 684101a4 60414311 10526841     A`%$..Ah.CA`AhR.
   11c9c:	60414311 210368f8 43880649 43060356     .CA`.h.!I..CV..C
   11cac:	43060390 200168b8 fe81f7ff 20104621     ...C.h. ....!F. 
   11cbc:	fe83f7ff 43060328 2d002400 60fed90c     ....(..C.$.-...`
   11ccc:	20644925 68f84788 0a004669 55081c80     %Id .G.hiF.....U
   11cdc:	b2e41c64 d3f242ac 79d0466a 18407991     d....B..jF.y.y@.
   11cec:	79127951 18401889 78d1466a 78901841     Qy.y..@.jF.xA..x
   11cfc:	78501809 78101809 46291808 fe63f7ff     ..Px...x..)F..c.
   11d0c:	b2c04912 68397008 02922201 60394311     .I...p9h."...C9`
   11d1c:	1c400040 20006178 fe49f7ff 06092143     @.@.xa. ..I.C!..
   11d2c:	2001684a 43820300 7800480a 0fc007c0     Jh. ...C.H.x....
   11d3c:	431a0303 684a604a 035b2301 0340439a     ...CJ`Jh.#[..C@.
   11d4c:	604a4302 bdf0b003 60700000 34cc2000     .CJ`......p`. .4
   11d5c:	603a0263 3ba12000 b4700000 06092143     c.:`. .;..p.C!..
   11d6c:	24016848 432004a4 20c46048 05d22287     Hh.$.. CH`. ."..
   11d7c:	485c6010 68486150 43a04a5c 07d27812     .`\HPaHh\J.C.x..
   11d8c:	04930fd2 60484318 4b58208b 634305c0     .....CH`. XK..Cc
   11d9c:	25014b58 250660dd 250560cd 688563c5     XK.%.`.%.`.%.c.h
   11dac:	3df0086d 68c56085 355d086d 690560c5     m..=.`.hm.]5.`.i
   11dbc:	6105086d 086d6945 69856145 6185086d     m..aEim.Ea.im..a
   11dcc:	086d69c5 6a0561c5 6205086d 086d6a45     .im..a.jm..bEjm.
   11ddc:	6a856245 6285086d 086d6ac5 250162c5     Eb.jm..b.jm..b.%
   11dec:	625d611d 4b43639d 4d43601d 6a1d615d     .a]b.cCK.`CM]a.j
   11dfc:	621d086d 25016ac3 62c3432b 10a36848     m..b.j.%+C.bHh..
   11e0c:	60484318 109b6848 60484318 4b3b483d     .CH`Hh...CH`=H;K
   11e1c:	68836143 05ad253f 6083432b 60c32300     Ca.h?%..+C.`.#.`
   11e2c:	61834b39 682b4d39 43b3261e 6a83602b     9K.a9M+h.&.C+`.j
   11e3c:	43ab03f5 6283191b 10a36848 04134398     ...C...bHh...C..
   11e4c:	60484318 11236848 03934398 60484318     .CH`Hh#..C...CH`
   11e5c:	11636848 60484318 06402029 09246a04     Hhc..CH`) @..j$.
   11e6c:	34080124 68486204 03534398 60484318     $..4.bHh.CS..CH`
   11e7c:	23016848 4318051b 24286048 05c020a3     Hh.#...CH`($. ..
   11e8c:	4d226004 6285882d 05126848 43104398     .`"M-..bHh...C.C
   11e9c:	481f6048 700121e6 4a1d7204 8310481e     H`.H.!.p.r.J.H..
   11eac:	23e0481e 4c1a7603 706222d4 7262223c     .H.#.v.L."bp<"br
   11ebc:	83624a1b 22c87641 4d1570a2 72ac2446     .Jb.Av.".p.MF$.r
   11ecc:	83ac4c18 46297681 215070ca 72d1462a     .L...v)F.pP!*F.r
   11edc:	83d14915 215a76c3 49137311 77038411     .I...vZ!.s.I...w
   11eec:	4770bc70 7fff0000 603a0000 02492000     p.pG......:`. I.
   11efc:	00400000 00804580 021e4580 00030000     ..@..E...E......
   11f0c:	0000003c 00085240 0000000f 604e51c0     <...@R.......QN`
   11f1c:	67fc2000 07f62000 681c0000 09f62000     . .g. .....h. ..
   11f2c:	2df60000 38f60000 3ff60000 b5f80000     ...-...8...?....
   11f3c:	6800482d d1542800 06122243 21016850     -H.h.(T.C"..Ph.!
   11f4c:	430803c9 4f286050 2501683c 06002003     ...CP`(O<h.%. ..
   11f5c:	60384320 49252600 4788201e 20014924      C8`.&%I. .G$I. 
   11f6c:	68784788 0fc007c0 4a214631 42911c76     .Gxh....1F!Jv..B
   11f7c:	2800d801 481cd0f2 481e6881 20006001     ...(...H.h.H.`. 
   11f8c:	2d002600 4b1cd011 25004632 41aa1acb     .&.-...K2F.%...A
   11f9c:	1c40da14 4f184605 4633434d 1b7d2200     ..@..F.OMC3F."}.
   11fac:	1b4d419a dbf44193 4b14e008 d2054299     .AM..A.....K.B..
   11fbc:	46021c40 1a9a434a d8f9428a 06092101     @..FJC...B...!..
   11fcc:	0049438c 4908430c 2243600c 68510612     .CI..C.I.`C"..Qh
   11fdc:	03db2301 4b0a4399 07db781b 43190c1b     .#...C.K.x.....C
   11fec:	bdf86051 605c0000 00002000 3ba14440     Q`....\`. ..@D.;
   11ffc:	27100000 60600000 20002000 d000bebc     ...'..``. . ....
   1200c:	603a1312 b5702000 47804823 06242443     ..:`. p.#H.GC$$.
   1201c:	68602101 43080489 481f6060 481f4780     .!`h...C``.H.G.H
   1202c:	28aa7800 68a0d106 d1030780 4788491d     .x.(...h.....I.G
   1203c:	6008491d 05c020a1 21026b02 430a438a     .I.`. ...k.!.C.C
   1204c:	21016302 438a6b02 6302430a 26046b01     .c.!.k.C.C.c.k.&
   1205c:	433143b1 4c146301 4d146860 d5040080     .C1C.c.L`h.M....
   1206c:	47a82001 00806860 4c11d4fa 6060200f     . .G`h.....L. ``
   1207c:	47a82001 60602007 47a82004 60602006     . .G. ``. .G. ``
   1208c:	480c218b 600805c9 6901480c 61014331     .!.H...`.H.i1C.a
   1209c:	bd70bf30 37350000 9c390000 602c0000     0.p...57..9...,`
   120ac:	39d12000 60540000 00802000 3ba14580     . .9..T`. ...E.;
   120bc:	00400000 03264580 ed000000 b570e000     ..@..E&.......p.
   120cc:	200f4d2f 248b6068 682005e4 02492101     /M. h`.$.. h.!I.
   120dc:	60204388 4780482b f3802001 48298810     .C `+H.G. ....)H
   120ec:	49296840 d4060080 22086820 60204310     @h)I.... h.".C `
   120fc:	47882001 2001e001 48244788 48244780     . .G... .G$H.G$H
   1210c:	78004925 200d4788 48236068 20434780     %I.x.G. h`#H.GC 
   1211c:	68410600 035b2301 60414319 4a1f2129     ..Ah.#[..CA`)!.J
   1212c:	60ca0649 09126a0a 32080112 680a620a     I..`.j.....2.b.h
   1213c:	432210dc 4a1a600a 00527812 614a1c52     .."C.`.J.xR.R.Ja
   1214c:	49186842 7809439a 0fc907c9 431a034b     Bh.I.C.x....K..C
   1215c:	68436042 431302a2 24286043 05db23a3     B`Ch...CC`($.#..
   1216c:	4c11601c 629c8824 05096843 430b4393     .`.L$..bCh...C.C
   1217c:	20006043 8810f380 4780480d 0040bd70     C`. .....H.Gp.@.
   1218c:	3b854580 00800001 44894580 346d0001     .E.;.....E.D..m4
   1219c:	60400001 3ba12000 4d990000 34cc0001     ..@`. .;...M...4
   121ac:	60700463 603a2000 604e2000 34ad2000     c.p`. :`. N`. .4
   121bc:	00000001                                ....

000121c0 <am_hal_ble_num_default_patches>:
   121c0:	00000003                                ....

000121c4 <am_ble_buffer_patch_data_b0>:
   121c4:	04182200 000003ff 00077584 00077d73     .".......u..s}..
   121d4:	00078575 00078b17 000795a9 00079b18     u...............
   121e4:	0007a32d 0007acc5 0007b2f4 0007b9ff     -...............
	...
   12224:	f7ec2021 2800fcf9 2000d00a 46039000     ! .....(... ...F
   12234:	46014602 20216824 47a03435 bd38bf00     .F.F$h! 54.G..8.
   12244:	fefbf7ef 2800490f 7808d002 d0122801     .....I.(...x.(..
   12254:	28027808 2800d00f 2801d006 f000d004     .x.(...(...(....
   12264:	20006e0c 04000000 20006e1c 47084900     .n. .....n. .I.G
   12274:	20003e01 7cca4e23 6ac96875 d01d2a00     .>. #N.|uh.j.*..
   12284:	0212227d d3024291 20011a8a 1a52e000     }"...B..... ..R.
   12294:	d0052800 43504620 fa02f7ea e0041a20     .(.. FPC.... ...
   122a4:	f9def7ea 02011900 186900c2 18891812     ..........i.....
   122b4:	02530a4a 60711ac9 4348211e bd701880     J.S...q`.!HC..p.
   122c4:	2000682c 20006e0c 47084900 20003e31     ,h. .n. .I.G1>. 
   122d4:	6ac07cc1 d0152900 0209217d d3024288     .|.j.)..}!...B..
   122e4:	2004d502 e0347060 f0066928 2800f8b5     ... `p4.(i.....(
   122f4:	2002d002 e02c7060 f0049803 2804fa1f     ... `p,........(
   12304:	4668d107 20027901 d0054388 28002000     ..hF.y. .C... .(
   12314:	bf00d004 e01c2000 e7f82001 900088f0     ..... ... ......
   12324:	00000021 00000000 00000001 00000000     !...............
   12334:	ffffffff 000003ff 1f3c00ff 00000000     ..........<.....
   12344:	00002001 0000848d 00002002 00007dcd     . ....... ...}..
   12354:	00002003 00007ed1 00002005 000084fd     . ...~... ......
   12364:	30286928 8d013040 1a409800 b280492a     (i(0@0....@.*I..
   12374:	bf00bf00 22054628 30631c71 fdacf7f3     ....(F."q.c0....
   12384:	99006928 fbdff001 70602001 2003e001     (i....... `p... 
   12394:	2f007060 7860d139 d2362806 44790001     `p./9.`x.(6...yD
   123a4:	bf00bf00 22568931 46315351 fe3ef001     ....1.V"QS1F..>.
   123b4:	70602001 2003e001 2f007060 7860d167     . `p... `p./g.`x
   123c4:	d2642806 44790001 18497909 185f448f     .(d...yD.yI..D_.
   123d4:	1207020c 98052128 fc54f7ff 213de057     ....(!....T.W.=!
   123e4:	20006878 20006dac 50800040 00002017     xh. .m. @..P. ..
   123f4:	00000801 5080407e 200068d8 47084900     ....~@.P.h. .I.G
   12404:	20003e91 78c34311 021b7882 0412431a     .>. .C.x.x...C..
   12414:	4c1a430a 79426062 02127901 79c34311     .C.Lb`By.y...C.y
   12424:	d01b2e13 550e21a1 46692202 724e720a     .....!.U."iF.rNr
   12434:	4308210f 46019001 f7fe4638 4669f909     .!.C...F8F....iF
   12444:	b2e87a0a f7ffa902 3440ff55 8aa220ff     .z......U.@4. ..
   12454:	30034639 bf00bf00 bdf0b003 21a12216     9F.0.........".!
   12464:	00808820 30405838 07c07f00 2500d005      ...8X@0.......%
   12474:	8820e02f fd22f008 4668e02b 20017a01     /. ...".+.hF.z. 
   12484:	d0034388 28002000 e001d108 e7fa2001     .C... .(..... ..
   12494:	43882004 2000d004 d0032800 e018253a     . .C... .(..:%..
   124a4:	6b114a08 4b086b52 d9014298 47702000     .J.kRk.K.B... pG
   124b4:	43424341 0c900989 49041808 d9f64288     ACBC.......I.B..
   124c4:	47702000 20007ec0 001e8480 03938700     . pG.~. ........
   124d4:	4913b410 4a136b89 d9024290 2000bc10     ...I.k.J.B..... 
   124e4:	4a114770 6813247d 02242214 42a34342     pG.J}$.h."$.BC.B
   124f4:	4341d903 18100c08 4341e002 1a100c08     ..AC......AC....
   12504:	4288490a 2000d902 4770bc10 d0002800     .I.B... ..pG.(..
   12514:	42a31e40 2800d2f8 bc10d0f6 47701e40     @..B...(....@.pG
   12524:	20007ec0 000186a0 20006858 00030d40     .~. ....Xh. @...
   12534:	f3efb4f0 b2cc8110 f3812101 78428810     .........!....Bx
   12544:	02127801 78c34311 021b7882 0412431a     .x...C.x.x...C..
   12554:	4d1d430a 7942606a 02127901 79c34311     .C.Mj`By.y...C.y
   12564:	021b7982 0412431a 60aa430a 7a017a42     .y...C...C.`Bz.z
   12574:	43110212 7a827ac3 431a021b 430a0412     ...C.z.z...C...C
   12584:	7b4260ea 02127b01 7bc34311 021b7b82     .`B{.{...C.{.{..
   12594:	0412431a 612a430a 23103010 21004a0b     .C...C*a.0.#.J.!
   125a4:	54565c46 b2891c49 d3f94299 6168206e     F\VTI....B..n ha
   125b4:	60282001 21014806 f3847401 bcf08810     . (`.H.!.t......
   125c4:	20104904 00004708 508000c0 5080406e     .I. .G.....Pn@.P
   125d4:	200068d8 000159a1                       .h. .Y..

000125dc <am_hal_ble_num_default_patches_b0>:
   125dc:	00000003                                ....

000125e0 <g_AM_HAL_GPIO_DISABLE>:
   125e0:	00000003                                ....

000125e4 <g_AM_HAL_GPIO_OUTPUT>:
   125e4:	00000403                                ....

000125e8 <g_ui8Bit76Capabilities>:
   125e8:	02800101 80010180 80800101 80808080     ................
   125f8:	80808080 80808008 01800180 80808080     ................
   12608:	80808080 01800402 01010401 80808080     ................
   12618:	00000101                                ....

0001261c <g_ui8Inpen>:
   1261c:	62272323 108703a1 e1005303 55418151     ##'b.....S..Q.AU
   1262c:	4080c405 4140b101 31a03114 1180f100     ...@..@A.1.1....
   1263c:	11c12191 304511e5 31300037 40007100     .!....E07.01.q.@
   1264c:	00003130                                01..

00012650 <g_ui8NCEtable>:
   12650:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
   12660:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
   12670:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
   12680:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
   12690:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
   126a0:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
   126b0:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
   126c0:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
   126d0:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
   126e0:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
   126f0:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
   12700:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
   12710:	32221202 43231303                       .."2..#C

00012718 <g_ui8nCEpins>:
   12718:	02070707 00080802 01020202 01010101     ................
   12728:	01010101 01010101 01010101 01010101     ................
   12738:	01010101 08010101 01010008 01010101     ................
   12748:	00000101                                ....

0001274c <g_am_hal_mcuctrl_flash_size>:
   1274c:	00004000 00008000 00010000 00020000     .@..............
   1275c:	00040000 00080000 00100000 00200000     .............. .
   1276c:	00180000 00000000 00000000 00000000     ................
	...

0001278c <g_am_hal_mcuctrl_sram_size>:
   1278c:	00004000 00008000 00010000 00020000     .@..............
   1279c:	00040000 00080000 00100000 00060000     ................
   127ac:	000c0000 00000000 00000000 00000000     ................
	...

000127cc <am_hal_pwrctrl_peripheral_control>:
	...
   127d8:	00000001 00000004 00000004 00000002     ................
   127e8:	00000008 00000008 00000004 00000008     ................
   127f8:	00000008 00000008 00000008 00000008     ................
   12808:	00000010 00000010 00000010 00000020     ............ ...
   12818:	00000010 00000010 00000040 00000010     ........@.......
   12828:	00000010 00000080 00000004 00000004     ................
   12838:	00000100 00000004 00000004 00000200     ................
   12848:	00000020 00000020 00000400 00000004      ... ...........
   12858:	00000004 00000800 00000040 00000040     ........@...@...
   12868:	00001000 00000080 00000080 00002000     ............. ..
   12878:	00000100 00000100                       ........

00012880 <CSWTCH.20>:
   12880:	016e3600 00b71b00 005b8d80 002dc6c0     .6n.......[...-.
