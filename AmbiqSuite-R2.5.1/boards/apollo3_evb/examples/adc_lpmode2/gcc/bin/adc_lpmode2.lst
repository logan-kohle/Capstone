
bin/adc_lpmode2.axf:     file format elf32-littlearm


Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 10 00 10 7d d3 00 00 e5 d3 00 00 11 c5 00 00     ....}...........
    c010:	e7 d3 00 00 e7 d3 00 00 e7 d3 00 00 00 00 00 00     ................
	...
    c02c:	e9 d3 00 00 e9 d3 00 00 00 00 00 00 e9 d3 00 00     ................
    c03c:	e9 d3 00 00 e9 d3 00 00 e9 d3 00 00 e9 d3 00 00     ................
    c04c:	e9 d3 00 00 e9 d3 00 00 e9 d3 00 00 e9 d3 00 00     ................
    c05c:	e9 d3 00 00 e9 d3 00 00 e9 d3 00 00 e9 d3 00 00     ................
    c06c:	e9 d3 00 00 e9 d3 00 00 e9 d3 00 00 d5 c1 00 00     ................
    c07c:	e9 d3 00 00 e9 d3 00 00 e9 d3 00 00 f5 c1 00 00     ................
    c08c:	e9 d3 00 00 e9 d3 00 00 e9 d3 00 00 e9 d3 00 00     ................
    c09c:	e9 d3 00 00 e9 d3 00 00 e9 d3 00 00 e9 d3 00 00     ................
    c0ac:	e9 d3 00 00 e9 d3 00 00 e9 d3 00 00 e9 d3 00 00     ................
    c0bc:	e9 d3 00 00                                         ....

0000c0c0 <__Patchable>:
	...

0000c100 <__aeabi_d2f>:
    c100:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c104:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c108:	bf24      	itt	cs
    c10a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c10e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c112:	d90d      	bls.n	c130 <__aeabi_d2f+0x30>
    c114:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c118:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c11c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c120:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c124:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c128:	bf08      	it	eq
    c12a:	f020 0001 	biceq.w	r0, r0, #1
    c12e:	4770      	bx	lr
    c130:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c134:	d121      	bne.n	c17a <__aeabi_d2f+0x7a>
    c136:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c13a:	bfbc      	itt	lt
    c13c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c140:	4770      	bxlt	lr
    c142:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c146:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c14a:	f1c2 0218 	rsb	r2, r2, #24
    c14e:	f1c2 0c20 	rsb	ip, r2, #32
    c152:	fa10 f30c 	lsls.w	r3, r0, ip
    c156:	fa20 f002 	lsr.w	r0, r0, r2
    c15a:	bf18      	it	ne
    c15c:	f040 0001 	orrne.w	r0, r0, #1
    c160:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c164:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c168:	fa03 fc0c 	lsl.w	ip, r3, ip
    c16c:	ea40 000c 	orr.w	r0, r0, ip
    c170:	fa23 f302 	lsr.w	r3, r3, r2
    c174:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c178:	e7cc      	b.n	c114 <__aeabi_d2f+0x14>
    c17a:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c17e:	d107      	bne.n	c190 <__aeabi_d2f+0x90>
    c180:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c184:	bf1e      	ittt	ne
    c186:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c18a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c18e:	4770      	bxne	lr
    c190:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c194:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c198:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c19c:	4770      	bx	lr
    c19e:	bf00      	nop

0000c1a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    c1a0:	b082      	sub	sp, #8
    c1a2:	4603      	mov	r3, r0
    c1a4:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) >= 0)
    c1a8:	f99d 3007 	ldrsb.w	r3, [sp, #7]
    c1ac:	2b00      	cmp	r3, #0
    c1ae:	db0c      	blt.n	c1ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c1b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c1b4:	f003 021f 	and.w	r2, r3, #31
    c1b8:	4905      	ldr	r1, [pc, #20]	; (c1d0 <__NVIC_EnableIRQ+0x30>)
    c1ba:	f99d 3007 	ldrsb.w	r3, [sp, #7]
    c1be:	095b      	lsrs	r3, r3, #5
    c1c0:	2001      	movs	r0, #1
    c1c2:	fa00 f202 	lsl.w	r2, r0, r2
    c1c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
    c1ca:	bf00      	nop
    c1cc:	b002      	add	sp, #8
    c1ce:	4770      	bx	lr
    c1d0:	e000e100 	.word	0xe000e100

0000c1d4 <am_ctimer_isr>:
// Interrupt handler for the CTIMER
//
//*****************************************************************************
void
am_ctimer_isr(void)
{
    c1d4:	b508      	push	{r3, lr}
  //
  // Clear TimerA0 Interrupt.
  //
  am_hal_ctimer_int_clear(AM_HAL_CTIMER_INT_TIMERA0);
    c1d6:	2001      	movs	r0, #1
    c1d8:	f001 fe94 	bl	df04 <am_hal_ctimer_int_clear>
  //
  // Re-configure the ADC. We lose configuration data in the power-down, so
  // we'll reconfigure the ADC here. If you don't shut down the ADC, this
  // step is unnecessary.
  //
  adc_config();
    c1dc:	f000 f860 	bl	c2a0 <adc_config>

  //
  // Trigger the ADC
  //
  am_hal_adc_sw_trigger(g_ADCHandle);
    c1e0:	4b03      	ldr	r3, [pc, #12]	; (c1f0 <am_ctimer_isr+0x1c>)
    c1e2:	681b      	ldr	r3, [r3, #0]
    c1e4:	4618      	mov	r0, r3
    c1e6:	f001 fac5 	bl	d774 <am_hal_adc_sw_trigger>
}
    c1ea:	bf00      	nop
    c1ec:	bd08      	pop	{r3, pc}
    c1ee:	bf00      	nop
    c1f0:	10001044 	.word	0x10001044

0000c1f4 <am_adc_isr>:
// Interrupt handler for the ADC.
//
//*****************************************************************************
void
am_adc_isr(void)
{
    c1f4:	b500      	push	{lr}
    c1f6:	b087      	sub	sp, #28
  am_hal_adc_sample_t Sample;

  //
  // Read the interrupt status.
  //
  if (AM_HAL_STATUS_SUCCESS != am_hal_adc_interrupt_status(g_ADCHandle, &ui32IntMask, false))
    c1f8:	4b20      	ldr	r3, [pc, #128]	; (c27c <am_adc_isr+0x88>)
    c1fa:	681b      	ldr	r3, [r3, #0]
    c1fc:	a905      	add	r1, sp, #20
    c1fe:	2200      	movs	r2, #0
    c200:	4618      	mov	r0, r3
    c202:	f001 fa25 	bl	d650 <am_hal_adc_interrupt_status>
    c206:	4603      	mov	r3, r0
    c208:	2b00      	cmp	r3, #0
    c20a:	d002      	beq.n	c212 <am_adc_isr+0x1e>
  {
    am_util_stdio_printf("Error reading ADC interrupt status\n");
    c20c:	481c      	ldr	r0, [pc, #112]	; (c280 <am_adc_isr+0x8c>)
    c20e:	f001 f88d 	bl	d32c <am_util_stdio_printf>
  }

  //
  // Clear the ADC interrupt.
  //
  if (AM_HAL_STATUS_SUCCESS != am_hal_adc_interrupt_clear(g_ADCHandle, ui32IntMask))
    c212:	4b1a      	ldr	r3, [pc, #104]	; (c27c <am_adc_isr+0x88>)
    c214:	681b      	ldr	r3, [r3, #0]
    c216:	9a05      	ldr	r2, [sp, #20]
    c218:	4611      	mov	r1, r2
    c21a:	4618      	mov	r0, r3
    c21c:	f001 fa3c 	bl	d698 <am_hal_adc_interrupt_clear>
    c220:	4603      	mov	r3, r0
    c222:	2b00      	cmp	r3, #0
    c224:	d002      	beq.n	c22c <am_adc_isr+0x38>
  {
    am_util_stdio_printf("Error clearing ADC interrupt status\n");
    c226:	4817      	ldr	r0, [pc, #92]	; (c284 <am_adc_isr+0x90>)
    c228:	f001 f880 	bl	d32c <am_util_stdio_printf>
  }
  //
  // If we got a conversion completion interrupt (which should be our only
  // ADC interrupt), go ahead and read the data.
  //
  if (ui32IntMask & AM_HAL_ADC_INT_CNVCMP)
    c22c:	9b05      	ldr	r3, [sp, #20]
    c22e:	f003 0301 	and.w	r3, r3, #1
    c232:	2b00      	cmp	r3, #0
    c234:	d01b      	beq.n	c26e <am_adc_isr+0x7a>
  {
    uint32_t    ui32NumSamples = 1;
    c236:	2301      	movs	r3, #1
    c238:	9302      	str	r3, [sp, #8]
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_samples_read(g_ADCHandle, false,
    c23a:	4b10      	ldr	r3, [pc, #64]	; (c27c <am_adc_isr+0x88>)
    c23c:	6818      	ldr	r0, [r3, #0]
    c23e:	aa02      	add	r2, sp, #8
    c240:	ab03      	add	r3, sp, #12
    c242:	9300      	str	r3, [sp, #0]
    c244:	4613      	mov	r3, r2
    c246:	2200      	movs	r2, #0
    c248:	2100      	movs	r1, #0
    c24a:	f001 fa35 	bl	d6b8 <am_hal_adc_samples_read>
    c24e:	4603      	mov	r3, r0
    c250:	2b00      	cmp	r3, #0
    c252:	d002      	beq.n	c25a <am_adc_isr+0x66>
                                                         NULL,
                                                         &ui32NumSamples,
                                                         &Sample))
    {
      am_util_stdio_printf("Error - ADC sample read from FIFO failed.\n");
    c254:	480c      	ldr	r0, [pc, #48]	; (c288 <am_adc_isr+0x94>)
    c256:	f001 f869 	bl	d32c <am_util_stdio_printf>
    }

#if (1 == ADC_EXAMPLE_DEBUG)
    am_util_stdio_printf("ADC Slot =  %d\n", Sample.ui32Slot);
    c25a:	9b04      	ldr	r3, [sp, #16]
    c25c:	4619      	mov	r1, r3
    c25e:	480b      	ldr	r0, [pc, #44]	; (c28c <am_adc_isr+0x98>)
    c260:	f001 f864 	bl	d32c <am_util_stdio_printf>
    am_util_stdio_printf("ADC Value = %8.8X\n", Sample.ui32Sample);
    c264:	9b03      	ldr	r3, [sp, #12]
    c266:	4619      	mov	r1, r3
    c268:	4809      	ldr	r0, [pc, #36]	; (c290 <am_adc_isr+0x9c>)
    c26a:	f001 f85f 	bl	d32c <am_util_stdio_printf>
#endif
  }

  adc_deconfig();
    c26e:	f000 f88f 	bl	c390 <adc_deconfig>

}
    c272:	bf00      	nop
    c274:	b007      	add	sp, #28
    c276:	f85d fb04 	ldr.w	pc, [sp], #4
    c27a:	bf00      	nop
    c27c:	10001044 	.word	0x10001044
    c280:	0000e928 	.word	0x0000e928
    c284:	0000e94c 	.word	0x0000e94c
    c288:	0000e974 	.word	0x0000e974
    c28c:	0000e9a0 	.word	0x0000e9a0
    c290:	0000e9b0 	.word	0x0000e9b0

0000c294 <sleep>:
// Set up the core for sleeping, and then go to sleep.
//
//*****************************************************************************
void
sleep(void)
{
    c294:	b508      	push	{r3, lr}
#endif

  //
  // Go to Deep Sleep.
  //
  am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
    c296:	2001      	movs	r0, #1
    c298:	f002 fa38 	bl	e70c <am_hal_sysctrl_sleep>
  // Re-enable peripherals for run mode.
  //
#if (0 == ADC_EXAMPLE_DEBUG)
  am_bsp_debug_printf_enable();
#endif
}
    c29c:	bf00      	nop
    c29e:	bd08      	pop	{r3, pc}

0000c2a0 <adc_config>:
// Configure the ADC.
//
//*****************************************************************************
void
adc_config(void)
{
    c2a0:	b500      	push	{lr}
    c2a2:	b085      	sub	sp, #20
  am_hal_adc_slot_config_t      ADCSlotConfig;

  //
  // Initialize the ADC and get the handle.
  //
  if ( AM_HAL_STATUS_SUCCESS != am_hal_adc_initialize(0, &g_ADCHandle) )
    c2a4:	4934      	ldr	r1, [pc, #208]	; (c378 <adc_config+0xd8>)
    c2a6:	2000      	movs	r0, #0
    c2a8:	f001 f8a0 	bl	d3ec <am_hal_adc_initialize>
    c2ac:	4603      	mov	r3, r0
    c2ae:	2b00      	cmp	r3, #0
    c2b0:	d002      	beq.n	c2b8 <adc_config+0x18>
  {
    am_util_stdio_printf("Error - reservation of the ADC instance failed.\n");
    c2b2:	4832      	ldr	r0, [pc, #200]	; (c37c <adc_config+0xdc>)
    c2b4:	f001 f83a 	bl	d32c <am_util_stdio_printf>
  }

  //
  // Power on the ADC.
  //
  if (AM_HAL_STATUS_SUCCESS != am_hal_adc_power_control(g_ADCHandle,
    c2b8:	4b2f      	ldr	r3, [pc, #188]	; (c378 <adc_config+0xd8>)
    c2ba:	681b      	ldr	r3, [r3, #0]
    c2bc:	2200      	movs	r2, #0
    c2be:	2100      	movs	r1, #0
    c2c0:	4618      	mov	r0, r3
    c2c2:	f001 fa69 	bl	d798 <am_hal_adc_power_control>
    c2c6:	4603      	mov	r3, r0
    c2c8:	2b00      	cmp	r3, #0
    c2ca:	d002      	beq.n	c2d2 <adc_config+0x32>
                                                        AM_HAL_SYSCTRL_WAKE,
                                                        false) )
  {
    am_util_stdio_printf("Error - ADC power on failed.\n");
    c2cc:	482c      	ldr	r0, [pc, #176]	; (c380 <adc_config+0xe0>)
    c2ce:	f001 f82d 	bl	d32c <am_util_stdio_printf>

  //
  // Set up the ADC configuration parameters. These settings are reasonable
  // for accurate measurements at a low sample rate.
  //
  ADCConfig.eClock             = AM_HAL_ADC_CLKSEL_HFRC;
    c2d2:	2301      	movs	r3, #1
    c2d4:	f88d 3008 	strb.w	r3, [sp, #8]
  ADCConfig.ePolarity          = AM_HAL_ADC_TRIGPOL_RISING;
    c2d8:	2300      	movs	r3, #0
    c2da:	f88d 3009 	strb.w	r3, [sp, #9]
  ADCConfig.eTrigger           = AM_HAL_ADC_TRIGSEL_SOFTWARE;
    c2de:	2307      	movs	r3, #7
    c2e0:	f88d 300a 	strb.w	r3, [sp, #10]
  ADCConfig.eReference         = AM_HAL_ADC_REFSEL_INT_2P0;
    c2e4:	2300      	movs	r3, #0
    c2e6:	f88d 300b 	strb.w	r3, [sp, #11]
  ADCConfig.eClockMode         = AM_HAL_ADC_CLKMODE_LOW_POWER;
    c2ea:	2300      	movs	r3, #0
    c2ec:	f88d 300c 	strb.w	r3, [sp, #12]
  ADCConfig.ePowerMode         = AM_HAL_ADC_LPMODE0;
    c2f0:	2300      	movs	r3, #0
    c2f2:	f88d 300d 	strb.w	r3, [sp, #13]
  ADCConfig.eRepeat            = AM_HAL_ADC_REPEATING_SCAN;
    c2f6:	2301      	movs	r3, #1
    c2f8:	f88d 300e 	strb.w	r3, [sp, #14]
  if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure(g_ADCHandle, &ADCConfig))
    c2fc:	4b1e      	ldr	r3, [pc, #120]	; (c378 <adc_config+0xd8>)
    c2fe:	681b      	ldr	r3, [r3, #0]
    c300:	aa02      	add	r2, sp, #8
    c302:	4611      	mov	r1, r2
    c304:	4618      	mov	r0, r3
    c306:	f001 f8e3 	bl	d4d0 <am_hal_adc_configure>
    c30a:	4603      	mov	r3, r0
    c30c:	2b00      	cmp	r3, #0
    c30e:	d002      	beq.n	c316 <adc_config+0x76>
  {
    am_util_stdio_printf("Error - configuring ADC failed.\n");
    c310:	481c      	ldr	r0, [pc, #112]	; (c384 <adc_config+0xe4>)
    c312:	f001 f80b 	bl	d32c <am_util_stdio_printf>
  }

  //
  // Set up an ADC slot
  //
  ADCSlotConfig.eMeasToAvg      = AM_HAL_ADC_SLOT_AVG_1;
    c316:	2300      	movs	r3, #0
    c318:	f88d 3000 	strb.w	r3, [sp]
  ADCSlotConfig.ePrecisionMode  = AM_HAL_ADC_SLOT_14BIT;
    c31c:	2300      	movs	r3, #0
    c31e:	f88d 3001 	strb.w	r3, [sp, #1]
  ADCSlotConfig.eChannel        = AM_HAL_ADC_SLOT_CHSEL_SE0;
    c322:	2300      	movs	r3, #0
    c324:	f88d 3002 	strb.w	r3, [sp, #2]
  ADCSlotConfig.bWindowCompare  = false;
    c328:	2300      	movs	r3, #0
    c32a:	f88d 3003 	strb.w	r3, [sp, #3]
  ADCSlotConfig.bEnabled        = true;
    c32e:	2301      	movs	r3, #1
    c330:	f88d 3004 	strb.w	r3, [sp, #4]
  if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure_slot(g_ADCHandle, 0, &ADCSlotConfig))
    c334:	4b10      	ldr	r3, [pc, #64]	; (c378 <adc_config+0xd8>)
    c336:	681b      	ldr	r3, [r3, #0]
    c338:	466a      	mov	r2, sp
    c33a:	2100      	movs	r1, #0
    c33c:	4618      	mov	r0, r3
    c33e:	f001 f903 	bl	d548 <am_hal_adc_configure_slot>
    c342:	4603      	mov	r3, r0
    c344:	2b00      	cmp	r3, #0
    c346:	d002      	beq.n	c34e <adc_config+0xae>
  {
    am_util_stdio_printf("Error - configuring ADC Slot 0 failed.\n");
    c348:	480f      	ldr	r0, [pc, #60]	; (c388 <adc_config+0xe8>)
    c34a:	f000 ffef 	bl	d32c <am_util_stdio_printf>

  //
  // For this example, the samples will be coming in slowly. This means we
  // can afford to wake up for every conversion.
  //
  am_hal_adc_interrupt_enable(g_ADCHandle, AM_HAL_ADC_INT_CNVCMP );
    c34e:	4b0a      	ldr	r3, [pc, #40]	; (c378 <adc_config+0xd8>)
    c350:	681b      	ldr	r3, [r3, #0]
    c352:	2101      	movs	r1, #1
    c354:	4618      	mov	r0, r3
    c356:	f001 f967 	bl	d628 <am_hal_adc_interrupt_enable>

  //
  // Enable the ADC.
  //
  if (AM_HAL_STATUS_SUCCESS != am_hal_adc_enable(g_ADCHandle))
    c35a:	4b07      	ldr	r3, [pc, #28]	; (c378 <adc_config+0xd8>)
    c35c:	681b      	ldr	r3, [r3, #0]
    c35e:	4618      	mov	r0, r3
    c360:	f001 f92c 	bl	d5bc <am_hal_adc_enable>
    c364:	4603      	mov	r3, r0
    c366:	2b00      	cmp	r3, #0
    c368:	d002      	beq.n	c370 <adc_config+0xd0>
  {
    am_util_stdio_printf("Error - enabling ADC failed.\n");
    c36a:	4808      	ldr	r0, [pc, #32]	; (c38c <adc_config+0xec>)
    c36c:	f000 ffde 	bl	d32c <am_util_stdio_printf>
  }
}
    c370:	bf00      	nop
    c372:	b005      	add	sp, #20
    c374:	f85d fb04 	ldr.w	pc, [sp], #4
    c378:	10001044 	.word	0x10001044
    c37c:	0000e9c4 	.word	0x0000e9c4
    c380:	0000e9f8 	.word	0x0000e9f8
    c384:	0000ea18 	.word	0x0000ea18
    c388:	0000ea3c 	.word	0x0000ea3c
    c38c:	0000ea64 	.word	0x0000ea64

0000c390 <adc_deconfig>:
// Configure the ADC.
//
//*****************************************************************************
void
adc_deconfig(void)
{
    c390:	b508      	push	{r3, lr}
  //
  // Disable the ADC.
  //
  if (AM_HAL_STATUS_SUCCESS != am_hal_adc_disable(g_ADCHandle))
    c392:	4b10      	ldr	r3, [pc, #64]	; (c3d4 <adc_deconfig+0x44>)
    c394:	681b      	ldr	r3, [r3, #0]
    c396:	4618      	mov	r0, r3
    c398:	f001 f92e 	bl	d5f8 <am_hal_adc_disable>
    c39c:	4603      	mov	r3, r0
    c39e:	2b00      	cmp	r3, #0
    c3a0:	d002      	beq.n	c3a8 <adc_deconfig+0x18>
  {
    am_util_stdio_printf("Error - disable ADC failed.\n");
    c3a2:	480d      	ldr	r0, [pc, #52]	; (c3d8 <adc_deconfig+0x48>)
    c3a4:	f000 ffc2 	bl	d32c <am_util_stdio_printf>
  }

  //
  // Enable the ADC power domain.
  //
  if (AM_HAL_STATUS_SUCCESS != am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_ADC))
    c3a8:	200a      	movs	r0, #10
    c3aa:	f002 f859 	bl	e460 <am_hal_pwrctrl_periph_disable>
    c3ae:	4603      	mov	r3, r0
    c3b0:	2b00      	cmp	r3, #0
    c3b2:	d002      	beq.n	c3ba <adc_deconfig+0x2a>
  {
    am_util_stdio_printf("Error - disabling the ADC power domain failed.\n");
    c3b4:	4809      	ldr	r0, [pc, #36]	; (c3dc <adc_deconfig+0x4c>)
    c3b6:	f000 ffb9 	bl	d32c <am_util_stdio_printf>
  }

  //
  // Initialize the ADC and get the handle.
  //
  if (AM_HAL_STATUS_SUCCESS != am_hal_adc_deinitialize(g_ADCHandle))
    c3ba:	4b06      	ldr	r3, [pc, #24]	; (c3d4 <adc_deconfig+0x44>)
    c3bc:	681b      	ldr	r3, [r3, #0]
    c3be:	4618      	mov	r0, r3
    c3c0:	f001 f866 	bl	d490 <am_hal_adc_deinitialize>
    c3c4:	4603      	mov	r3, r0
    c3c6:	2b00      	cmp	r3, #0
    c3c8:	d002      	beq.n	c3d0 <adc_deconfig+0x40>
  {
    am_util_stdio_printf("Error - return of the ADC instance failed.\n");
    c3ca:	4805      	ldr	r0, [pc, #20]	; (c3e0 <adc_deconfig+0x50>)
    c3cc:	f000 ffae 	bl	d32c <am_util_stdio_printf>
  }

}
    c3d0:	bf00      	nop
    c3d2:	bd08      	pop	{r3, pc}
    c3d4:	10001044 	.word	0x10001044
    c3d8:	0000ea84 	.word	0x0000ea84
    c3dc:	0000eaa4 	.word	0x0000eaa4
    c3e0:	0000ead4 	.word	0x0000ead4

0000c3e4 <init_timerA1_for_ADC>:
// Start sampling
//
//*****************************************************************************
void
init_timerA1_for_ADC(void)
{
    c3e4:	b508      	push	{r3, lr}
  // Start a timer to trigger the ADC periodically. This timer won't actually
  // be connected to the ADC (as can be done with Timer 3). Instead, we'll
  // generate interrupts to the CPU, and then use the CPU to trigger the ADC
  // in the CTIMER interrupt handler.
  //
  am_hal_ctimer_config_single(0, AM_HAL_CTIMER_TIMERA,
    c3e6:	f44f 7215 	mov.w	r2, #596	; 0x254
    c3ea:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c3ee:	2000      	movs	r0, #0
    c3f0:	f001 fc9e 	bl	dd30 <am_hal_ctimer_config_single>
                              AM_HAL_CTIMER_LFRC_512HZ |
                                AM_HAL_CTIMER_FN_REPEAT |
                                  AM_HAL_CTIMER_INT_ENABLE);

  am_hal_ctimer_int_enable(AM_HAL_CTIMER_INT_TIMERA0);
    c3f4:	2001      	movs	r0, #1
    c3f6:	f001 fd71 	bl	dedc <am_hal_ctimer_int_enable>

  am_hal_ctimer_period_set(0, AM_HAL_CTIMER_TIMERA, 511, 0);
    c3fa:	2300      	movs	r3, #0
    c3fc:	f240 12ff 	movw	r2, #511	; 0x1ff
    c400:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c404:	2000      	movs	r0, #0
    c406:	f001 fd0f 	bl	de28 <am_hal_ctimer_period_set>


  //
  // Start the timer.
  //
  am_hal_ctimer_start(0, AM_HAL_CTIMER_TIMERA);
    c40a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c40e:	2000      	movs	r0, #0
    c410:	f001 fcdc 	bl	ddcc <am_hal_ctimer_start>
}
    c414:	bf00      	nop
    c416:	bd08      	pop	{r3, pc}

0000c418 <main>:
// Main function.
//
//*****************************************************************************
int
main(void)
{
    c418:	b508      	push	{r3, lr}
  //
  // Set the clock frequency.
  //
  if (AM_HAL_STATUS_SUCCESS != am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0))
    c41a:	2100      	movs	r1, #0
    c41c:	2000      	movs	r0, #0
    c41e:	f001 fbcd 	bl	dbbc <am_hal_clkgen_control>
    c422:	4603      	mov	r3, r0
    c424:	2b00      	cmp	r3, #0
    c426:	d002      	beq.n	c42e <main+0x16>
  {
    am_util_stdio_printf("Error - configuring the system clock failed.\n");
    c428:	4823      	ldr	r0, [pc, #140]	; (c4b8 <main+0xa0>)
    c42a:	f000 ff7f 	bl	d32c <am_util_stdio_printf>


  //
  // Set the default cache configuration and enable it.
  //
  if (AM_HAL_STATUS_SUCCESS != am_hal_cachectrl_config(&am_hal_cachectrl_defaults))
    c42e:	4823      	ldr	r0, [pc, #140]	; (c4bc <main+0xa4>)
    c430:	f001 fa1c 	bl	d86c <am_hal_cachectrl_config>
    c434:	4603      	mov	r3, r0
    c436:	2b00      	cmp	r3, #0
    c438:	d002      	beq.n	c440 <main+0x28>
  {
    am_util_stdio_printf("Error - configuring the system cache failed.\n");
    c43a:	4821      	ldr	r0, [pc, #132]	; (c4c0 <main+0xa8>)
    c43c:	f000 ff76 	bl	d32c <am_util_stdio_printf>
  }
  if (AM_HAL_STATUS_SUCCESS != am_hal_cachectrl_enable())
    c440:	f001 fa38 	bl	d8b4 <am_hal_cachectrl_enable>
    c444:	4603      	mov	r3, r0
    c446:	2b00      	cmp	r3, #0
    c448:	d002      	beq.n	c450 <main+0x38>
  {
    am_util_stdio_printf("Error - enabling the system cache failed.\n");
    c44a:	481e      	ldr	r0, [pc, #120]	; (c4c4 <main+0xac>)
    c44c:	f000 ff6e 	bl	d32c <am_util_stdio_printf>
  }

  //
  // Configure the board for low power operation.
  //
  am_bsp_low_power_init();
    c450:	f002 f994 	bl	e77c <am_bsp_low_power_init>

  //
  // Enable only the first 512KB bank of Flash (0).  Disable Flash(1)
  //
  if (AM_HAL_STATUS_SUCCESS != am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEM_FLASH_MIN))
    c454:	200e      	movs	r0, #14
    c456:	f002 f82f 	bl	e4b8 <am_hal_pwrctrl_memory_enable>
    c45a:	4603      	mov	r3, r0
    c45c:	2b00      	cmp	r3, #0
    c45e:	d002      	beq.n	c466 <main+0x4e>
  {
    am_util_stdio_printf("Error - configuring the flash memory failed.\n");
    c460:	4819      	ldr	r0, [pc, #100]	; (c4c8 <main+0xb0>)
    c462:	f000 ff63 	bl	d32c <am_util_stdio_printf>

#if defined(AM_PART_APOLLO3)
    //
    // Enable the first 32K of TCM SRAM.
    //
    if (AM_HAL_STATUS_SUCCESS != am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEM_SRAM_32K_DTCM))
    c466:	2002      	movs	r0, #2
    c468:	f002 f826 	bl	e4b8 <am_hal_pwrctrl_memory_enable>
    c46c:	4603      	mov	r3, r0
    c46e:	2b00      	cmp	r3, #0
    c470:	d002      	beq.n	c478 <main+0x60>
    {
        am_util_stdio_printf("Error - configuring the SRAM failed.\n");
    c472:	4816      	ldr	r0, [pc, #88]	; (c4cc <main+0xb4>)
    c474:	f000 ff5a 	bl	d32c <am_util_stdio_printf>
#endif

  //
  // Start the ITM interface.
  //
  am_bsp_itm_printf_enable();
    c478:	f002 f9a0 	bl	e7bc <am_bsp_itm_printf_enable>

  //
  // Set a pin to act as our ADC input
  //
  am_hal_gpio_pinconfig(16, g_AM_PIN_16_ADCSE0);
    c47c:	4b14      	ldr	r3, [pc, #80]	; (c4d0 <main+0xb8>)
    c47e:	6819      	ldr	r1, [r3, #0]
    c480:	2010      	movs	r0, #16
    c482:	f001 fda1 	bl	dfc8 <am_hal_gpio_pinconfig>

  //
  // Start the timer-based ADC measurements.
  //
  init_timerA1_for_ADC();
    c486:	f7ff ffad 	bl	c3e4 <init_timerA1_for_ADC>

  //
  // Print the banner.
  //
  am_util_stdio_terminal_clear();
    c48a:	f000 ff6f 	bl	d36c <am_util_stdio_terminal_clear>
  am_util_stdio_printf("ADC Example at 1Hz with ADC disabled between samples\n");
    c48e:	4811      	ldr	r0, [pc, #68]	; (c4d4 <main+0xbc>)
    c490:	f000 ff4c 	bl	d32c <am_util_stdio_printf>

  //
  // Allow time for all printing to finish.
  //
  am_util_delay_ms(10);
    c494:	200a      	movs	r0, #10
    c496:	f000 f81f 	bl	c4d8 <am_util_delay_ms>

  //
  // Enable interrupts.
  //
  NVIC_EnableIRQ(ADC_IRQn);
    c49a:	2012      	movs	r0, #18
    c49c:	f7ff fe80 	bl	c1a0 <__NVIC_EnableIRQ>
  NVIC_EnableIRQ(CTIMER_IRQn);
    c4a0:	200e      	movs	r0, #14
    c4a2:	f7ff fe7d 	bl	c1a0 <__NVIC_EnableIRQ>
  am_hal_interrupt_master_enable();
    c4a6:	f001 ff09 	bl	e2bc <am_hal_interrupt_master_enable>
  while(1)
  {
    //
    // Disable interrupts
    //
    am_hal_interrupt_master_disable();
    c4aa:	f001 ff0b 	bl	e2c4 <am_hal_interrupt_master_disable>

    //
    // Put the core to sleep.
    //
    sleep();
    c4ae:	f7ff fef1 	bl	c294 <sleep>

    //
    // Enable interrupts.
    //
    am_hal_interrupt_master_enable();
    c4b2:	f001 ff03 	bl	e2bc <am_hal_interrupt_master_enable>
    am_hal_interrupt_master_disable();
    c4b6:	e7f8      	b.n	c4aa <main+0x92>
    c4b8:	0000eb00 	.word	0x0000eb00
    c4bc:	0000ec34 	.word	0x0000ec34
    c4c0:	0000eb30 	.word	0x0000eb30
    c4c4:	0000eb60 	.word	0x0000eb60
    c4c8:	0000eb8c 	.word	0x0000eb8c
    c4cc:	0000ebbc 	.word	0x0000ebbc
    c4d0:	0000ec30 	.word	0x0000ec30
    c4d4:	0000ebe4 	.word	0x0000ebe4

0000c4d8 <am_util_delay_ms>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
    c4d8:	b500      	push	{lr}
    c4da:	b089      	sub	sp, #36	; 0x24
    c4dc:	9001      	str	r0, [sp, #4]
    am_hal_delay_us( ui32MilliSeconds * 1000);
#else // AM_PART_APOLLO4
    uint32_t ui32Loops, ui32HFRC;
#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
    c4de:	ab03      	add	r3, sp, #12
    c4e0:	4618      	mov	r0, r3
    c4e2:	f001 fc07 	bl	dcf4 <am_hal_clkgen_status_get>
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
    c4e6:	9b03      	ldr	r3, [sp, #12]
    c4e8:	9307      	str	r3, [sp, #28]
#else // AM_APOLLO3_CLKGEN
    ui32HFRC = am_hal_clkgen_sysclk_get();
#endif // AM_APOLLO3_CLKGEN
    ui32Loops = ui32MilliSeconds * (ui32HFRC / 3000);
    c4ea:	9b07      	ldr	r3, [sp, #28]
    c4ec:	4a07      	ldr	r2, [pc, #28]	; (c50c <am_util_delay_ms+0x34>)
    c4ee:	fba2 2303 	umull	r2, r3, r2, r3
    c4f2:	099a      	lsrs	r2, r3, #6
    c4f4:	9b01      	ldr	r3, [sp, #4]
    c4f6:	fb02 f303 	mul.w	r3, r2, r3
    c4fa:	9306      	str	r3, [sp, #24]

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
    c4fc:	9806      	ldr	r0, [sp, #24]
    c4fe:	f001 fd13 	bl	df28 <am_hal_flash_delay>
#endif // AM_PART_APOLLO4
}
    c502:	bf00      	nop
    c504:	b009      	add	sp, #36	; 0x24
    c506:	f85d fb04 	ldr.w	pc, [sp], #4
    c50a:	bf00      	nop
    c50c:	057619f1 	.word	0x057619f1

0000c510 <HardFault_Handler>:
HardFault_Handler(void)
#else // AM_CMSIS_REGS
am_fault_isr(void)
#endif // AM_CMSIS_REGS
{
    __asm("    push    {r0,lr}");       // Always pushes to MSP stack
    c510:	b501      	push	{r0, lr}
    __asm("    tst     lr, #4");        // Check if we should use MSP or PSP
    c512:	f01e 0f04 	tst.w	lr, #4
    __asm("    itet    eq");            // Instrs executed when: eq,ne,eq
    c516:	bf0a      	itet	eq
    __asm("    mrseq   r0, msp");       //    bit2=0 indicating MSP stack
    c518:	f3ef 8008 	mrseq	r0, MSP
    __asm("    mrsne   r0, psp");       // e: bit2=1 indicating PSP stack
    c51c:	f3ef 8009 	mrsne	r0, PSP
    __asm("    addseq  r0, r0, #8");    // t: bit2=0, adjust for pushes to MSP stack
    c520:	f110 0008 	addseq.w	r0, r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
    c524:	f000 f80a 	bl	c53c <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");       // Restore from MSP stack
    c528:	bd01      	pop	{r0, pc}
}
    c52a:	bf00      	nop
    c52c:	4618      	mov	r0, r3

0000c52e <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
    c52e:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
    c530:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
    c532:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
    c534:	4770      	bx	lr
}
    c536:	bf00      	nop
    c538:	4618      	mov	r0, r3
	...

0000c53c <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    c53c:	b500      	push	{lr}
    c53e:	b097      	sub	sp, #92	; 0x5c
    c540:	9001      	str	r0, [sp, #4]
    volatile am_fault_t sFaultData;
#if (defined(AM_PART_APOLLO4) || defined(AM_PART_APOLLO4B))
    am_hal_fault_status_t  sHalFaultData = {0};
#else
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    c542:	ab03      	add	r3, sp, #12
    c544:	2200      	movs	r2, #0
    c546:	601a      	str	r2, [r3, #0]
    c548:	605a      	str	r2, [r3, #4]
    c54a:	609a      	str	r2, [r3, #8]
    c54c:	60da      	str	r2, [r3, #12]
    c54e:	611a      	str	r2, [r3, #16]
    c550:	615a      	str	r2, [r3, #20]
#endif // if defined(AM_PART_APOLLO4)

    uint32_t u32Mask = 0;
    c552:	2300      	movs	r3, #0
    c554:	9315      	str	r3, [sp, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    c556:	9b15      	ldr	r3, [sp, #84]	; 0x54
    c558:	9313      	str	r3, [sp, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    c55a:	4b2e      	ldr	r3, [pc, #184]	; (c614 <am_util_faultisr_collect_data+0xd8>)
    c55c:	681b      	ldr	r3, [r3, #0]
    c55e:	9313      	str	r3, [sp, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    c560:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    c562:	b2db      	uxtb	r3, r3
    c564:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    c568:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    c56a:	0a1b      	lsrs	r3, r3, #8
    c56c:	b2db      	uxtb	r3, r3
    c56e:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    c572:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    c574:	0c1b      	lsrs	r3, r3, #16
    c576:	b29b      	uxth	r3, r3
    c578:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    c57c:	4b26      	ldr	r3, [pc, #152]	; (c618 <am_util_faultisr_collect_data+0xdc>)
    c57e:	681b      	ldr	r3, [r3, #0]
    c580:	9312      	str	r3, [sp, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c582:	f89d 3051 	ldrb.w	r3, [sp, #81]	; 0x51
    c586:	b2db      	uxtb	r3, r3
    c588:	f003 0302 	and.w	r3, r3, #2
    c58c:	2b00      	cmp	r3, #0
    c58e:	d005      	beq.n	c59c <am_util_faultisr_collect_data+0x60>
    c590:	9901      	ldr	r1, [sp, #4]
    c592:	2006      	movs	r0, #6
    c594:	f7ff ffcb 	bl	c52e <getStackedReg>
    c598:	4603      	mov	r3, r0
    c59a:	e001      	b.n	c5a0 <am_util_faultisr_collect_data+0x64>
    c59c:	f04f 33ff 	mov.w	r3, #4294967295
    c5a0:	9311      	str	r3, [sp, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c5a2:	9901      	ldr	r1, [sp, #4]
    c5a4:	2000      	movs	r0, #0
    c5a6:	f7ff ffc2 	bl	c52e <getStackedReg>
    c5aa:	4603      	mov	r3, r0
    c5ac:	9309      	str	r3, [sp, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c5ae:	9901      	ldr	r1, [sp, #4]
    c5b0:	2001      	movs	r0, #1
    c5b2:	f7ff ffbc 	bl	c52e <getStackedReg>
    c5b6:	4603      	mov	r3, r0
    c5b8:	930a      	str	r3, [sp, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c5ba:	9901      	ldr	r1, [sp, #4]
    c5bc:	2002      	movs	r0, #2
    c5be:	f7ff ffb6 	bl	c52e <getStackedReg>
    c5c2:	4603      	mov	r3, r0
    c5c4:	930b      	str	r3, [sp, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c5c6:	9901      	ldr	r1, [sp, #4]
    c5c8:	2003      	movs	r0, #3
    c5ca:	f7ff ffb0 	bl	c52e <getStackedReg>
    c5ce:	4603      	mov	r3, r0
    c5d0:	930c      	str	r3, [sp, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c5d2:	9901      	ldr	r1, [sp, #4]
    c5d4:	2004      	movs	r0, #4
    c5d6:	f7ff ffaa 	bl	c52e <getStackedReg>
    c5da:	4603      	mov	r3, r0
    c5dc:	930d      	str	r3, [sp, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c5de:	9901      	ldr	r1, [sp, #4]
    c5e0:	2005      	movs	r0, #5
    c5e2:	f7ff ffa4 	bl	c52e <getStackedReg>
    c5e6:	4603      	mov	r3, r0
    c5e8:	930e      	str	r3, [sp, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c5ea:	9901      	ldr	r1, [sp, #4]
    c5ec:	2006      	movs	r0, #6
    c5ee:	f7ff ff9e 	bl	c52e <getStackedReg>
    c5f2:	4603      	mov	r3, r0
    c5f4:	930f      	str	r3, [sp, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c5f6:	9901      	ldr	r1, [sp, #4]
    c5f8:	2007      	movs	r0, #7
    c5fa:	f7ff ff98 	bl	c52e <getStackedReg>
    c5fe:	4603      	mov	r3, r0
    c600:	9310      	str	r3, [sp, #64]	; 0x40
    //
#if (defined(AM_PART_APOLLO4) || defined(AM_PART_APOLLO4B))
    am_hal_fault_status_get(&sHalFaultData);
#else
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c602:	ab03      	add	r3, sp, #12
    c604:	4619      	mov	r1, r3
    c606:	2002      	movs	r0, #2
    c608:	f001 fe64 	bl	e2d4 <am_hal_mcuctrl_info_get>
      am_util_stdio_printf("   SYS Fault Address: 0x%08X\n", sHalFaultData.ui32SYS);
    }

#endif

    u32Mask = 0;
    c60c:	2300      	movs	r3, #0
    c60e:	9315      	str	r3, [sp, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    c610:	e7fe      	b.n	c610 <am_util_faultisr_collect_data+0xd4>
    c612:	bf00      	nop
    c614:	e000ed28 	.word	0xe000ed28
    c618:	e000ed38 	.word	0xe000ed38

0000c61c <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
    c61c:	b082      	sub	sp, #8
    c61e:	9001      	str	r0, [sp, #4]
    g_pfnCharPrint = pfnCharPrint;
    c620:	4a02      	ldr	r2, [pc, #8]	; (c62c <am_util_stdio_printf_init+0x10>)
    c622:	9b01      	ldr	r3, [sp, #4]
    c624:	6013      	str	r3, [r2, #0]
}
    c626:	bf00      	nop
    c628:	b002      	add	sp, #8
    c62a:	4770      	bx	lr
    c62c:	10001048 	.word	0x10001048

0000c630 <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
    c630:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    c634:	b098      	sub	sp, #96	; 0x60
    c636:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    c63a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    c63e:	f04f 0000 	mov.w	r0, #0
    c642:	f04f 0100 	mov.w	r1, #0
    c646:	0018      	movs	r0, r3
    c648:	2100      	movs	r1, #0
    c64a:	ea50 0301 	orrs.w	r3, r0, r1
    c64e:	f000 80b0 	beq.w	c7b2 <divu64_10+0x182>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c652:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    c656:	f04f 0400 	mov.w	r4, #0
    c65a:	f04f 0500 	mov.w	r5, #0
    c65e:	0854      	lsrs	r4, r2, #1
    c660:	ea44 74c3 	orr.w	r4, r4, r3, lsl #31
    c664:	085d      	lsrs	r5, r3, #1
    c666:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    c66a:	f04f 0000 	mov.w	r0, #0
    c66e:	f04f 0100 	mov.w	r1, #0
    c672:	0890      	lsrs	r0, r2, #2
    c674:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
    c678:	0899      	lsrs	r1, r3, #2
    c67a:	eb14 0a00 	adds.w	sl, r4, r0
    c67e:	eb45 0b01 	adc.w	fp, r5, r1
    c682:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
        q64 += (q64 >> 4);
    c686:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c68a:	f04f 0000 	mov.w	r0, #0
    c68e:	f04f 0100 	mov.w	r1, #0
    c692:	0910      	lsrs	r0, r2, #4
    c694:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
    c698:	0919      	lsrs	r1, r3, #4
    c69a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c69e:	1814      	adds	r4, r2, r0
    c6a0:	9402      	str	r4, [sp, #8]
    c6a2:	414b      	adcs	r3, r1
    c6a4:	9303      	str	r3, [sp, #12]
    c6a6:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
    c6aa:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 += (q64 >> 8);
    c6ae:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c6b2:	f04f 0000 	mov.w	r0, #0
    c6b6:	f04f 0100 	mov.w	r1, #0
    c6ba:	0a10      	lsrs	r0, r2, #8
    c6bc:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
    c6c0:	0a19      	lsrs	r1, r3, #8
    c6c2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c6c6:	1814      	adds	r4, r2, r0
    c6c8:	9404      	str	r4, [sp, #16]
    c6ca:	414b      	adcs	r3, r1
    c6cc:	9305      	str	r3, [sp, #20]
    c6ce:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
    c6d2:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 += (q64 >> 16);
    c6d6:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c6da:	f04f 0000 	mov.w	r0, #0
    c6de:	f04f 0100 	mov.w	r1, #0
    c6e2:	0c10      	lsrs	r0, r2, #16
    c6e4:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
    c6e8:	0c19      	lsrs	r1, r3, #16
    c6ea:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c6ee:	1814      	adds	r4, r2, r0
    c6f0:	9406      	str	r4, [sp, #24]
    c6f2:	414b      	adcs	r3, r1
    c6f4:	9307      	str	r3, [sp, #28]
    c6f6:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
    c6fa:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 += (q64 >> 32);
    c6fe:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c702:	f04f 0000 	mov.w	r0, #0
    c706:	f04f 0100 	mov.w	r1, #0
    c70a:	0018      	movs	r0, r3
    c70c:	2100      	movs	r1, #0
    c70e:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c712:	1814      	adds	r4, r2, r0
    c714:	9408      	str	r4, [sp, #32]
    c716:	414b      	adcs	r3, r1
    c718:	9309      	str	r3, [sp, #36]	; 0x24
    c71a:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
    c71e:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 >>= 3;
    c722:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    c726:	f04f 0200 	mov.w	r2, #0
    c72a:	f04f 0300 	mov.w	r3, #0
    c72e:	08c2      	lsrs	r2, r0, #3
    c730:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
    c734:	08cb      	lsrs	r3, r1, #3
    c736:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
        r64 = ui64Val - q64*10;
    c73a:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
    c73e:	4622      	mov	r2, r4
    c740:	462b      	mov	r3, r5
    c742:	f04f 0000 	mov.w	r0, #0
    c746:	f04f 0100 	mov.w	r1, #0
    c74a:	0099      	lsls	r1, r3, #2
    c74c:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
    c750:	0090      	lsls	r0, r2, #2
    c752:	4602      	mov	r2, r0
    c754:	460b      	mov	r3, r1
    c756:	1916      	adds	r6, r2, r4
    c758:	eb43 0705 	adc.w	r7, r3, r5
    c75c:	19b3      	adds	r3, r6, r6
    c75e:	930a      	str	r3, [sp, #40]	; 0x28
    c760:	eb47 0307 	adc.w	r3, r7, r7
    c764:	930b      	str	r3, [sp, #44]	; 0x2c
    c766:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
    c76a:	4630      	mov	r0, r6
    c76c:	4639      	mov	r1, r7
    c76e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    c772:	1a14      	subs	r4, r2, r0
    c774:	940c      	str	r4, [sp, #48]	; 0x30
    c776:	eb63 0301 	sbc.w	r3, r3, r1
    c77a:	930d      	str	r3, [sp, #52]	; 0x34
    c77c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    c780:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
        return q64 + ((r64 + 6) >> 4);
    c784:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    c788:	f112 0806 	adds.w	r8, r2, #6
    c78c:	f143 0900 	adc.w	r9, r3, #0
    c790:	f04f 0200 	mov.w	r2, #0
    c794:	f04f 0300 	mov.w	r3, #0
    c798:	ea4f 1218 	mov.w	r2, r8, lsr #4
    c79c:	ea42 7209 	orr.w	r2, r2, r9, lsl #28
    c7a0:	ea4f 1319 	mov.w	r3, r9, lsr #4
    c7a4:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    c7a8:	1814      	adds	r4, r2, r0
    c7aa:	9400      	str	r4, [sp, #0]
    c7ac:	414b      	adcs	r3, r1
    c7ae:	9301      	str	r3, [sp, #4]
    c7b0:	e02a      	b.n	c808 <divu64_10+0x1d8>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
    c7b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c7b4:	9317      	str	r3, [sp, #92]	; 0x5c
        q32 = (ui32Val>>1) + (ui32Val>>2);
    c7b6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    c7b8:	085a      	lsrs	r2, r3, #1
    c7ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    c7bc:	089b      	lsrs	r3, r3, #2
    c7be:	4413      	add	r3, r2
    c7c0:	9316      	str	r3, [sp, #88]	; 0x58
        q32 += (q32 >> 4);
    c7c2:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c7c4:	091b      	lsrs	r3, r3, #4
    c7c6:	9a16      	ldr	r2, [sp, #88]	; 0x58
    c7c8:	4413      	add	r3, r2
    c7ca:	9316      	str	r3, [sp, #88]	; 0x58
        q32 += (q32 >> 8);
    c7cc:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c7ce:	0a1b      	lsrs	r3, r3, #8
    c7d0:	9a16      	ldr	r2, [sp, #88]	; 0x58
    c7d2:	4413      	add	r3, r2
    c7d4:	9316      	str	r3, [sp, #88]	; 0x58
        q32 += (q32 >> 16);
    c7d6:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c7d8:	0c1b      	lsrs	r3, r3, #16
    c7da:	9a16      	ldr	r2, [sp, #88]	; 0x58
    c7dc:	4413      	add	r3, r2
    c7de:	9316      	str	r3, [sp, #88]	; 0x58
        q32 >>= 3;
    c7e0:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c7e2:	08db      	lsrs	r3, r3, #3
    c7e4:	9316      	str	r3, [sp, #88]	; 0x58
        r32 = ui32Val - q32*10;
    c7e6:	9a16      	ldr	r2, [sp, #88]	; 0x58
    c7e8:	4613      	mov	r3, r2
    c7ea:	009b      	lsls	r3, r3, #2
    c7ec:	4413      	add	r3, r2
    c7ee:	005b      	lsls	r3, r3, #1
    c7f0:	461a      	mov	r2, r3
    c7f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    c7f4:	1a9b      	subs	r3, r3, r2
    c7f6:	9315      	str	r3, [sp, #84]	; 0x54
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c7f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
    c7fa:	3306      	adds	r3, #6
    c7fc:	091a      	lsrs	r2, r3, #4
    c7fe:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c800:	4413      	add	r3, r2
    c802:	2200      	movs	r2, #0
    c804:	9300      	str	r3, [sp, #0]
    c806:	9201      	str	r2, [sp, #4]
    }
}
    c808:	e9dd 2300 	ldrd	r2, r3, [sp]
    c80c:	4610      	mov	r0, r2
    c80e:	4619      	mov	r1, r3
    c810:	b018      	add	sp, #96	; 0x60
    c812:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    c816:	4770      	bx	lr

0000c818 <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
    c818:	b500      	push	{lr}
    c81a:	b085      	sub	sp, #20
    c81c:	e9cd 0100 	strd	r0, r1, [sp]
    int iNDigits = ui64Val ? 0 : 1;
    c820:	9a00      	ldr	r2, [sp, #0]
    c822:	9b01      	ldr	r3, [sp, #4]
    c824:	4313      	orrs	r3, r2
    c826:	2b00      	cmp	r3, #0
    c828:	bf0c      	ite	eq
    c82a:	2301      	moveq	r3, #1
    c82c:	2300      	movne	r3, #0
    c82e:	b2db      	uxtb	r3, r3
    c830:	9303      	str	r3, [sp, #12]

    while ( ui64Val )
    c832:	e008      	b.n	c846 <ndigits_in_u64+0x2e>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
    c834:	e9dd 0100 	ldrd	r0, r1, [sp]
    c838:	f7ff fefa 	bl	c630 <divu64_10>
    c83c:	e9cd 0100 	strd	r0, r1, [sp]
        ++iNDigits;
    c840:	9b03      	ldr	r3, [sp, #12]
    c842:	3301      	adds	r3, #1
    c844:	9303      	str	r3, [sp, #12]
    while ( ui64Val )
    c846:	e9dd 2300 	ldrd	r2, r3, [sp]
    c84a:	4313      	orrs	r3, r2
    c84c:	d1f2      	bne.n	c834 <ndigits_in_u64+0x1c>
    }

    return iNDigits;
    c84e:	9b03      	ldr	r3, [sp, #12]
}
    c850:	4618      	mov	r0, r3
    c852:	b005      	add	sp, #20
    c854:	f85d fb04 	ldr.w	pc, [sp], #4

0000c858 <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
    c858:	b530      	push	{r4, r5, lr}
    c85a:	b083      	sub	sp, #12
    c85c:	e9cd 0100 	strd	r0, r1, [sp]
    if ( i64Val < 0 )
    c860:	e9dd 2300 	ldrd	r2, r3, [sp]
    c864:	2b00      	cmp	r3, #0
    c866:	da07      	bge.n	c878 <ndigits_in_i64+0x20>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
    c868:	e9dd 2300 	ldrd	r2, r3, [sp]
    c86c:	2100      	movs	r1, #0
    c86e:	4254      	negs	r4, r2
    c870:	eb61 0503 	sbc.w	r5, r1, r3
    c874:	e9cd 4500 	strd	r4, r5, [sp]
    }

    return ndigits_in_u64((uint64_t) i64Val);
    c878:	e9dd 2300 	ldrd	r2, r3, [sp]
    c87c:	4610      	mov	r0, r2
    c87e:	4619      	mov	r1, r3
    c880:	f7ff ffca 	bl	c818 <ndigits_in_u64>
    c884:	4603      	mov	r3, r0
}
    c886:	4618      	mov	r0, r3
    c888:	b003      	add	sp, #12
    c88a:	bd30      	pop	{r4, r5, pc}

0000c88c <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
    c88c:	b084      	sub	sp, #16
    c88e:	e9cd 0100 	strd	r0, r1, [sp]
    int iDigits = ui64Val ? 0 : 1;
    c892:	9a00      	ldr	r2, [sp, #0]
    c894:	9b01      	ldr	r3, [sp, #4]
    c896:	4313      	orrs	r3, r2
    c898:	2b00      	cmp	r3, #0
    c89a:	bf0c      	ite	eq
    c89c:	2301      	moveq	r3, #1
    c89e:	2300      	movne	r3, #0
    c8a0:	b2db      	uxtb	r3, r3
    c8a2:	9303      	str	r3, [sp, #12]

    while ( ui64Val )
    c8a4:	e00e      	b.n	c8c4 <ndigits_in_hex+0x38>
    {
        ui64Val >>= 4;
    c8a6:	e9dd 0100 	ldrd	r0, r1, [sp]
    c8aa:	f04f 0200 	mov.w	r2, #0
    c8ae:	f04f 0300 	mov.w	r3, #0
    c8b2:	0902      	lsrs	r2, r0, #4
    c8b4:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    c8b8:	090b      	lsrs	r3, r1, #4
    c8ba:	e9cd 2300 	strd	r2, r3, [sp]
        ++iDigits;
    c8be:	9b03      	ldr	r3, [sp, #12]
    c8c0:	3301      	adds	r3, #1
    c8c2:	9303      	str	r3, [sp, #12]
    while ( ui64Val )
    c8c4:	e9dd 2300 	ldrd	r2, r3, [sp]
    c8c8:	4313      	orrs	r3, r2
    c8ca:	d1ec      	bne.n	c8a6 <ndigits_in_hex+0x1a>
    }

    return iDigits;
    c8cc:	9b03      	ldr	r3, [sp, #12]
}
    c8ce:	4618      	mov	r0, r3
    c8d0:	b004      	add	sp, #16
    c8d2:	4770      	bx	lr

0000c8d4 <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
    c8d4:	b086      	sub	sp, #24
    c8d6:	9001      	str	r0, [sp, #4]
    c8d8:	9100      	str	r1, [sp, #0]
    bool bNeg = false;
    c8da:	2300      	movs	r3, #0
    c8dc:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32_t ui32Val = 0, uCnt = 0;
    c8e0:	2300      	movs	r3, #0
    c8e2:	9304      	str	r3, [sp, #16]
    c8e4:	2300      	movs	r3, #0
    c8e6:	9303      	str	r3, [sp, #12]

    if ( *pcStr == '-')
    c8e8:	9b01      	ldr	r3, [sp, #4]
    c8ea:	781b      	ldrb	r3, [r3, #0]
    c8ec:	2b2d      	cmp	r3, #45	; 0x2d
    c8ee:	d11c      	bne.n	c92a <decstr_to_int+0x56>
    {
        bNeg = true;
    c8f0:	2301      	movs	r3, #1
    c8f2:	f88d 3017 	strb.w	r3, [sp, #23]
        pcStr++;
    c8f6:	9b01      	ldr	r3, [sp, #4]
    c8f8:	3301      	adds	r3, #1
    c8fa:	9301      	str	r3, [sp, #4]
        uCnt++;
    c8fc:	9b03      	ldr	r3, [sp, #12]
    c8fe:	3301      	adds	r3, #1
    c900:	9303      	str	r3, [sp, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c902:	e012      	b.n	c92a <decstr_to_int+0x56>
    {
        ++uCnt;
    c904:	9b03      	ldr	r3, [sp, #12]
    c906:	3301      	adds	r3, #1
    c908:	9303      	str	r3, [sp, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
    c90a:	9a04      	ldr	r2, [sp, #16]
    c90c:	4613      	mov	r3, r2
    c90e:	009b      	lsls	r3, r3, #2
    c910:	4413      	add	r3, r2
    c912:	005b      	lsls	r3, r3, #1
    c914:	9304      	str	r3, [sp, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
    c916:	9b01      	ldr	r3, [sp, #4]
    c918:	781b      	ldrb	r3, [r3, #0]
    c91a:	461a      	mov	r2, r3
    c91c:	9b04      	ldr	r3, [sp, #16]
    c91e:	4413      	add	r3, r2
    c920:	3b30      	subs	r3, #48	; 0x30
    c922:	9304      	str	r3, [sp, #16]
        pcStr++;
    c924:	9b01      	ldr	r3, [sp, #4]
    c926:	3301      	adds	r3, #1
    c928:	9301      	str	r3, [sp, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c92a:	9b01      	ldr	r3, [sp, #4]
    c92c:	781b      	ldrb	r3, [r3, #0]
    c92e:	2b2f      	cmp	r3, #47	; 0x2f
    c930:	d903      	bls.n	c93a <decstr_to_int+0x66>
    c932:	9b01      	ldr	r3, [sp, #4]
    c934:	781b      	ldrb	r3, [r3, #0]
    c936:	2b39      	cmp	r3, #57	; 0x39
    c938:	d9e4      	bls.n	c904 <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
    c93a:	9b00      	ldr	r3, [sp, #0]
    c93c:	2b00      	cmp	r3, #0
    c93e:	d002      	beq.n	c946 <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
    c940:	9b00      	ldr	r3, [sp, #0]
    c942:	9a03      	ldr	r2, [sp, #12]
    c944:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
    c946:	f89d 3017 	ldrb.w	r3, [sp, #23]
    c94a:	2b00      	cmp	r3, #0
    c94c:	d002      	beq.n	c954 <decstr_to_int+0x80>
    c94e:	9b04      	ldr	r3, [sp, #16]
    c950:	425b      	negs	r3, r3
    c952:	e000      	b.n	c956 <decstr_to_int+0x82>
    c954:	9b04      	ldr	r3, [sp, #16]
}
    c956:	4618      	mov	r0, r3
    c958:	b006      	add	sp, #24
    c95a:	4770      	bx	lr

0000c95c <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    c95c:	b500      	push	{lr}
    c95e:	b091      	sub	sp, #68	; 0x44
    c960:	e9cd 0102 	strd	r0, r1, [sp, #8]
    c964:	9201      	str	r2, [sp, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
    c966:	2300      	movs	r3, #0
    c968:	930f      	str	r3, [sp, #60]	; 0x3c
    c96a:	2300      	movs	r3, #0
    c96c:	930e      	str	r3, [sp, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
    c96e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    c972:	f7ff fe5d 	bl	c630 <divu64_10>
    c976:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
    c97a:	9902      	ldr	r1, [sp, #8]
    c97c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c97e:	4613      	mov	r3, r2
    c980:	009b      	lsls	r3, r3, #2
    c982:	4413      	add	r3, r2
    c984:	005b      	lsls	r3, r3, #1
    c986:	1acb      	subs	r3, r1, r3
    c988:	930b      	str	r3, [sp, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
    c98a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c98c:	b2da      	uxtb	r2, r3
    c98e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c990:	1c59      	adds	r1, r3, #1
    c992:	910f      	str	r1, [sp, #60]	; 0x3c
    c994:	3230      	adds	r2, #48	; 0x30
    c996:	b2d2      	uxtb	r2, r2
    c998:	3340      	adds	r3, #64	; 0x40
    c99a:	446b      	add	r3, sp
    c99c:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
    c9a0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    c9a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
    } while ( ui64Val );
    c9a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c9ac:	4313      	orrs	r3, r2
    c9ae:	d1de      	bne.n	c96e <uint64_to_str+0x12>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    c9b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c9b2:	930e      	str	r3, [sp, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    c9b4:	9b01      	ldr	r3, [sp, #4]
    c9b6:	2b00      	cmp	r3, #0
    c9b8:	d010      	beq.n	c9dc <uint64_to_str+0x80>
    {
        while ( ix-- )
    c9ba:	e007      	b.n	c9cc <uint64_to_str+0x70>
        {
            *pcBuf++ = tbuf[ix];
    c9bc:	9b01      	ldr	r3, [sp, #4]
    c9be:	1c5a      	adds	r2, r3, #1
    c9c0:	9201      	str	r2, [sp, #4]
    c9c2:	a904      	add	r1, sp, #16
    c9c4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    c9c6:	440a      	add	r2, r1
    c9c8:	7812      	ldrb	r2, [r2, #0]
    c9ca:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
    c9cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c9ce:	1e5a      	subs	r2, r3, #1
    c9d0:	920f      	str	r2, [sp, #60]	; 0x3c
    c9d2:	2b00      	cmp	r3, #0
    c9d4:	d1f2      	bne.n	c9bc <uint64_to_str+0x60>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
    c9d6:	9b01      	ldr	r3, [sp, #4]
    c9d8:	2200      	movs	r2, #0
    c9da:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    c9dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
}
    c9de:	4618      	mov	r0, r3
    c9e0:	b011      	add	sp, #68	; 0x44
    c9e2:	f85d fb04 	ldr.w	pc, [sp], #4

0000c9e6 <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
    c9e6:	b08c      	sub	sp, #48	; 0x30
    c9e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
    c9ec:	9201      	str	r2, [sp, #4]
    c9ee:	f88d 3003 	strb.w	r3, [sp, #3]
    int iNumDig, ix = 0;
    c9f2:	2300      	movs	r3, #0
    c9f4:	930b      	str	r3, [sp, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
    c9f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c9fa:	4313      	orrs	r3, r2
    c9fc:	d135      	bne.n	ca6a <uint64_to_hexstr+0x84>
    {
        tbuf[ix++] = '0';   // Print a '0'
    c9fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ca00:	1c5a      	adds	r2, r3, #1
    ca02:	920b      	str	r2, [sp, #44]	; 0x2c
    ca04:	3330      	adds	r3, #48	; 0x30
    ca06:	446b      	add	r3, sp
    ca08:	2230      	movs	r2, #48	; 0x30
    ca0a:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
    ca0e:	e02c      	b.n	ca6a <uint64_to_hexstr+0x84>
    {
        cCh = ui64Val & 0xf;
    ca10:	f89d 3008 	ldrb.w	r3, [sp, #8]
    ca14:	f003 030f 	and.w	r3, r3, #15
    ca18:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
    ca1c:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    ca20:	2b09      	cmp	r3, #9
    ca22:	d90b      	bls.n	ca3c <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
    ca24:	f89d 3003 	ldrb.w	r3, [sp, #3]
    ca28:	2b00      	cmp	r3, #0
    ca2a:	d001      	beq.n	ca30 <uint64_to_hexstr+0x4a>
    ca2c:	2227      	movs	r2, #39	; 0x27
    ca2e:	e000      	b.n	ca32 <uint64_to_hexstr+0x4c>
    ca30:	2207      	movs	r2, #7
    ca32:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    ca36:	4413      	add	r3, r2
    ca38:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
    ca3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ca3e:	1c5a      	adds	r2, r3, #1
    ca40:	920b      	str	r2, [sp, #44]	; 0x2c
    ca42:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
    ca46:	3230      	adds	r2, #48	; 0x30
    ca48:	b2d2      	uxtb	r2, r2
    ca4a:	3330      	adds	r3, #48	; 0x30
    ca4c:	446b      	add	r3, sp
    ca4e:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
    ca52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    ca56:	f04f 0200 	mov.w	r2, #0
    ca5a:	f04f 0300 	mov.w	r3, #0
    ca5e:	0902      	lsrs	r2, r0, #4
    ca60:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    ca64:	090b      	lsrs	r3, r1, #4
    ca66:	e9cd 2302 	strd	r2, r3, [sp, #8]
    while ( ui64Val )
    ca6a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    ca6e:	4313      	orrs	r3, r2
    ca70:	d1ce      	bne.n	ca10 <uint64_to_hexstr+0x2a>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    ca72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ca74:	9309      	str	r3, [sp, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    ca76:	9b01      	ldr	r3, [sp, #4]
    ca78:	2b00      	cmp	r3, #0
    ca7a:	d010      	beq.n	ca9e <uint64_to_hexstr+0xb8>
    {
        while (ix--)
    ca7c:	e007      	b.n	ca8e <uint64_to_hexstr+0xa8>
        {
            *pcBuf++ = tbuf[ix];
    ca7e:	9b01      	ldr	r3, [sp, #4]
    ca80:	1c5a      	adds	r2, r3, #1
    ca82:	9201      	str	r2, [sp, #4]
    ca84:	a904      	add	r1, sp, #16
    ca86:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    ca88:	440a      	add	r2, r1
    ca8a:	7812      	ldrb	r2, [r2, #0]
    ca8c:	701a      	strb	r2, [r3, #0]
        while (ix--)
    ca8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ca90:	1e5a      	subs	r2, r3, #1
    ca92:	920b      	str	r2, [sp, #44]	; 0x2c
    ca94:	2b00      	cmp	r3, #0
    ca96:	d1f2      	bne.n	ca7e <uint64_to_hexstr+0x98>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
    ca98:	9b01      	ldr	r3, [sp, #4]
    ca9a:	2200      	movs	r2, #0
    ca9c:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    ca9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    caa0:	4618      	mov	r0, r3
    caa2:	b00c      	add	sp, #48	; 0x30
    caa4:	4770      	bx	lr

0000caa6 <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
    caa6:	b084      	sub	sp, #16
    caa8:	9001      	str	r0, [sp, #4]
    uint32_t ui32RetVal = 0;
    caaa:	2300      	movs	r3, #0
    caac:	9303      	str	r3, [sp, #12]
    if ( !pcBuf )
    caae:	9b01      	ldr	r3, [sp, #4]
    cab0:	2b00      	cmp	r3, #0
    cab2:	d104      	bne.n	cabe <simple_strlen+0x18>
    {
        return ui32RetVal;
    cab4:	9b03      	ldr	r3, [sp, #12]
    cab6:	e009      	b.n	cacc <simple_strlen+0x26>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
    cab8:	9b03      	ldr	r3, [sp, #12]
    caba:	3301      	adds	r3, #1
    cabc:	9303      	str	r3, [sp, #12]
    while ( *pcBuf++ )
    cabe:	9b01      	ldr	r3, [sp, #4]
    cac0:	1c5a      	adds	r2, r3, #1
    cac2:	9201      	str	r2, [sp, #4]
    cac4:	781b      	ldrb	r3, [r3, #0]
    cac6:	2b00      	cmp	r3, #0
    cac8:	d1f6      	bne.n	cab8 <simple_strlen+0x12>
    }
    return ui32RetVal;
    caca:	9b03      	ldr	r3, [sp, #12]
}
    cacc:	4618      	mov	r0, r3
    cace:	b004      	add	sp, #16
    cad0:	4770      	bx	lr

0000cad2 <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
    cad2:	b086      	sub	sp, #24
    cad4:	9003      	str	r0, [sp, #12]
    cad6:	460b      	mov	r3, r1
    cad8:	9201      	str	r2, [sp, #4]
    cada:	f88d 300b 	strb.w	r3, [sp, #11]
    int32_t i32Cnt = 0;
    cade:	2300      	movs	r3, #0
    cae0:	9305      	str	r3, [sp, #20]

    if ( i32NumChars <= 0 )
    cae2:	9b01      	ldr	r3, [sp, #4]
    cae4:	2b00      	cmp	r3, #0
    cae6:	dc0d      	bgt.n	cb04 <padbuffer+0x32>
    {
        return i32Cnt;
    cae8:	9b05      	ldr	r3, [sp, #20]
    caea:	e011      	b.n	cb10 <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    caec:	9b03      	ldr	r3, [sp, #12]
    caee:	2b00      	cmp	r3, #0
    caf0:	d005      	beq.n	cafe <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
    caf2:	9b03      	ldr	r3, [sp, #12]
    caf4:	1c5a      	adds	r2, r3, #1
    caf6:	9203      	str	r2, [sp, #12]
    caf8:	f89d 200b 	ldrb.w	r2, [sp, #11]
    cafc:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
    cafe:	9b05      	ldr	r3, [sp, #20]
    cb00:	3301      	adds	r3, #1
    cb02:	9305      	str	r3, [sp, #20]
    while ( i32NumChars-- )
    cb04:	9b01      	ldr	r3, [sp, #4]
    cb06:	1e5a      	subs	r2, r3, #1
    cb08:	9201      	str	r2, [sp, #4]
    cb0a:	2b00      	cmp	r3, #0
    cb0c:	d1ee      	bne.n	caec <padbuffer+0x1a>
    }

    return i32Cnt;
    cb0e:	9b05      	ldr	r3, [sp, #20]
}
    cb10:	4618      	mov	r0, r3
    cb12:	b006      	add	sp, #24
    cb14:	4770      	bx	lr
	...

0000cb18 <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
    cb18:	b5f0      	push	{r4, r5, r6, r7, lr}
    cb1a:	b08f      	sub	sp, #60	; 0x3c
    cb1c:	ed8d 0a03 	vstr	s0, [sp, #12]
    cb20:	9002      	str	r0, [sp, #8]
    cb22:	9101      	str	r1, [sp, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
    cb24:	9b02      	ldr	r3, [sp, #8]
    cb26:	681b      	ldr	r3, [r3, #0]
    cb28:	9309      	str	r3, [sp, #36]	; 0x24
    if (iBufSize < 4)
    cb2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cb2c:	2b03      	cmp	r3, #3
    cb2e:	dc02      	bgt.n	cb36 <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
    cb30:	f06f 0302 	mvn.w	r3, #2
    cb34:	e0e9      	b.n	cd0a <ftoa+0x1f2>
    }

    if (fValue == 0.0f)
    cb36:	eddd 7a03 	vldr	s15, [sp, #12]
    cb3a:	eef5 7a40 	vcmp.f32	s15, #0.0
    cb3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    cb42:	d104      	bne.n	cb4e <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    cb44:	9b02      	ldr	r3, [sp, #8]
    cb46:	4a72      	ldr	r2, [pc, #456]	; (cd10 <ftoa+0x1f8>)
    cb48:	601a      	str	r2, [r3, #0]
        return 3;
    cb4a:	2303      	movs	r3, #3
    cb4c:	e0dd      	b.n	cd0a <ftoa+0x1f2>
    }

    pcBufInitial = pcBuf;
    cb4e:	9b02      	ldr	r3, [sp, #8]
    cb50:	9308      	str	r3, [sp, #32]

    unFloatValue.F = fValue;
    cb52:	9b03      	ldr	r3, [sp, #12]
    cb54:	9304      	str	r3, [sp, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    cb56:	9b04      	ldr	r3, [sp, #16]
    cb58:	15db      	asrs	r3, r3, #23
    cb5a:	b2db      	uxtb	r3, r3
    cb5c:	3b7f      	subs	r3, #127	; 0x7f
    cb5e:	9307      	str	r3, [sp, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    cb60:	9b04      	ldr	r3, [sp, #16]
    cb62:	f3c3 0316 	ubfx	r3, r3, #0, #23
    cb66:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    cb6a:	9306      	str	r3, [sp, #24]
    i32FracPart = 0;
    cb6c:	2300      	movs	r3, #0
    cb6e:	930c      	str	r3, [sp, #48]	; 0x30
    i32IntPart = 0;
    cb70:	2300      	movs	r3, #0
    cb72:	930d      	str	r3, [sp, #52]	; 0x34

    if (iExp2 >= 31)
    cb74:	9b07      	ldr	r3, [sp, #28]
    cb76:	2b1e      	cmp	r3, #30
    cb78:	dd02      	ble.n	cb80 <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
    cb7a:	f06f 0301 	mvn.w	r3, #1
    cb7e:	e0c4      	b.n	cd0a <ftoa+0x1f2>
    }
    else if (iExp2 < -23)
    cb80:	9b07      	ldr	r3, [sp, #28]
    cb82:	f113 0f17 	cmn.w	r3, #23
    cb86:	da02      	bge.n	cb8e <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
    cb88:	f04f 33ff 	mov.w	r3, #4294967295
    cb8c:	e0bd      	b.n	cd0a <ftoa+0x1f2>
    }
    else if (iExp2 >= 23)
    cb8e:	9b07      	ldr	r3, [sp, #28]
    cb90:	2b16      	cmp	r3, #22
    cb92:	dd06      	ble.n	cba2 <ftoa+0x8a>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
    cb94:	9b07      	ldr	r3, [sp, #28]
    cb96:	3b17      	subs	r3, #23
    cb98:	9a06      	ldr	r2, [sp, #24]
    cb9a:	fa02 f303 	lsl.w	r3, r2, r3
    cb9e:	930d      	str	r3, [sp, #52]	; 0x34
    cba0:	e01a      	b.n	cbd8 <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
    cba2:	9b07      	ldr	r3, [sp, #28]
    cba4:	2b00      	cmp	r3, #0
    cba6:	db0f      	blt.n	cbc8 <ftoa+0xb0>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
    cba8:	9b07      	ldr	r3, [sp, #28]
    cbaa:	f1c3 0317 	rsb	r3, r3, #23
    cbae:	9a06      	ldr	r2, [sp, #24]
    cbb0:	fa42 f303 	asr.w	r3, r2, r3
    cbb4:	930d      	str	r3, [sp, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    cbb6:	9b07      	ldr	r3, [sp, #28]
    cbb8:	3301      	adds	r3, #1
    cbba:	9a06      	ldr	r2, [sp, #24]
    cbbc:	fa02 f303 	lsl.w	r3, r2, r3
    cbc0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    cbc4:	930c      	str	r3, [sp, #48]	; 0x30
    cbc6:	e007      	b.n	cbd8 <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    cbc8:	9b06      	ldr	r3, [sp, #24]
    cbca:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
    cbce:	9b07      	ldr	r3, [sp, #28]
    cbd0:	43db      	mvns	r3, r3
    cbd2:	fa42 f303 	asr.w	r3, r2, r3
    cbd6:	930c      	str	r3, [sp, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
    cbd8:	9b04      	ldr	r3, [sp, #16]
    cbda:	2b00      	cmp	r3, #0
    cbdc:	da04      	bge.n	cbe8 <ftoa+0xd0>
    {
        *pcBuf++ = '-';
    cbde:	9b02      	ldr	r3, [sp, #8]
    cbe0:	1c5a      	adds	r2, r3, #1
    cbe2:	9202      	str	r2, [sp, #8]
    cbe4:	222d      	movs	r2, #45	; 0x2d
    cbe6:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
    cbe8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cbea:	2b00      	cmp	r3, #0
    cbec:	d105      	bne.n	cbfa <ftoa+0xe2>
    {
        *pcBuf++ = '0';
    cbee:	9b02      	ldr	r3, [sp, #8]
    cbf0:	1c5a      	adds	r2, r3, #1
    cbf2:	9202      	str	r2, [sp, #8]
    cbf4:	2230      	movs	r2, #48	; 0x30
    cbf6:	701a      	strb	r2, [r3, #0]
    cbf8:	e023      	b.n	cc42 <ftoa+0x12a>
    }
    else
    {
        if (i32IntPart > 0)
    cbfa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cbfc:	2b00      	cmp	r3, #0
    cbfe:	dd09      	ble.n	cc14 <ftoa+0xfc>
        {
            uint64_to_str(i32IntPart, pcBuf);
    cc00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cc02:	17da      	asrs	r2, r3, #31
    cc04:	461e      	mov	r6, r3
    cc06:	4617      	mov	r7, r2
    cc08:	9a02      	ldr	r2, [sp, #8]
    cc0a:	4630      	mov	r0, r6
    cc0c:	4639      	mov	r1, r7
    cc0e:	f7ff fea5 	bl	c95c <uint64_to_str>
    cc12:	e012      	b.n	cc3a <ftoa+0x122>
        }
        else
        {
            *pcBuf++ = '-';
    cc14:	9b02      	ldr	r3, [sp, #8]
    cc16:	1c5a      	adds	r2, r3, #1
    cc18:	9202      	str	r2, [sp, #8]
    cc1a:	222d      	movs	r2, #45	; 0x2d
    cc1c:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
    cc1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cc20:	425b      	negs	r3, r3
    cc22:	17da      	asrs	r2, r3, #31
    cc24:	461c      	mov	r4, r3
    cc26:	4615      	mov	r5, r2
    cc28:	9a02      	ldr	r2, [sp, #8]
    cc2a:	4620      	mov	r0, r4
    cc2c:	4629      	mov	r1, r5
    cc2e:	f7ff fe95 	bl	c95c <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
    cc32:	e002      	b.n	cc3a <ftoa+0x122>
        {
            pcBuf++;
    cc34:	9b02      	ldr	r3, [sp, #8]
    cc36:	3301      	adds	r3, #1
    cc38:	9302      	str	r3, [sp, #8]
        while (*pcBuf)    // Get to end of new string
    cc3a:	9b02      	ldr	r3, [sp, #8]
    cc3c:	781b      	ldrb	r3, [r3, #0]
    cc3e:	2b00      	cmp	r3, #0
    cc40:	d1f8      	bne.n	cc34 <ftoa+0x11c>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
    cc42:	9b02      	ldr	r3, [sp, #8]
    cc44:	1c5a      	adds	r2, r3, #1
    cc46:	9202      	str	r2, [sp, #8]
    cc48:	222e      	movs	r2, #46	; 0x2e
    cc4a:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
    cc4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cc4e:	2b00      	cmp	r3, #0
    cc50:	d105      	bne.n	cc5e <ftoa+0x146>
    {
        *pcBuf++ = '0';
    cc52:	9b02      	ldr	r3, [sp, #8]
    cc54:	1c5a      	adds	r2, r3, #1
    cc56:	9202      	str	r2, [sp, #8]
    cc58:	2230      	movs	r2, #48	; 0x30
    cc5a:	701a      	strb	r2, [r3, #0]
    cc5c:	e04f      	b.n	ccfe <ftoa+0x1e6>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    cc5e:	9a02      	ldr	r2, [sp, #8]
    cc60:	9b08      	ldr	r3, [sp, #32]
    cc62:	1ad3      	subs	r3, r2, r3
    cc64:	9a09      	ldr	r2, [sp, #36]	; 0x24
    cc66:	1ad3      	subs	r3, r2, r3
    cc68:	3b01      	subs	r3, #1
    cc6a:	9305      	str	r3, [sp, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    cc6c:	9a05      	ldr	r2, [sp, #20]
    cc6e:	9b01      	ldr	r3, [sp, #4]
    cc70:	4293      	cmp	r3, r2
    cc72:	bfa8      	it	ge
    cc74:	4613      	movge	r3, r2
    cc76:	9305      	str	r3, [sp, #20]

        for (jx = 0; jx < iMax; jx++)
    cc78:	2300      	movs	r3, #0
    cc7a:	930a      	str	r3, [sp, #40]	; 0x28
    cc7c:	e015      	b.n	ccaa <ftoa+0x192>
        {
            i32FracPart *= 10;
    cc7e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    cc80:	4613      	mov	r3, r2
    cc82:	009b      	lsls	r3, r3, #2
    cc84:	4413      	add	r3, r2
    cc86:	005b      	lsls	r3, r3, #1
    cc88:	930c      	str	r3, [sp, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
    cc8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cc8c:	161b      	asrs	r3, r3, #24
    cc8e:	b2da      	uxtb	r2, r3
    cc90:	9b02      	ldr	r3, [sp, #8]
    cc92:	1c59      	adds	r1, r3, #1
    cc94:	9102      	str	r1, [sp, #8]
    cc96:	3230      	adds	r2, #48	; 0x30
    cc98:	b2d2      	uxtb	r2, r2
    cc9a:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
    cc9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cc9e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    cca2:	930c      	str	r3, [sp, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
    cca4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cca6:	3301      	adds	r3, #1
    cca8:	930a      	str	r3, [sp, #40]	; 0x28
    ccaa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    ccac:	9b05      	ldr	r3, [sp, #20]
    ccae:	429a      	cmp	r2, r3
    ccb0:	dbe5      	blt.n	cc7e <ftoa+0x166>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    ccb2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ccb4:	4613      	mov	r3, r2
    ccb6:	009b      	lsls	r3, r3, #2
    ccb8:	4413      	add	r3, r2
    ccba:	005b      	lsls	r3, r3, #1
    ccbc:	161b      	asrs	r3, r3, #24
    ccbe:	2b04      	cmp	r3, #4
    ccc0:	dd1d      	ble.n	ccfe <ftoa+0x1e6>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
    ccc2:	9b02      	ldr	r3, [sp, #8]
    ccc4:	3b01      	subs	r3, #1
    ccc6:	930b      	str	r3, [sp, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    ccc8:	e015      	b.n	ccf6 <ftoa+0x1de>
            {
                if ( *pcBuftmp == '.' )
    ccca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cccc:	781b      	ldrb	r3, [r3, #0]
    ccce:	2b2e      	cmp	r3, #46	; 0x2e
    ccd0:	d00e      	beq.n	ccf0 <ftoa+0x1d8>
                {
                }
                else if ( *pcBuftmp == '9' )
    ccd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ccd4:	781b      	ldrb	r3, [r3, #0]
    ccd6:	2b39      	cmp	r3, #57	; 0x39
    ccd8:	d103      	bne.n	cce2 <ftoa+0x1ca>
                {
                    *pcBuftmp = '0';
    ccda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ccdc:	2230      	movs	r2, #48	; 0x30
    ccde:	701a      	strb	r2, [r3, #0]
    cce0:	e006      	b.n	ccf0 <ftoa+0x1d8>
                }
                else
                {
                    *pcBuftmp += 1;
    cce2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cce4:	781b      	ldrb	r3, [r3, #0]
    cce6:	3301      	adds	r3, #1
    cce8:	b2da      	uxtb	r2, r3
    ccea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ccec:	701a      	strb	r2, [r3, #0]
                    break;
    ccee:	e006      	b.n	ccfe <ftoa+0x1e6>
                }
                pcBuftmp--;
    ccf0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ccf2:	3b01      	subs	r3, #1
    ccf4:	930b      	str	r3, [sp, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    ccf6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    ccf8:	9b08      	ldr	r3, [sp, #32]
    ccfa:	429a      	cmp	r2, r3
    ccfc:	d2e5      	bcs.n	ccca <ftoa+0x1b2>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
    ccfe:	9b02      	ldr	r3, [sp, #8]
    cd00:	2200      	movs	r2, #0
    cd02:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
    cd04:	9a02      	ldr	r2, [sp, #8]
    cd06:	9b08      	ldr	r3, [sp, #32]
    cd08:	1ad3      	subs	r3, r2, r3
} // ftoa()
    cd0a:	4618      	mov	r0, r3
    cd0c:	b00f      	add	sp, #60	; 0x3c
    cd0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cd10:	00302e30 	.word	0x00302e30

0000cd14 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    cd14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cd18:	b097      	sub	sp, #92	; 0x5c
    cd1a:	9003      	str	r0, [sp, #12]
    cd1c:	9102      	str	r1, [sp, #8]
    cd1e:	9201      	str	r2, [sp, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
    cd20:	2300      	movs	r3, #0
    cd22:	9311      	str	r3, [sp, #68]	; 0x44
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
    cd24:	2300      	movs	r3, #0
    cd26:	930b      	str	r3, [sp, #44]	; 0x2c

    while ( *pcFmt != 0x0 )
    cd28:	e2e9      	b.n	d2fe <am_util_stdio_vsprintf+0x5ea>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
    cd2a:	2306      	movs	r3, #6
    cd2c:	930e      	str	r3, [sp, #56]	; 0x38

        if ( *pcFmt != '%' )
    cd2e:	9b02      	ldr	r3, [sp, #8]
    cd30:	781b      	ldrb	r3, [r3, #0]
    cd32:	2b25      	cmp	r3, #37	; 0x25
    cd34:	d01f      	beq.n	cd76 <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    cd36:	9b03      	ldr	r3, [sp, #12]
    cd38:	2b00      	cmp	r3, #0
    cd3a:	d015      	beq.n	cd68 <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    cd3c:	9b02      	ldr	r3, [sp, #8]
    cd3e:	781b      	ldrb	r3, [r3, #0]
    cd40:	2b0a      	cmp	r3, #10
    cd42:	d10b      	bne.n	cd5c <am_util_stdio_vsprintf+0x48>
    cd44:	4ba8      	ldr	r3, [pc, #672]	; (cfe8 <am_util_stdio_vsprintf+0x2d4>)
    cd46:	781b      	ldrb	r3, [r3, #0]
    cd48:	2b00      	cmp	r3, #0
    cd4a:	d007      	beq.n	cd5c <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
    cd4c:	9b03      	ldr	r3, [sp, #12]
    cd4e:	1c5a      	adds	r2, r3, #1
    cd50:	9203      	str	r2, [sp, #12]
    cd52:	220d      	movs	r2, #13
    cd54:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
    cd56:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cd58:	3301      	adds	r3, #1
    cd5a:	9311      	str	r3, [sp, #68]	; 0x44
                }
                *pcBuf++ = *pcFmt;
    cd5c:	9b03      	ldr	r3, [sp, #12]
    cd5e:	1c5a      	adds	r2, r3, #1
    cd60:	9203      	str	r2, [sp, #12]
    cd62:	9a02      	ldr	r2, [sp, #8]
    cd64:	7812      	ldrb	r2, [r2, #0]
    cd66:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
    cd68:	9b02      	ldr	r3, [sp, #8]
    cd6a:	3301      	adds	r3, #1
    cd6c:	9302      	str	r3, [sp, #8]
            ++ui32CharCnt;
    cd6e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cd70:	3301      	adds	r3, #1
    cd72:	9311      	str	r3, [sp, #68]	; 0x44
            continue;
    cd74:	e2c3      	b.n	d2fe <am_util_stdio_vsprintf+0x5ea>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
    cd76:	9b02      	ldr	r3, [sp, #8]
    cd78:	3301      	adds	r3, #1
    cd7a:	9302      	str	r3, [sp, #8]
        bLower = bLongLong = false;
    cd7c:	2300      	movs	r3, #0
    cd7e:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
    cd82:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    cd86:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
    cd8a:	2320      	movs	r3, #32
    cd8c:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37

        if ( *pcFmt == '0' )
    cd90:	9b02      	ldr	r3, [sp, #8]
    cd92:	781b      	ldrb	r3, [r3, #0]
    cd94:	2b30      	cmp	r3, #48	; 0x30
    cd96:	d105      	bne.n	cda4 <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
    cd98:	2330      	movs	r3, #48	; 0x30
    cd9a:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
            ++pcFmt;
    cd9e:	9b02      	ldr	r3, [sp, #8]
    cda0:	3301      	adds	r3, #1
    cda2:	9302      	str	r3, [sp, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    cda4:	ab05      	add	r3, sp, #20
    cda6:	4619      	mov	r1, r3
    cda8:	9802      	ldr	r0, [sp, #8]
    cdaa:	f7ff fd93 	bl	c8d4 <decstr_to_int>
    cdae:	4603      	mov	r3, r0
    cdb0:	9310      	str	r3, [sp, #64]	; 0x40
        pcFmt += ui32NumChars;
    cdb2:	9b05      	ldr	r3, [sp, #20]
    cdb4:	9a02      	ldr	r2, [sp, #8]
    cdb6:	4413      	add	r3, r2
    cdb8:	9302      	str	r3, [sp, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    cdba:	9b02      	ldr	r3, [sp, #8]
    cdbc:	781b      	ldrb	r3, [r3, #0]
    cdbe:	2b73      	cmp	r3, #115	; 0x73
    cdc0:	d005      	beq.n	cdce <am_util_stdio_vsprintf+0xba>
    cdc2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cdc4:	2b00      	cmp	r3, #0
    cdc6:	da02      	bge.n	cdce <am_util_stdio_vsprintf+0xba>
        {
            iWidth = -iWidth;
    cdc8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cdca:	425b      	negs	r3, r3
    cdcc:	9310      	str	r3, [sp, #64]	; 0x40
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
    cdce:	9b02      	ldr	r3, [sp, #8]
    cdd0:	781b      	ldrb	r3, [r3, #0]
    cdd2:	2b2e      	cmp	r3, #46	; 0x2e
    cdd4:	d10d      	bne.n	cdf2 <am_util_stdio_vsprintf+0xde>
        {
            ++pcFmt;
    cdd6:	9b02      	ldr	r3, [sp, #8]
    cdd8:	3301      	adds	r3, #1
    cdda:	9302      	str	r3, [sp, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
    cddc:	ab05      	add	r3, sp, #20
    cdde:	4619      	mov	r1, r3
    cde0:	9802      	ldr	r0, [sp, #8]
    cde2:	f7ff fd77 	bl	c8d4 <decstr_to_int>
    cde6:	4603      	mov	r3, r0
    cde8:	930e      	str	r3, [sp, #56]	; 0x38
            pcFmt += ui32NumChars;
    cdea:	9b05      	ldr	r3, [sp, #20]
    cdec:	9a02      	ldr	r2, [sp, #8]
    cdee:	4413      	add	r3, r2
    cdf0:	9302      	str	r3, [sp, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
    cdf2:	9b02      	ldr	r3, [sp, #8]
    cdf4:	781b      	ldrb	r3, [r3, #0]
    cdf6:	2b6c      	cmp	r3, #108	; 0x6c
    cdf8:	d10c      	bne.n	ce14 <am_util_stdio_vsprintf+0x100>
        {
            pcFmt++;
    cdfa:	9b02      	ldr	r3, [sp, #8]
    cdfc:	3301      	adds	r3, #1
    cdfe:	9302      	str	r3, [sp, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
    ce00:	9b02      	ldr	r3, [sp, #8]
    ce02:	781b      	ldrb	r3, [r3, #0]
    ce04:	2b6c      	cmp	r3, #108	; 0x6c
    ce06:	d105      	bne.n	ce14 <am_util_stdio_vsprintf+0x100>
            {
                pcFmt++;
    ce08:	9b02      	ldr	r3, [sp, #8]
    ce0a:	3301      	adds	r3, #1
    ce0c:	9302      	str	r3, [sp, #8]
                bLongLong = true;
    ce0e:	2301      	movs	r3, #1
    ce10:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
            }
        }

        switch ( *pcFmt )
    ce14:	9b02      	ldr	r3, [sp, #8]
    ce16:	781b      	ldrb	r3, [r3, #0]
    ce18:	3b46      	subs	r3, #70	; 0x46
    ce1a:	2b32      	cmp	r3, #50	; 0x32
    ce1c:	f200 825c 	bhi.w	d2d8 <am_util_stdio_vsprintf+0x5c4>
    ce20:	a201      	add	r2, pc, #4	; (adr r2, ce28 <am_util_stdio_vsprintf+0x114>)
    ce22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    ce26:	bf00      	nop
    ce28:	0000d25f 	.word	0x0000d25f
    ce2c:	0000d2d9 	.word	0x0000d2d9
    ce30:	0000d2d9 	.word	0x0000d2d9
    ce34:	0000d2d9 	.word	0x0000d2d9
    ce38:	0000d2d9 	.word	0x0000d2d9
    ce3c:	0000d2d9 	.word	0x0000d2d9
    ce40:	0000d2d9 	.word	0x0000d2d9
    ce44:	0000d2d9 	.word	0x0000d2d9
    ce48:	0000d2d9 	.word	0x0000d2d9
    ce4c:	0000d2d9 	.word	0x0000d2d9
    ce50:	0000d2d9 	.word	0x0000d2d9
    ce54:	0000d2d9 	.word	0x0000d2d9
    ce58:	0000d2d9 	.word	0x0000d2d9
    ce5c:	0000d2d9 	.word	0x0000d2d9
    ce60:	0000d2d9 	.word	0x0000d2d9
    ce64:	0000d2d9 	.word	0x0000d2d9
    ce68:	0000d2d9 	.word	0x0000d2d9
    ce6c:	0000d2d9 	.word	0x0000d2d9
    ce70:	0000cff3 	.word	0x0000cff3
    ce74:	0000d2d9 	.word	0x0000d2d9
    ce78:	0000d2d9 	.word	0x0000d2d9
    ce7c:	0000d2d9 	.word	0x0000d2d9
    ce80:	0000d2d9 	.word	0x0000d2d9
    ce84:	0000d2d9 	.word	0x0000d2d9
    ce88:	0000d2d9 	.word	0x0000d2d9
    ce8c:	0000d2d9 	.word	0x0000d2d9
    ce90:	0000d2d9 	.word	0x0000d2d9
    ce94:	0000d2d9 	.word	0x0000d2d9
    ce98:	0000d2d9 	.word	0x0000d2d9
    ce9c:	0000cef5 	.word	0x0000cef5
    cea0:	0000d123 	.word	0x0000d123
    cea4:	0000d2d9 	.word	0x0000d2d9
    cea8:	0000d25f 	.word	0x0000d25f
    ceac:	0000d2d9 	.word	0x0000d2d9
    ceb0:	0000d2d9 	.word	0x0000d2d9
    ceb4:	0000d123 	.word	0x0000d123
    ceb8:	0000d2d9 	.word	0x0000d2d9
    cebc:	0000d2d9 	.word	0x0000d2d9
    cec0:	0000d2d9 	.word	0x0000d2d9
    cec4:	0000d2d9 	.word	0x0000d2d9
    cec8:	0000d2d9 	.word	0x0000d2d9
    cecc:	0000d2d9 	.word	0x0000d2d9
    ced0:	0000d2d9 	.word	0x0000d2d9
    ced4:	0000d2d9 	.word	0x0000d2d9
    ced8:	0000d2d9 	.word	0x0000d2d9
    cedc:	0000cf1b 	.word	0x0000cf1b
    cee0:	0000d2d9 	.word	0x0000d2d9
    cee4:	0000d08d 	.word	0x0000d08d
    cee8:	0000d2d9 	.word	0x0000d2d9
    ceec:	0000d2d9 	.word	0x0000d2d9
    cef0:	0000cfed 	.word	0x0000cfed
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    cef4:	9b01      	ldr	r3, [sp, #4]
    cef6:	1d1a      	adds	r2, r3, #4
    cef8:	9201      	str	r2, [sp, #4]
    cefa:	681b      	ldr	r3, [r3, #0]
    cefc:	f88d 301f 	strb.w	r3, [sp, #31]

                if ( pcBuf )
    cf00:	9b03      	ldr	r3, [sp, #12]
    cf02:	2b00      	cmp	r3, #0
    cf04:	d005      	beq.n	cf12 <am_util_stdio_vsprintf+0x1fe>
                {
                    *pcBuf++ = ui8CharSpecifier;
    cf06:	9b03      	ldr	r3, [sp, #12]
    cf08:	1c5a      	adds	r2, r3, #1
    cf0a:	9203      	str	r2, [sp, #12]
    cf0c:	f89d 201f 	ldrb.w	r2, [sp, #31]
    cf10:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    cf12:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cf14:	3301      	adds	r3, #1
    cf16:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    cf18:	e1ee      	b.n	d2f8 <am_util_stdio_vsprintf+0x5e4>

            case 's':
                pcStr = va_arg(pArgs, char *);
    cf1a:	9b01      	ldr	r3, [sp, #4]
    cf1c:	1d1a      	adds	r2, r3, #4
    cf1e:	9201      	str	r2, [sp, #4]
    cf20:	681b      	ldr	r3, [r3, #0]
    cf22:	9315      	str	r3, [sp, #84]	; 0x54
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
    cf24:	9815      	ldr	r0, [sp, #84]	; 0x54
    cf26:	f7ff fdbe 	bl	caa6 <simple_strlen>
    cf2a:	900b      	str	r0, [sp, #44]	; 0x2c
                if ( iWidth > 0 )
    cf2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cf2e:	2b00      	cmp	r3, #0
    cf30:	dd2e      	ble.n	cf90 <am_util_stdio_vsprintf+0x27c>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
    cf32:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cf34:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    cf36:	429a      	cmp	r2, r3
    cf38:	d22a      	bcs.n	cf90 <am_util_stdio_vsprintf+0x27c>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    cf3a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    cf3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cf3e:	1ad3      	subs	r3, r2, r3
    cf40:	9310      	str	r3, [sp, #64]	; 0x40
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    cf42:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    cf46:	9a10      	ldr	r2, [sp, #64]	; 0x40
    cf48:	4619      	mov	r1, r3
    cf4a:	9803      	ldr	r0, [sp, #12]
    cf4c:	f7ff fdc1 	bl	cad2 <padbuffer>
    cf50:	9010      	str	r0, [sp, #64]	; 0x40
                        pcBuf += pcBuf ? iWidth : 0;
    cf52:	9b03      	ldr	r3, [sp, #12]
    cf54:	2b00      	cmp	r3, #0
    cf56:	d001      	beq.n	cf5c <am_util_stdio_vsprintf+0x248>
    cf58:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cf5a:	e000      	b.n	cf5e <am_util_stdio_vsprintf+0x24a>
    cf5c:	2300      	movs	r3, #0
    cf5e:	9a03      	ldr	r2, [sp, #12]
    cf60:	4413      	add	r3, r2
    cf62:	9303      	str	r3, [sp, #12]
                        ui32CharCnt += iWidth;
    cf64:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cf66:	9a11      	ldr	r2, [sp, #68]	; 0x44
    cf68:	4413      	add	r3, r2
    cf6a:	9311      	str	r3, [sp, #68]	; 0x44
                        iWidth = 0;
    cf6c:	2300      	movs	r3, #0
    cf6e:	9310      	str	r3, [sp, #64]	; 0x40
                    }
                }

                while (*pcStr != 0x0)
    cf70:	e00e      	b.n	cf90 <am_util_stdio_vsprintf+0x27c>
                {
                    if ( pcBuf )
    cf72:	9b03      	ldr	r3, [sp, #12]
    cf74:	2b00      	cmp	r3, #0
    cf76:	d005      	beq.n	cf84 <am_util_stdio_vsprintf+0x270>
                    {
                        *pcBuf++ = *pcStr;
    cf78:	9b03      	ldr	r3, [sp, #12]
    cf7a:	1c5a      	adds	r2, r3, #1
    cf7c:	9203      	str	r2, [sp, #12]
    cf7e:	9a15      	ldr	r2, [sp, #84]	; 0x54
    cf80:	7812      	ldrb	r2, [r2, #0]
    cf82:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
    cf84:	9b15      	ldr	r3, [sp, #84]	; 0x54
    cf86:	3301      	adds	r3, #1
    cf88:	9315      	str	r3, [sp, #84]	; 0x54
                    ++ui32CharCnt;
    cf8a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cf8c:	3301      	adds	r3, #1
    cf8e:	9311      	str	r3, [sp, #68]	; 0x44
                while (*pcStr != 0x0)
    cf90:	9b15      	ldr	r3, [sp, #84]	; 0x54
    cf92:	781b      	ldrb	r3, [r3, #0]
    cf94:	2b00      	cmp	r3, #0
    cf96:	d1ec      	bne.n	cf72 <am_util_stdio_vsprintf+0x25e>
                }

                if ( iWidth )
    cf98:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cf9a:	2b00      	cmp	r3, #0
    cf9c:	f000 81a9 	beq.w	d2f2 <am_util_stdio_vsprintf+0x5de>
                {
                    iWidth = -iWidth;
    cfa0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cfa2:	425b      	negs	r3, r3
    cfa4:	9310      	str	r3, [sp, #64]	; 0x40

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
    cfa6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cfa8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    cfaa:	429a      	cmp	r2, r3
    cfac:	f080 81a1 	bcs.w	d2f2 <am_util_stdio_vsprintf+0x5de>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    cfb0:	9a10      	ldr	r2, [sp, #64]	; 0x40
    cfb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cfb4:	1ad3      	subs	r3, r2, r3
    cfb6:	9310      	str	r3, [sp, #64]	; 0x40
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    cfb8:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    cfbc:	9a10      	ldr	r2, [sp, #64]	; 0x40
    cfbe:	4619      	mov	r1, r3
    cfc0:	9803      	ldr	r0, [sp, #12]
    cfc2:	f7ff fd86 	bl	cad2 <padbuffer>
    cfc6:	9010      	str	r0, [sp, #64]	; 0x40
                        pcBuf += pcBuf ? iWidth : 0;
    cfc8:	9b03      	ldr	r3, [sp, #12]
    cfca:	2b00      	cmp	r3, #0
    cfcc:	d001      	beq.n	cfd2 <am_util_stdio_vsprintf+0x2be>
    cfce:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cfd0:	e000      	b.n	cfd4 <am_util_stdio_vsprintf+0x2c0>
    cfd2:	2300      	movs	r3, #0
    cfd4:	9a03      	ldr	r2, [sp, #12]
    cfd6:	4413      	add	r3, r2
    cfd8:	9303      	str	r3, [sp, #12]
                        ui32CharCnt += iWidth;
    cfda:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cfdc:	9a11      	ldr	r2, [sp, #68]	; 0x44
    cfde:	4413      	add	r3, r2
    cfe0:	9311      	str	r3, [sp, #68]	; 0x44
                        iWidth = 0;
    cfe2:	2300      	movs	r3, #0
    cfe4:	9310      	str	r3, [sp, #64]	; 0x40
                    }
                }
                break;
    cfe6:	e184      	b.n	d2f2 <am_util_stdio_vsprintf+0x5de>
    cfe8:	1000114c 	.word	0x1000114c

            case 'x':
                bLower = true;
    cfec:	2301      	movs	r3, #1
    cfee:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cff2:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    cff6:	2b00      	cmp	r3, #0
    cff8:	d009      	beq.n	d00e <am_util_stdio_vsprintf+0x2fa>
    cffa:	9b01      	ldr	r3, [sp, #4]
    cffc:	3307      	adds	r3, #7
    cffe:	f023 0307 	bic.w	r3, r3, #7
    d002:	f103 0208 	add.w	r2, r3, #8
    d006:	9201      	str	r2, [sp, #4]
    d008:	e9d3 4500 	ldrd	r4, r5, [r3]
    d00c:	e006      	b.n	d01c <am_util_stdio_vsprintf+0x308>
                                      va_arg(pArgs, uint32_t);
    d00e:	9b01      	ldr	r3, [sp, #4]
    d010:	1d1a      	adds	r2, r3, #4
    d012:	9201      	str	r2, [sp, #4]
    d014:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d016:	2200      	movs	r2, #0
    d018:	461c      	mov	r4, r3
    d01a:	4615      	mov	r5, r2
    d01c:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48

                if ( iWidth )
    d020:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d022:	2b00      	cmp	r3, #0
    d024:	d01e      	beq.n	d064 <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
    d026:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d02a:	f7ff fc2f 	bl	c88c <ndigits_in_hex>
    d02e:	4602      	mov	r2, r0
    d030:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d032:	1a9b      	subs	r3, r3, r2
    d034:	9310      	str	r3, [sp, #64]	; 0x40

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d036:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d03a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d03c:	4619      	mov	r1, r3
    d03e:	9803      	ldr	r0, [sp, #12]
    d040:	f7ff fd47 	bl	cad2 <padbuffer>
    d044:	9010      	str	r0, [sp, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    d046:	9b03      	ldr	r3, [sp, #12]
    d048:	2b00      	cmp	r3, #0
    d04a:	d001      	beq.n	d050 <am_util_stdio_vsprintf+0x33c>
    d04c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d04e:	e000      	b.n	d052 <am_util_stdio_vsprintf+0x33e>
    d050:	2300      	movs	r3, #0
    d052:	9a03      	ldr	r2, [sp, #12]
    d054:	4413      	add	r3, r2
    d056:	9303      	str	r3, [sp, #12]
                    ui32CharCnt += iWidth;
    d058:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d05a:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d05c:	4413      	add	r3, r2
    d05e:	9311      	str	r3, [sp, #68]	; 0x44
                    iWidth = 0;
    d060:	2300      	movs	r3, #0
    d062:	9310      	str	r3, [sp, #64]	; 0x40
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    d064:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
    d068:	9a03      	ldr	r2, [sp, #12]
    d06a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d06e:	f7ff fcba 	bl	c9e6 <uint64_to_hexstr>
    d072:	900f      	str	r0, [sp, #60]	; 0x3c

                if ( pcBuf )
    d074:	9b03      	ldr	r3, [sp, #12]
    d076:	2b00      	cmp	r3, #0
    d078:	d003      	beq.n	d082 <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
    d07a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d07c:	9a03      	ldr	r2, [sp, #12]
    d07e:	4413      	add	r3, r2
    d080:	9303      	str	r3, [sp, #12]
                }

                ui32CharCnt += iVal;
    d082:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d084:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d086:	4413      	add	r3, r2
    d088:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d08a:	e135      	b.n	d2f8 <am_util_stdio_vsprintf+0x5e4>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d08c:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    d090:	2b00      	cmp	r3, #0
    d092:	d009      	beq.n	d0a8 <am_util_stdio_vsprintf+0x394>
    d094:	9b01      	ldr	r3, [sp, #4]
    d096:	3307      	adds	r3, #7
    d098:	f023 0307 	bic.w	r3, r3, #7
    d09c:	f103 0208 	add.w	r2, r3, #8
    d0a0:	9201      	str	r2, [sp, #4]
    d0a2:	e9d3 6700 	ldrd	r6, r7, [r3]
    d0a6:	e006      	b.n	d0b6 <am_util_stdio_vsprintf+0x3a2>
                                      va_arg(pArgs, uint32_t);
    d0a8:	9b01      	ldr	r3, [sp, #4]
    d0aa:	1d1a      	adds	r2, r3, #4
    d0ac:	9201      	str	r2, [sp, #4]
    d0ae:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d0b0:	2200      	movs	r2, #0
    d0b2:	461e      	mov	r6, r3
    d0b4:	4617      	mov	r7, r2
    d0b6:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48

                if ( iWidth )
    d0ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d0bc:	2b00      	cmp	r3, #0
    d0be:	d01e      	beq.n	d0fe <am_util_stdio_vsprintf+0x3ea>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    d0c0:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d0c4:	f7ff fba8 	bl	c818 <ndigits_in_u64>
    d0c8:	4602      	mov	r2, r0
    d0ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d0cc:	1a9b      	subs	r3, r3, r2
    d0ce:	9310      	str	r3, [sp, #64]	; 0x40

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d0d0:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d0d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d0d6:	4619      	mov	r1, r3
    d0d8:	9803      	ldr	r0, [sp, #12]
    d0da:	f7ff fcfa 	bl	cad2 <padbuffer>
    d0de:	9010      	str	r0, [sp, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    d0e0:	9b03      	ldr	r3, [sp, #12]
    d0e2:	2b00      	cmp	r3, #0
    d0e4:	d001      	beq.n	d0ea <am_util_stdio_vsprintf+0x3d6>
    d0e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d0e8:	e000      	b.n	d0ec <am_util_stdio_vsprintf+0x3d8>
    d0ea:	2300      	movs	r3, #0
    d0ec:	9a03      	ldr	r2, [sp, #12]
    d0ee:	4413      	add	r3, r2
    d0f0:	9303      	str	r3, [sp, #12]
                    ui32CharCnt += iWidth;
    d0f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d0f4:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d0f6:	4413      	add	r3, r2
    d0f8:	9311      	str	r3, [sp, #68]	; 0x44
                    iWidth = 0;
    d0fa:	2300      	movs	r3, #0
    d0fc:	9310      	str	r3, [sp, #64]	; 0x40
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    d0fe:	9a03      	ldr	r2, [sp, #12]
    d100:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d104:	f7ff fc2a 	bl	c95c <uint64_to_str>
    d108:	900f      	str	r0, [sp, #60]	; 0x3c

                if ( pcBuf )
    d10a:	9b03      	ldr	r3, [sp, #12]
    d10c:	2b00      	cmp	r3, #0
    d10e:	d003      	beq.n	d118 <am_util_stdio_vsprintf+0x404>
                {
                    pcBuf += iVal;
    d110:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d112:	9a03      	ldr	r2, [sp, #12]
    d114:	4413      	add	r3, r2
    d116:	9303      	str	r3, [sp, #12]
                }

                ui32CharCnt += iVal;
    d118:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d11a:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d11c:	4413      	add	r3, r2
    d11e:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d120:	e0ea      	b.n	d2f8 <am_util_stdio_vsprintf+0x5e4>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    d122:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    d126:	2b00      	cmp	r3, #0
    d128:	d009      	beq.n	d13e <am_util_stdio_vsprintf+0x42a>
    d12a:	9b01      	ldr	r3, [sp, #4]
    d12c:	3307      	adds	r3, #7
    d12e:	f023 0307 	bic.w	r3, r3, #7
    d132:	f103 0208 	add.w	r2, r3, #8
    d136:	9201      	str	r2, [sp, #4]
    d138:	e9d3 8900 	ldrd	r8, r9, [r3]
    d13c:	e006      	b.n	d14c <am_util_stdio_vsprintf+0x438>
                                     va_arg(pArgs, int32_t);
    d13e:	9b01      	ldr	r3, [sp, #4]
    d140:	1d1a      	adds	r2, r3, #4
    d142:	9201      	str	r2, [sp, #4]
    d144:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    d146:	17da      	asrs	r2, r3, #31
    d148:	4698      	mov	r8, r3
    d14a:	4691      	mov	r9, r2
    d14c:	e9cd 8908 	strd	r8, r9, [sp, #32]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    d150:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    d154:	2b00      	cmp	r3, #0
    d156:	da0c      	bge.n	d172 <am_util_stdio_vsprintf+0x45e>
                {
                    ui64Val = -i64Val;          // Get absolute value
    d158:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    d15c:	2100      	movs	r1, #0
    d15e:	f1d2 0a00 	rsbs	sl, r2, #0
    d162:	eb61 0b03 	sbc.w	fp, r1, r3
    d166:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
                    bNeg = true;
    d16a:	2301      	movs	r3, #1
    d16c:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
    d170:	e006      	b.n	d180 <am_util_stdio_vsprintf+0x46c>
                }
                else
                {
                    ui64Val = i64Val;
    d172:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    d176:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
                    bNeg = false;
    d17a:	2300      	movs	r3, #0
    d17c:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
                }

                if ( iWidth )
    d180:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d182:	2b00      	cmp	r3, #0
    d184:	d04a      	beq.n	d21c <am_util_stdio_vsprintf+0x508>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    d186:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    d18a:	4610      	mov	r0, r2
    d18c:	4619      	mov	r1, r3
    d18e:	f7ff fb63 	bl	c858 <ndigits_in_i64>
    d192:	4602      	mov	r2, r0
    d194:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d196:	1a9b      	subs	r3, r3, r2
    d198:	9310      	str	r3, [sp, #64]	; 0x40

                    if ( bNeg )
    d19a:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    d19e:	2b00      	cmp	r3, #0
    d1a0:	d011      	beq.n	d1c6 <am_util_stdio_vsprintf+0x4b2>
                    {
                        --iWidth;
    d1a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d1a4:	3b01      	subs	r3, #1
    d1a6:	9310      	str	r3, [sp, #64]	; 0x40

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    d1a8:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d1ac:	2b30      	cmp	r3, #48	; 0x30
    d1ae:	d10a      	bne.n	d1c6 <am_util_stdio_vsprintf+0x4b2>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    d1b0:	9b03      	ldr	r3, [sp, #12]
    d1b2:	2b00      	cmp	r3, #0
    d1b4:	d004      	beq.n	d1c0 <am_util_stdio_vsprintf+0x4ac>
                            {
                                *pcBuf++ = '-';
    d1b6:	9b03      	ldr	r3, [sp, #12]
    d1b8:	1c5a      	adds	r2, r3, #1
    d1ba:	9203      	str	r2, [sp, #12]
    d1bc:	222d      	movs	r2, #45	; 0x2d
    d1be:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    d1c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d1c2:	3301      	adds	r3, #1
    d1c4:	9311      	str	r3, [sp, #68]	; 0x44
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d1c6:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d1ca:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d1cc:	4619      	mov	r1, r3
    d1ce:	9803      	ldr	r0, [sp, #12]
    d1d0:	f7ff fc7f 	bl	cad2 <padbuffer>
    d1d4:	9010      	str	r0, [sp, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    d1d6:	9b03      	ldr	r3, [sp, #12]
    d1d8:	2b00      	cmp	r3, #0
    d1da:	d001      	beq.n	d1e0 <am_util_stdio_vsprintf+0x4cc>
    d1dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d1de:	e000      	b.n	d1e2 <am_util_stdio_vsprintf+0x4ce>
    d1e0:	2300      	movs	r3, #0
    d1e2:	9a03      	ldr	r2, [sp, #12]
    d1e4:	4413      	add	r3, r2
    d1e6:	9303      	str	r3, [sp, #12]
                    ui32CharCnt += iWidth;
    d1e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d1ea:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d1ec:	4413      	add	r3, r2
    d1ee:	9311      	str	r3, [sp, #68]	; 0x44
                    iWidth = 0;
    d1f0:	2300      	movs	r3, #0
    d1f2:	9310      	str	r3, [sp, #64]	; 0x40

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    d1f4:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    d1f8:	2b00      	cmp	r3, #0
    d1fa:	d01e      	beq.n	d23a <am_util_stdio_vsprintf+0x526>
    d1fc:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d200:	2b20      	cmp	r3, #32
    d202:	d11a      	bne.n	d23a <am_util_stdio_vsprintf+0x526>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    d204:	9b03      	ldr	r3, [sp, #12]
    d206:	2b00      	cmp	r3, #0
    d208:	d004      	beq.n	d214 <am_util_stdio_vsprintf+0x500>
                        {
                            *pcBuf++ = '-';
    d20a:	9b03      	ldr	r3, [sp, #12]
    d20c:	1c5a      	adds	r2, r3, #1
    d20e:	9203      	str	r2, [sp, #12]
    d210:	222d      	movs	r2, #45	; 0x2d
    d212:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    d214:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d216:	3301      	adds	r3, #1
    d218:	9311      	str	r3, [sp, #68]	; 0x44
    d21a:	e00e      	b.n	d23a <am_util_stdio_vsprintf+0x526>
                    }
                }
                else
                {
                    if ( bNeg )
    d21c:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    d220:	2b00      	cmp	r3, #0
    d222:	d00a      	beq.n	d23a <am_util_stdio_vsprintf+0x526>
                    {
                        if ( pcBuf )
    d224:	9b03      	ldr	r3, [sp, #12]
    d226:	2b00      	cmp	r3, #0
    d228:	d004      	beq.n	d234 <am_util_stdio_vsprintf+0x520>
                        {
                            *pcBuf++ = '-';
    d22a:	9b03      	ldr	r3, [sp, #12]
    d22c:	1c5a      	adds	r2, r3, #1
    d22e:	9203      	str	r2, [sp, #12]
    d230:	222d      	movs	r2, #45	; 0x2d
    d232:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    d234:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d236:	3301      	adds	r3, #1
    d238:	9311      	str	r3, [sp, #68]	; 0x44
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    d23a:	9a03      	ldr	r2, [sp, #12]
    d23c:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d240:	f7ff fb8c 	bl	c95c <uint64_to_str>
    d244:	900f      	str	r0, [sp, #60]	; 0x3c

                if ( pcBuf )
    d246:	9b03      	ldr	r3, [sp, #12]
    d248:	2b00      	cmp	r3, #0
    d24a:	d003      	beq.n	d254 <am_util_stdio_vsprintf+0x540>
                {
                    pcBuf += iVal;
    d24c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d24e:	9a03      	ldr	r2, [sp, #12]
    d250:	4413      	add	r3, r2
    d252:	9303      	str	r3, [sp, #12]
                }

                ui32CharCnt += iVal;
    d254:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d256:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d258:	4413      	add	r3, r2
    d25a:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d25c:	e04c      	b.n	d2f8 <am_util_stdio_vsprintf+0x5e4>


            case 'f':
            case 'F':
                if ( pcBuf )
    d25e:	9b03      	ldr	r3, [sp, #12]
    d260:	2b00      	cmp	r3, #0
    d262:	d048      	beq.n	d2f6 <am_util_stdio_vsprintf+0x5e2>
                {
                    float fValue = va_arg(pArgs, double);
    d264:	9b01      	ldr	r3, [sp, #4]
    d266:	3307      	adds	r3, #7
    d268:	f023 0307 	bic.w	r3, r3, #7
    d26c:	f103 0208 	add.w	r2, r3, #8
    d270:	9201      	str	r2, [sp, #4]
    d272:	e9d3 2300 	ldrd	r2, r3, [r3]
    d276:	4610      	mov	r0, r2
    d278:	4619      	mov	r1, r3
    d27a:	f7fe ff41 	bl	c100 <__aeabi_d2f>
    d27e:	4603      	mov	r3, r0
    d280:	9306      	str	r3, [sp, #24]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    d282:	9b03      	ldr	r3, [sp, #12]
    d284:	2214      	movs	r2, #20
    d286:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    d288:	990e      	ldr	r1, [sp, #56]	; 0x38
    d28a:	9803      	ldr	r0, [sp, #12]
    d28c:	ed9d 0a06 	vldr	s0, [sp, #24]
    d290:	f7ff fc42 	bl	cb18 <ftoa>
    d294:	900f      	str	r0, [sp, #60]	; 0x3c
                    if ( iVal < 0 )
    d296:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d298:	2b00      	cmp	r3, #0
    d29a:	da14      	bge.n	d2c6 <am_util_stdio_vsprintf+0x5b2>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    d29c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d29e:	f1b3 3fff 	cmp.w	r3, #4294967295
    d2a2:	d102      	bne.n	d2aa <am_util_stdio_vsprintf+0x596>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    d2a4:	4b1e      	ldr	r3, [pc, #120]	; (d320 <am_util_stdio_vsprintf+0x60c>)
    d2a6:	930c      	str	r3, [sp, #48]	; 0x30
    d2a8:	e008      	b.n	d2bc <am_util_stdio_vsprintf+0x5a8>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    d2aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d2ac:	f113 0f02 	cmn.w	r3, #2
    d2b0:	d102      	bne.n	d2b8 <am_util_stdio_vsprintf+0x5a4>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    d2b2:	4b1c      	ldr	r3, [pc, #112]	; (d324 <am_util_stdio_vsprintf+0x610>)
    d2b4:	930c      	str	r3, [sp, #48]	; 0x30
    d2b6:	e001      	b.n	d2bc <am_util_stdio_vsprintf+0x5a8>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    d2b8:	4b1b      	ldr	r3, [pc, #108]	; (d328 <am_util_stdio_vsprintf+0x614>)
    d2ba:	930c      	str	r3, [sp, #48]	; 0x30
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    d2bc:	9b03      	ldr	r3, [sp, #12]
    d2be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d2c0:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    d2c2:	2303      	movs	r3, #3
    d2c4:	930f      	str	r3, [sp, #60]	; 0x3c
                    }
                    ui32CharCnt += iVal;
    d2c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d2c8:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d2ca:	4413      	add	r3, r2
    d2cc:	9311      	str	r3, [sp, #68]	; 0x44
                    pcBuf += iVal;
    d2ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d2d0:	9a03      	ldr	r2, [sp, #12]
    d2d2:	4413      	add	r3, r2
    d2d4:	9303      	str	r3, [sp, #12]
                }
                break;
    d2d6:	e00e      	b.n	d2f6 <am_util_stdio_vsprintf+0x5e2>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    d2d8:	9b03      	ldr	r3, [sp, #12]
    d2da:	2b00      	cmp	r3, #0
    d2dc:	d005      	beq.n	d2ea <am_util_stdio_vsprintf+0x5d6>
                {
                    *pcBuf++ = *pcFmt;
    d2de:	9b03      	ldr	r3, [sp, #12]
    d2e0:	1c5a      	adds	r2, r3, #1
    d2e2:	9203      	str	r2, [sp, #12]
    d2e4:	9a02      	ldr	r2, [sp, #8]
    d2e6:	7812      	ldrb	r2, [r2, #0]
    d2e8:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    d2ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d2ec:	3301      	adds	r3, #1
    d2ee:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d2f0:	e002      	b.n	d2f8 <am_util_stdio_vsprintf+0x5e4>
                break;
    d2f2:	bf00      	nop
    d2f4:	e000      	b.n	d2f8 <am_util_stdio_vsprintf+0x5e4>
                break;
    d2f6:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    d2f8:	9b02      	ldr	r3, [sp, #8]
    d2fa:	3301      	adds	r3, #1
    d2fc:	9302      	str	r3, [sp, #8]
    while ( *pcFmt != 0x0 )
    d2fe:	9b02      	ldr	r3, [sp, #8]
    d300:	781b      	ldrb	r3, [r3, #0]
    d302:	2b00      	cmp	r3, #0
    d304:	f47f ad11 	bne.w	cd2a <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    d308:	9b03      	ldr	r3, [sp, #12]
    d30a:	2b00      	cmp	r3, #0
    d30c:	d002      	beq.n	d314 <am_util_stdio_vsprintf+0x600>
    {
        *pcBuf = 0x0;
    d30e:	9b03      	ldr	r3, [sp, #12]
    d310:	2200      	movs	r2, #0
    d312:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    d314:	9b11      	ldr	r3, [sp, #68]	; 0x44
}
    d316:	4618      	mov	r0, r3
    d318:	b017      	add	sp, #92	; 0x5c
    d31a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d31e:	bf00      	nop
    d320:	00302e30 	.word	0x00302e30
    d324:	00232e23 	.word	0x00232e23
    d328:	003f2e3f 	.word	0x003f2e3f

0000d32c <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    d32c:	b40f      	push	{r0, r1, r2, r3}
    d32e:	b500      	push	{lr}
    d330:	b083      	sub	sp, #12
    uint32_t ui32NumChars;

    if (!g_pfnCharPrint)
    d332:	4b0c      	ldr	r3, [pc, #48]	; (d364 <am_util_stdio_printf+0x38>)
    d334:	681b      	ldr	r3, [r3, #0]
    d336:	2b00      	cmp	r3, #0
    d338:	d101      	bne.n	d33e <am_util_stdio_printf+0x12>
    {
        return 0;
    d33a:	2300      	movs	r3, #0
    d33c:	e00c      	b.n	d358 <am_util_stdio_printf+0x2c>

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    d33e:	ab05      	add	r3, sp, #20
    d340:	9300      	str	r3, [sp, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d342:	9a00      	ldr	r2, [sp, #0]
    d344:	9904      	ldr	r1, [sp, #16]
    d346:	4808      	ldr	r0, [pc, #32]	; (d368 <am_util_stdio_printf+0x3c>)
    d348:	f7ff fce4 	bl	cd14 <am_util_stdio_vsprintf>
    d34c:	9001      	str	r0, [sp, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    d34e:	4b05      	ldr	r3, [pc, #20]	; (d364 <am_util_stdio_printf+0x38>)
    d350:	681b      	ldr	r3, [r3, #0]
    d352:	4805      	ldr	r0, [pc, #20]	; (d368 <am_util_stdio_printf+0x3c>)
    d354:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    d356:	9b01      	ldr	r3, [sp, #4]
}
    d358:	4618      	mov	r0, r3
    d35a:	b003      	add	sp, #12
    d35c:	f85d eb04 	ldr.w	lr, [sp], #4
    d360:	b004      	add	sp, #16
    d362:	4770      	bx	lr
    d364:	10001048 	.word	0x10001048
    d368:	1000104c 	.word	0x1000104c

0000d36c <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
    d36c:	b508      	push	{r3, lr}
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    d36e:	4802      	ldr	r0, [pc, #8]	; (d378 <am_util_stdio_terminal_clear+0xc>)
    d370:	f7ff ffdc 	bl	d32c <am_util_stdio_printf>
}
    d374:	bf00      	nop
    d376:	bd08      	pop	{r3, pc}
    d378:	0000ec1c 	.word	0x0000ec1c

0000d37c <Reset_Handler>:
Reset_Handler(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
    d37c:	4811      	ldr	r0, [pc, #68]	; (d3c4 <zero_loop+0x12>)
    d37e:	4912      	ldr	r1, [pc, #72]	; (d3c8 <zero_loop+0x16>)
    d380:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
    d382:	f8d1 d000 	ldr.w	sp, [r1]

#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
    d386:	4811      	ldr	r0, [pc, #68]	; (d3cc <zero_loop+0x1a>)
    d388:	6801      	ldr	r1, [r0, #0]
    d38a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    d38e:	6001      	str	r1, [r0, #0]
    d390:	f3bf 8f4f 	dsb	sy
    d394:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
    d398:	480d      	ldr	r0, [pc, #52]	; (d3d0 <zero_loop+0x1e>)
    d39a:	490e      	ldr	r1, [pc, #56]	; (d3d4 <zero_loop+0x22>)
    d39c:	4a0e      	ldr	r2, [pc, #56]	; (d3d8 <zero_loop+0x26>)

0000d39e <copy_loop>:
    d39e:	f850 3b04 	ldr.w	r3, [r0], #4
    d3a2:	f841 3b04 	str.w	r3, [r1], #4
    d3a6:	4291      	cmp	r1, r2
    d3a8:	dbf9      	blt.n	d39e <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
    d3aa:	480c      	ldr	r0, [pc, #48]	; (d3dc <zero_loop+0x2a>)
    d3ac:	490c      	ldr	r1, [pc, #48]	; (d3e0 <zero_loop+0x2e>)
    d3ae:	f04f 0200 	mov.w	r2, #0

0000d3b2 <zero_loop>:
    d3b2:	4288      	cmp	r0, r1
    d3b4:	bfb8      	it	lt
    d3b6:	f840 2b04 	strlt.w	r2, [r0], #4
    d3ba:	dbfa      	blt.n	d3b2 <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
    d3bc:	f7ff f82c 	bl	c418 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
    d3c0:	be00      	bkpt	0x0000
}
    d3c2:	bf00      	nop
    d3c4:	e000ed08 	.word	0xe000ed08
    d3c8:	0000c000 	.word	0x0000c000
    d3cc:	e000ed88 	.word	0xe000ed88
    d3d0:	0000f08c 	.word	0x0000f08c
    d3d4:	10001000 	.word	0x10001000
    d3d8:	10001044 	.word	0x10001044
    d3dc:	10001044 	.word	0x10001044
    d3e0:	100011b0 	.word	0x100011b0

0000d3e4 <NMI_Handler>:
NMI_Handler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    d3e4:	e7fe      	b.n	d3e4 <NMI_Handler>

0000d3e6 <BusFault_Handler>:
HardFault_Handler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    d3e6:	e7fe      	b.n	d3e6 <BusFault_Handler>

0000d3e8 <DebugMon_Handler>:
am_default_isr(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    d3e8:	e7fe      	b.n	d3e8 <DebugMon_Handler>
	...

0000d3ec <am_hal_adc_initialize>:
    d3ec:	2800      	cmp	r0, #0
    d3ee:	d136      	bne.n	d45e <am_hal_adc_initialize+0x72>
    d3f0:	2900      	cmp	r1, #0
    d3f2:	d036      	beq.n	d462 <am_hal_adc_initialize+0x76>
    d3f4:	b538      	push	{r3, r4, r5, lr}
    d3f6:	4b1c      	ldr	r3, [pc, #112]	; (d468 <am_hal_adc_initialize+0x7c>)
    d3f8:	78d8      	ldrb	r0, [r3, #3]
    d3fa:	f010 0501 	ands.w	r5, r0, #1
    d3fe:	d123      	bne.n	d448 <am_hal_adc_initialize+0x5c>
    d400:	681a      	ldr	r2, [r3, #0]
    d402:	481a      	ldr	r0, [pc, #104]	; (d46c <am_hal_adc_initialize+0x80>)
    d404:	4c1a      	ldr	r4, [pc, #104]	; (d470 <am_hal_adc_initialize+0x84>)
    d406:	f002 427e 	and.w	r2, r2, #4261412864	; 0xfe000000
    d40a:	4302      	orrs	r2, r0
    d40c:	4819      	ldr	r0, [pc, #100]	; (d474 <am_hal_adc_initialize+0x88>)
    d40e:	e9c3 2500 	strd	r2, r5, [r3]
    d412:	6005      	str	r5, [r0, #0]
    d414:	600b      	str	r3, [r1, #0]
    d416:	4818      	ldr	r0, [pc, #96]	; (d478 <am_hal_adc_initialize+0x8c>)
    d418:	f000 fdcc 	bl	dfb4 <am_hal_flash_load_ui32>
    d41c:	6020      	str	r0, [r4, #0]
    d41e:	4817      	ldr	r0, [pc, #92]	; (d47c <am_hal_adc_initialize+0x90>)
    d420:	f000 fdc8 	bl	dfb4 <am_hal_flash_load_ui32>
    d424:	4603      	mov	r3, r0
    d426:	4816      	ldr	r0, [pc, #88]	; (d480 <am_hal_adc_initialize+0x94>)
    d428:	6063      	str	r3, [r4, #4]
    d42a:	f000 fdc3 	bl	dfb4 <am_hal_flash_load_ui32>
    d42e:	6823      	ldr	r3, [r4, #0]
    d430:	60a0      	str	r0, [r4, #8]
    d432:	3301      	adds	r3, #1
    d434:	d00a      	beq.n	d44c <am_hal_adc_initialize+0x60>
    d436:	6863      	ldr	r3, [r4, #4]
    d438:	3301      	adds	r3, #1
    d43a:	d007      	beq.n	d44c <am_hal_adc_initialize+0x60>
    d43c:	3001      	adds	r0, #1
    d43e:	d005      	beq.n	d44c <am_hal_adc_initialize+0x60>
    d440:	2301      	movs	r3, #1
    d442:	7323      	strb	r3, [r4, #12]
    d444:	4628      	mov	r0, r5
    d446:	bd38      	pop	{r3, r4, r5, pc}
    d448:	2007      	movs	r0, #7
    d44a:	bd38      	pop	{r3, r4, r5, pc}
    d44c:	490d      	ldr	r1, [pc, #52]	; (d484 <am_hal_adc_initialize+0x98>)
    d44e:	4a0e      	ldr	r2, [pc, #56]	; (d488 <am_hal_adc_initialize+0x9c>)
    d450:	4b0e      	ldr	r3, [pc, #56]	; (d48c <am_hal_adc_initialize+0xa0>)
    d452:	6021      	str	r1, [r4, #0]
    d454:	2000      	movs	r0, #0
    d456:	6062      	str	r2, [r4, #4]
    d458:	60a3      	str	r3, [r4, #8]
    d45a:	7320      	strb	r0, [r4, #12]
    d45c:	bd38      	pop	{r3, r4, r5, pc}
    d45e:	2005      	movs	r0, #5
    d460:	4770      	bx	lr
    d462:	2006      	movs	r0, #6
    d464:	4770      	bx	lr
    d466:	bf00      	nop
    d468:	10001154 	.word	0x10001154
    d46c:	01afafaf 	.word	0x01afafaf
    d470:	10001194 	.word	0x10001194
    d474:	10001150 	.word	0x10001150
    d478:	50023840 	.word	0x50023840
    d47c:	50023844 	.word	0x50023844
    d480:	50023848 	.word	0x50023848
    d484:	4395c000 	.word	0x4395c000
    d488:	3f839874 	.word	0x3f839874
    d48c:	bb8c47a1 	.word	0xbb8c47a1

0000d490 <am_hal_adc_deinitialize>:
    d490:	4603      	mov	r3, r0
    d492:	b1b8      	cbz	r0, d4c4 <am_hal_adc_deinitialize+0x34>
    d494:	6802      	ldr	r2, [r0, #0]
    d496:	490c      	ldr	r1, [pc, #48]	; (d4c8 <am_hal_adc_deinitialize+0x38>)
    d498:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    d49c:	428a      	cmp	r2, r1
    d49e:	d111      	bne.n	d4c4 <am_hal_adc_deinitialize+0x34>
    d4a0:	78c2      	ldrb	r2, [r0, #3]
    d4a2:	0792      	lsls	r2, r2, #30
    d4a4:	d508      	bpl.n	d4b8 <am_hal_adc_deinitialize+0x28>
    d4a6:	4a09      	ldr	r2, [pc, #36]	; (d4cc <am_hal_adc_deinitialize+0x3c>)
    d4a8:	6811      	ldr	r1, [r2, #0]
    d4aa:	f36f 0100 	bfc	r1, #0, #1
    d4ae:	6011      	str	r1, [r2, #0]
    d4b0:	78c2      	ldrb	r2, [r0, #3]
    d4b2:	f36f 0241 	bfc	r2, #1, #1
    d4b6:	70c2      	strb	r2, [r0, #3]
    d4b8:	78da      	ldrb	r2, [r3, #3]
    d4ba:	f36f 0200 	bfc	r2, #0, #1
    d4be:	2000      	movs	r0, #0
    d4c0:	70da      	strb	r2, [r3, #3]
    d4c2:	4770      	bx	lr
    d4c4:	2002      	movs	r0, #2
    d4c6:	4770      	bx	lr
    d4c8:	01afafaf 	.word	0x01afafaf
    d4cc:	50010000 	.word	0x50010000

0000d4d0 <am_hal_adc_configure>:
    d4d0:	6803      	ldr	r3, [r0, #0]
    d4d2:	4a1b      	ldr	r2, [pc, #108]	; (d540 <am_hal_adc_configure+0x70>)
    d4d4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    d4d8:	4293      	cmp	r3, r2
    d4da:	d12e      	bne.n	d53a <am_hal_adc_configure+0x6a>
    d4dc:	b500      	push	{lr}
    d4de:	780b      	ldrb	r3, [r1, #0]
    d4e0:	7988      	ldrb	r0, [r1, #6]
    d4e2:	784a      	ldrb	r2, [r1, #1]
    d4e4:	f891 e002 	ldrb.w	lr, [r1, #2]
    d4e8:	f891 c003 	ldrb.w	ip, [r1, #3]
    d4ec:	061b      	lsls	r3, r3, #24
    d4ee:	0080      	lsls	r0, r0, #2
    d4f0:	f000 0004 	and.w	r0, r0, #4
    d4f4:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
    d4f8:	04d2      	lsls	r2, r2, #19
    d4fa:	4303      	orrs	r3, r0
    d4fc:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
    d500:	7908      	ldrb	r0, [r1, #4]
    d502:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
    d506:	4313      	orrs	r3, r2
    d508:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
    d50c:	794a      	ldrb	r2, [r1, #5]
    d50e:	f40e 21e0 	and.w	r1, lr, #458752	; 0x70000
    d512:	430b      	orrs	r3, r1
    d514:	f40c 7c40 	and.w	ip, ip, #768	; 0x300
    d518:	0101      	lsls	r1, r0, #4
    d51a:	ea43 030c 	orr.w	r3, r3, ip
    d51e:	f001 0110 	and.w	r1, r1, #16
    d522:	00d2      	lsls	r2, r2, #3
    d524:	430b      	orrs	r3, r1
    d526:	f002 0208 	and.w	r2, r2, #8
    d52a:	4906      	ldr	r1, [pc, #24]	; (d544 <am_hal_adc_configure+0x74>)
    d52c:	4313      	orrs	r3, r2
    d52e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    d532:	600b      	str	r3, [r1, #0]
    d534:	2000      	movs	r0, #0
    d536:	f85d fb04 	ldr.w	pc, [sp], #4
    d53a:	2002      	movs	r0, #2
    d53c:	4770      	bx	lr
    d53e:	bf00      	nop
    d540:	01afafaf 	.word	0x01afafaf
    d544:	50010000 	.word	0x50010000

0000d548 <am_hal_adc_configure_slot>:
    d548:	6803      	ldr	r3, [r0, #0]
    d54a:	b410      	push	{r4}
    d54c:	4c18      	ldr	r4, [pc, #96]	; (d5b0 <am_hal_adc_configure_slot+0x68>)
    d54e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    d552:	42a3      	cmp	r3, r4
    d554:	d123      	bne.n	d59e <am_hal_adc_configure_slot+0x56>
    d556:	2907      	cmp	r1, #7
    d558:	d825      	bhi.n	d5a6 <am_hal_adc_configure_slot+0x5e>
    d55a:	7810      	ldrb	r0, [r2, #0]
    d55c:	78d4      	ldrb	r4, [r2, #3]
    d55e:	7913      	ldrb	r3, [r2, #4]
    d560:	f892 c001 	ldrb.w	ip, [r2, #1]
    d564:	0600      	lsls	r0, r0, #24
    d566:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
    d56a:	f000 60e0 	and.w	r0, r0, #117440512	; 0x7000000
    d56e:	4303      	orrs	r3, r0
    d570:	7890      	ldrb	r0, [r2, #2]
    d572:	4a10      	ldr	r2, [pc, #64]	; (d5b4 <am_hal_adc_configure_slot+0x6c>)
    d574:	4c10      	ldr	r4, [pc, #64]	; (d5b8 <am_hal_adc_configure_slot+0x70>)
    d576:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
    d57a:	0200      	lsls	r0, r0, #8
    d57c:	440a      	add	r2, r1
    d57e:	f40c 3c40 	and.w	ip, ip, #196608	; 0x30000
    d582:	f400 6170 	and.w	r1, r0, #3840	; 0xf00
    d586:	ea43 030c 	orr.w	r3, r3, ip
    d58a:	0092      	lsls	r2, r2, #2
    d58c:	430b      	orrs	r3, r1
    d58e:	6013      	str	r3, [r2, #0]
    d590:	6823      	ldr	r3, [r4, #0]
    d592:	3301      	adds	r3, #1
    d594:	2000      	movs	r0, #0
    d596:	6023      	str	r3, [r4, #0]
    d598:	f85d 4b04 	ldr.w	r4, [sp], #4
    d59c:	4770      	bx	lr
    d59e:	2002      	movs	r0, #2
    d5a0:	f85d 4b04 	ldr.w	r4, [sp], #4
    d5a4:	4770      	bx	lr
    d5a6:	2005      	movs	r0, #5
    d5a8:	f85d 4b04 	ldr.w	r4, [sp], #4
    d5ac:	4770      	bx	lr
    d5ae:	bf00      	nop
    d5b0:	01afafaf 	.word	0x01afafaf
    d5b4:	14004003 	.word	0x14004003
    d5b8:	10001150 	.word	0x10001150

0000d5bc <am_hal_adc_enable>:
    d5bc:	6802      	ldr	r2, [r0, #0]
    d5be:	490c      	ldr	r1, [pc, #48]	; (d5f0 <am_hal_adc_enable+0x34>)
    d5c0:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    d5c4:	428a      	cmp	r2, r1
    d5c6:	4603      	mov	r3, r0
    d5c8:	d10f      	bne.n	d5ea <am_hal_adc_enable+0x2e>
    d5ca:	78c0      	ldrb	r0, [r0, #3]
    d5cc:	f010 0002 	ands.w	r0, r0, #2
    d5d0:	d109      	bne.n	d5e6 <am_hal_adc_enable+0x2a>
    d5d2:	4908      	ldr	r1, [pc, #32]	; (d5f4 <am_hal_adc_enable+0x38>)
    d5d4:	680a      	ldr	r2, [r1, #0]
    d5d6:	f042 0201 	orr.w	r2, r2, #1
    d5da:	600a      	str	r2, [r1, #0]
    d5dc:	78da      	ldrb	r2, [r3, #3]
    d5de:	f042 0202 	orr.w	r2, r2, #2
    d5e2:	70da      	strb	r2, [r3, #3]
    d5e4:	4770      	bx	lr
    d5e6:	2000      	movs	r0, #0
    d5e8:	4770      	bx	lr
    d5ea:	2002      	movs	r0, #2
    d5ec:	4770      	bx	lr
    d5ee:	bf00      	nop
    d5f0:	01afafaf 	.word	0x01afafaf
    d5f4:	50010000 	.word	0x50010000

0000d5f8 <am_hal_adc_disable>:
    d5f8:	6802      	ldr	r2, [r0, #0]
    d5fa:	4909      	ldr	r1, [pc, #36]	; (d620 <am_hal_adc_disable+0x28>)
    d5fc:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    d600:	428a      	cmp	r2, r1
    d602:	4603      	mov	r3, r0
    d604:	d10a      	bne.n	d61c <am_hal_adc_disable+0x24>
    d606:	4a07      	ldr	r2, [pc, #28]	; (d624 <am_hal_adc_disable+0x2c>)
    d608:	6811      	ldr	r1, [r2, #0]
    d60a:	f36f 0100 	bfc	r1, #0, #1
    d60e:	6011      	str	r1, [r2, #0]
    d610:	78da      	ldrb	r2, [r3, #3]
    d612:	f36f 0241 	bfc	r2, #1, #1
    d616:	2000      	movs	r0, #0
    d618:	70da      	strb	r2, [r3, #3]
    d61a:	4770      	bx	lr
    d61c:	2002      	movs	r0, #2
    d61e:	4770      	bx	lr
    d620:	01afafaf 	.word	0x01afafaf
    d624:	50010000 	.word	0x50010000

0000d628 <am_hal_adc_interrupt_enable>:
    d628:	6803      	ldr	r3, [r0, #0]
    d62a:	4a07      	ldr	r2, [pc, #28]	; (d648 <am_hal_adc_interrupt_enable+0x20>)
    d62c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    d630:	4293      	cmp	r3, r2
    d632:	d107      	bne.n	d644 <am_hal_adc_interrupt_enable+0x1c>
    d634:	4a05      	ldr	r2, [pc, #20]	; (d64c <am_hal_adc_interrupt_enable+0x24>)
    d636:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    d63a:	4319      	orrs	r1, r3
    d63c:	2000      	movs	r0, #0
    d63e:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    d642:	4770      	bx	lr
    d644:	2002      	movs	r0, #2
    d646:	4770      	bx	lr
    d648:	01afafaf 	.word	0x01afafaf
    d64c:	50010000 	.word	0x50010000

0000d650 <am_hal_adc_interrupt_status>:
    d650:	6803      	ldr	r3, [r0, #0]
    d652:	b410      	push	{r4}
    d654:	4c0e      	ldr	r4, [pc, #56]	; (d690 <am_hal_adc_interrupt_status+0x40>)
    d656:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    d65a:	42a3      	cmp	r3, r4
    d65c:	d113      	bne.n	d686 <am_hal_adc_interrupt_status+0x36>
    d65e:	b93a      	cbnz	r2, d670 <am_hal_adc_interrupt_status+0x20>
    d660:	4b0c      	ldr	r3, [pc, #48]	; (d694 <am_hal_adc_interrupt_status+0x44>)
    d662:	f85d 4b04 	ldr.w	r4, [sp], #4
    d666:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    d66a:	600b      	str	r3, [r1, #0]
    d66c:	4610      	mov	r0, r2
    d66e:	4770      	bx	lr
    d670:	4a08      	ldr	r2, [pc, #32]	; (d694 <am_hal_adc_interrupt_status+0x44>)
    d672:	f8d2 4204 	ldr.w	r4, [r2, #516]	; 0x204
    d676:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    d67a:	4023      	ands	r3, r4
    d67c:	2000      	movs	r0, #0
    d67e:	f85d 4b04 	ldr.w	r4, [sp], #4
    d682:	600b      	str	r3, [r1, #0]
    d684:	4770      	bx	lr
    d686:	2002      	movs	r0, #2
    d688:	f85d 4b04 	ldr.w	r4, [sp], #4
    d68c:	4770      	bx	lr
    d68e:	bf00      	nop
    d690:	01afafaf 	.word	0x01afafaf
    d694:	50010000 	.word	0x50010000

0000d698 <am_hal_adc_interrupt_clear>:
    d698:	6803      	ldr	r3, [r0, #0]
    d69a:	4a05      	ldr	r2, [pc, #20]	; (d6b0 <am_hal_adc_interrupt_clear+0x18>)
    d69c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    d6a0:	4293      	cmp	r3, r2
    d6a2:	bf03      	ittte	eq
    d6a4:	4b03      	ldreq	r3, [pc, #12]	; (d6b4 <am_hal_adc_interrupt_clear+0x1c>)
    d6a6:	2000      	moveq	r0, #0
    d6a8:	f8c3 1208 	streq.w	r1, [r3, #520]	; 0x208
    d6ac:	2002      	movne	r0, #2
    d6ae:	4770      	bx	lr
    d6b0:	01afafaf 	.word	0x01afafaf
    d6b4:	50010000 	.word	0x50010000

0000d6b8 <am_hal_adc_samples_read>:
    d6b8:	6800      	ldr	r0, [r0, #0]
    d6ba:	b470      	push	{r4, r5, r6}
    d6bc:	4c2b      	ldr	r4, [pc, #172]	; (d76c <am_hal_adc_samples_read+0xb4>)
    d6be:	9d03      	ldr	r5, [sp, #12]
    d6c0:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
    d6c4:	42a0      	cmp	r0, r4
    d6c6:	d11c      	bne.n	d702 <am_hal_adc_samples_read+0x4a>
    d6c8:	2d00      	cmp	r5, #0
    d6ca:	d04d      	beq.n	d768 <am_hal_adc_samples_read+0xb0>
    d6cc:	2000      	movs	r0, #0
    d6ce:	681c      	ldr	r4, [r3, #0]
    d6d0:	6018      	str	r0, [r3, #0]
    d6d2:	b1ca      	cbz	r2, d708 <am_hal_adc_samples_read+0x50>
    d6d4:	f105 0108 	add.w	r1, r5, #8
    d6d8:	1f10      	subs	r0, r2, #4
    d6da:	f850 2f04 	ldr.w	r2, [r0, #4]!
    d6de:	3108      	adds	r1, #8
    d6e0:	f3c2 7202 	ubfx	r2, r2, #28, #3
    d6e4:	f841 2c0c 	str.w	r2, [r1, #-12]
    d6e8:	6802      	ldr	r2, [r0, #0]
    d6ea:	f3c2 128d 	ubfx	r2, r2, #6, #14
    d6ee:	f841 2c10 	str.w	r2, [r1, #-16]
    d6f2:	681a      	ldr	r2, [r3, #0]
    d6f4:	3201      	adds	r2, #1
    d6f6:	42a2      	cmp	r2, r4
    d6f8:	601a      	str	r2, [r3, #0]
    d6fa:	d3ee      	bcc.n	d6da <am_hal_adc_samples_read+0x22>
    d6fc:	2000      	movs	r0, #0
    d6fe:	bc70      	pop	{r4, r5, r6}
    d700:	4770      	bx	lr
    d702:	2002      	movs	r0, #2
    d704:	bc70      	pop	{r4, r5, r6}
    d706:	4770      	bx	lr
    d708:	4e19      	ldr	r6, [pc, #100]	; (d770 <am_hal_adc_samples_read+0xb8>)
    d70a:	b9b1      	cbnz	r1, d73a <am_hal_adc_samples_read+0x82>
    d70c:	f105 0108 	add.w	r1, r5, #8
    d710:	e001      	b.n	d716 <am_hal_adc_samples_read+0x5e>
    d712:	4294      	cmp	r4, r2
    d714:	d9f2      	bls.n	d6fc <am_hal_adc_samples_read+0x44>
    d716:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
    d718:	3108      	adds	r1, #8
    d71a:	f3c0 7202 	ubfx	r2, r0, #28, #3
    d71e:	f841 2c0c 	str.w	r2, [r1, #-12]
    d722:	f3c0 128d 	ubfx	r2, r0, #6, #14
    d726:	f841 2c10 	str.w	r2, [r1, #-16]
    d72a:	681a      	ldr	r2, [r3, #0]
    d72c:	f010 6f7f 	tst.w	r0, #267386880	; 0xff00000
    d730:	f102 0201 	add.w	r2, r2, #1
    d734:	601a      	str	r2, [r3, #0]
    d736:	d1ec      	bne.n	d712 <am_hal_adc_samples_read+0x5a>
    d738:	e7e0      	b.n	d6fc <am_hal_adc_samples_read+0x44>
    d73a:	f105 0108 	add.w	r1, r5, #8
    d73e:	e001      	b.n	d744 <am_hal_adc_samples_read+0x8c>
    d740:	42a2      	cmp	r2, r4
    d742:	d2db      	bcs.n	d6fc <am_hal_adc_samples_read+0x44>
    d744:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
    d746:	3108      	adds	r1, #8
    d748:	f3c0 7202 	ubfx	r2, r0, #28, #3
    d74c:	f841 2c0c 	str.w	r2, [r1, #-12]
    d750:	f3c0 0213 	ubfx	r2, r0, #0, #20
    d754:	f841 2c10 	str.w	r2, [r1, #-16]
    d758:	681a      	ldr	r2, [r3, #0]
    d75a:	f010 6f7f 	tst.w	r0, #267386880	; 0xff00000
    d75e:	f102 0201 	add.w	r2, r2, #1
    d762:	601a      	str	r2, [r3, #0]
    d764:	d1ec      	bne.n	d740 <am_hal_adc_samples_read+0x88>
    d766:	e7c9      	b.n	d6fc <am_hal_adc_samples_read+0x44>
    d768:	2006      	movs	r0, #6
    d76a:	e7c8      	b.n	d6fe <am_hal_adc_samples_read+0x46>
    d76c:	01afafaf 	.word	0x01afafaf
    d770:	50010000 	.word	0x50010000

0000d774 <am_hal_adc_sw_trigger>:
    d774:	6803      	ldr	r3, [r0, #0]
    d776:	4a06      	ldr	r2, [pc, #24]	; (d790 <am_hal_adc_sw_trigger+0x1c>)
    d778:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    d77c:	4293      	cmp	r3, r2
    d77e:	d104      	bne.n	d78a <am_hal_adc_sw_trigger+0x16>
    d780:	4b04      	ldr	r3, [pc, #16]	; (d794 <am_hal_adc_sw_trigger+0x20>)
    d782:	2237      	movs	r2, #55	; 0x37
    d784:	609a      	str	r2, [r3, #8]
    d786:	2000      	movs	r0, #0
    d788:	4770      	bx	lr
    d78a:	2002      	movs	r0, #2
    d78c:	4770      	bx	lr
    d78e:	bf00      	nop
    d790:	01afafaf 	.word	0x01afafaf
    d794:	50010000 	.word	0x50010000

0000d798 <am_hal_adc_power_control>:
    d798:	b510      	push	{r4, lr}
    d79a:	4604      	mov	r4, r0
    d79c:	4831      	ldr	r0, [pc, #196]	; (d864 <am_hal_adc_power_control+0xcc>)
    d79e:	6823      	ldr	r3, [r4, #0]
    d7a0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    d7a4:	4283      	cmp	r3, r0
    d7a6:	b082      	sub	sp, #8
    d7a8:	d150      	bne.n	d84c <am_hal_adc_power_control+0xb4>
    d7aa:	b329      	cbz	r1, d7f8 <am_hal_adc_power_control+0x60>
    d7ac:	3901      	subs	r1, #1
    d7ae:	2901      	cmp	r1, #1
    d7b0:	d849      	bhi.n	d846 <am_hal_adc_power_control+0xae>
    d7b2:	b1da      	cbz	r2, d7ec <am_hal_adc_power_control+0x54>
    d7b4:	4b2c      	ldr	r3, [pc, #176]	; (d868 <am_hal_adc_power_control+0xd0>)
    d7b6:	68d9      	ldr	r1, [r3, #12]
    d7b8:	6161      	str	r1, [r4, #20]
    d7ba:	6919      	ldr	r1, [r3, #16]
    d7bc:	61a1      	str	r1, [r4, #24]
    d7be:	6959      	ldr	r1, [r3, #20]
    d7c0:	61e1      	str	r1, [r4, #28]
    d7c2:	6999      	ldr	r1, [r3, #24]
    d7c4:	6221      	str	r1, [r4, #32]
    d7c6:	69d9      	ldr	r1, [r3, #28]
    d7c8:	6261      	str	r1, [r4, #36]	; 0x24
    d7ca:	6a19      	ldr	r1, [r3, #32]
    d7cc:	62a1      	str	r1, [r4, #40]	; 0x28
    d7ce:	6a59      	ldr	r1, [r3, #36]	; 0x24
    d7d0:	62e1      	str	r1, [r4, #44]	; 0x2c
    d7d2:	6a99      	ldr	r1, [r3, #40]	; 0x28
    d7d4:	6321      	str	r1, [r4, #48]	; 0x30
    d7d6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    d7d8:	6361      	str	r1, [r4, #52]	; 0x34
    d7da:	6b19      	ldr	r1, [r3, #48]	; 0x30
    d7dc:	63a1      	str	r1, [r4, #56]	; 0x38
    d7de:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
    d7e2:	63e1      	str	r1, [r4, #60]	; 0x3c
    d7e4:	681b      	ldr	r3, [r3, #0]
    d7e6:	6123      	str	r3, [r4, #16]
    d7e8:	2201      	movs	r2, #1
    d7ea:	7322      	strb	r2, [r4, #12]
    d7ec:	200a      	movs	r0, #10
    d7ee:	f000 fe37 	bl	e460 <am_hal_pwrctrl_periph_disable>
    d7f2:	2000      	movs	r0, #0
    d7f4:	b002      	add	sp, #8
    d7f6:	bd10      	pop	{r4, pc}
    d7f8:	2a00      	cmp	r2, #0
    d7fa:	d02a      	beq.n	d852 <am_hal_adc_power_control+0xba>
    d7fc:	7b23      	ldrb	r3, [r4, #12]
    d7fe:	2b00      	cmp	r3, #0
    d800:	d02e      	beq.n	d860 <am_hal_adc_power_control+0xc8>
    d802:	200a      	movs	r0, #10
    d804:	9101      	str	r1, [sp, #4]
    d806:	f000 fe01 	bl	e40c <am_hal_pwrctrl_periph_enable>
    d80a:	4b17      	ldr	r3, [pc, #92]	; (d868 <am_hal_adc_power_control+0xd0>)
    d80c:	6962      	ldr	r2, [r4, #20]
    d80e:	60da      	str	r2, [r3, #12]
    d810:	69a2      	ldr	r2, [r4, #24]
    d812:	611a      	str	r2, [r3, #16]
    d814:	69e2      	ldr	r2, [r4, #28]
    d816:	615a      	str	r2, [r3, #20]
    d818:	6a22      	ldr	r2, [r4, #32]
    d81a:	619a      	str	r2, [r3, #24]
    d81c:	6a62      	ldr	r2, [r4, #36]	; 0x24
    d81e:	61da      	str	r2, [r3, #28]
    d820:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    d822:	621a      	str	r2, [r3, #32]
    d824:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    d826:	625a      	str	r2, [r3, #36]	; 0x24
    d828:	6b22      	ldr	r2, [r4, #48]	; 0x30
    d82a:	629a      	str	r2, [r3, #40]	; 0x28
    d82c:	6b62      	ldr	r2, [r4, #52]	; 0x34
    d82e:	62da      	str	r2, [r3, #44]	; 0x2c
    d830:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    d832:	631a      	str	r2, [r3, #48]	; 0x30
    d834:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    d836:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    d83a:	9901      	ldr	r1, [sp, #4]
    d83c:	6922      	ldr	r2, [r4, #16]
    d83e:	601a      	str	r2, [r3, #0]
    d840:	4608      	mov	r0, r1
    d842:	7321      	strb	r1, [r4, #12]
    d844:	e000      	b.n	d848 <am_hal_adc_power_control+0xb0>
    d846:	2006      	movs	r0, #6
    d848:	b002      	add	sp, #8
    d84a:	bd10      	pop	{r4, pc}
    d84c:	2002      	movs	r0, #2
    d84e:	b002      	add	sp, #8
    d850:	bd10      	pop	{r4, pc}
    d852:	200a      	movs	r0, #10
    d854:	9201      	str	r2, [sp, #4]
    d856:	f000 fdd9 	bl	e40c <am_hal_pwrctrl_periph_enable>
    d85a:	9a01      	ldr	r2, [sp, #4]
    d85c:	4610      	mov	r0, r2
    d85e:	e7f3      	b.n	d848 <am_hal_adc_power_control+0xb0>
    d860:	2007      	movs	r0, #7
    d862:	e7f1      	b.n	d848 <am_hal_adc_power_control+0xb0>
    d864:	01afafaf 	.word	0x01afafaf
    d868:	50010000 	.word	0x50010000

0000d86c <am_hal_cachectrl_config>:
    d86c:	b530      	push	{r4, r5, lr}
    d86e:	b083      	sub	sp, #12
    d870:	4604      	mov	r4, r0
    d872:	f000 fd27 	bl	e2c4 <am_hal_interrupt_master_disable>
    d876:	4d0e      	ldr	r5, [pc, #56]	; (d8b0 <am_hal_cachectrl_config+0x44>)
    d878:	9001      	str	r0, [sp, #4]
    d87a:	682b      	ldr	r3, [r5, #0]
    d87c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    d880:	602b      	str	r3, [r5, #0]
    d882:	9801      	ldr	r0, [sp, #4]
    d884:	f000 fd22 	bl	e2cc <am_hal_interrupt_master_set>
    d888:	7863      	ldrb	r3, [r4, #1]
    d88a:	7822      	ldrb	r2, [r4, #0]
    d88c:	78a1      	ldrb	r1, [r4, #2]
    d88e:	021b      	lsls	r3, r3, #8
    d890:	f403 7340 	and.w	r3, r3, #768	; 0x300
    d894:	0112      	lsls	r2, r2, #4
    d896:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    d89a:	b2d2      	uxtb	r2, r2
    d89c:	4313      	orrs	r3, r2
    d89e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    d8a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    d8a6:	2000      	movs	r0, #0
    d8a8:	602b      	str	r3, [r5, #0]
    d8aa:	b003      	add	sp, #12
    d8ac:	bd30      	pop	{r4, r5, pc}
    d8ae:	bf00      	nop
    d8b0:	40018000 	.word	0x40018000

0000d8b4 <am_hal_cachectrl_enable>:
    d8b4:	4a03      	ldr	r2, [pc, #12]	; (d8c4 <am_hal_cachectrl_enable+0x10>)
    d8b6:	6813      	ldr	r3, [r2, #0]
    d8b8:	f043 0301 	orr.w	r3, r3, #1
    d8bc:	2000      	movs	r0, #0
    d8be:	6013      	str	r3, [r2, #0]
    d8c0:	4770      	bx	lr
    d8c2:	bf00      	nop
    d8c4:	40018000 	.word	0x40018000

0000d8c8 <am_hal_cachectrl_control>:
    d8c8:	b510      	push	{r4, lr}
    d8ca:	3801      	subs	r0, #1
    d8cc:	b08e      	sub	sp, #56	; 0x38
    d8ce:	2810      	cmp	r0, #16
    d8d0:	f200 815e 	bhi.w	db90 <am_hal_cachectrl_control+0x2c8>
    d8d4:	e8df f010 	tbh	[pc, r0, lsl #1]
    d8d8:	00360018 	.word	0x00360018
    d8dc:	0040003d 	.word	0x0040003d
    d8e0:	00450043 	.word	0x00450043
    d8e4:	0011001a 	.word	0x0011001a
    d8e8:	00540047 	.word	0x00540047
    d8ec:	009a0061 	.word	0x009a0061
    d8f0:	010c00d3 	.word	0x010c00d3
    d8f4:	013f0126 	.word	0x013f0126
    d8f8:	001d      	.short	0x001d
    d8fa:	f44f 7300 	mov.w	r3, #512	; 0x200
    d8fe:	4aac      	ldr	r2, [pc, #688]	; (dbb0 <am_hal_cachectrl_control+0x2e8>)
    d900:	2000      	movs	r0, #0
    d902:	6093      	str	r3, [r2, #8]
    d904:	b00e      	add	sp, #56	; 0x38
    d906:	bd10      	pop	{r4, pc}
    d908:	2301      	movs	r3, #1
    d90a:	e7f8      	b.n	d8fe <am_hal_cachectrl_control+0x36>
    d90c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    d910:	e7f5      	b.n	d8fe <am_hal_cachectrl_control+0x36>
    d912:	2900      	cmp	r1, #0
    d914:	f000 813c 	beq.w	db90 <am_hal_cachectrl_control+0x2c8>
    d918:	684a      	ldr	r2, [r1, #4]
    d91a:	48a6      	ldr	r0, [pc, #664]	; (dbb4 <am_hal_cachectrl_control+0x2ec>)
    d91c:	4202      	tst	r2, r0
    d91e:	f040 8137 	bne.w	db90 <am_hal_cachectrl_control+0x2c8>
    d922:	688b      	ldr	r3, [r1, #8]
    d924:	4018      	ands	r0, r3
    d926:	f040 8133 	bne.w	db90 <am_hal_cachectrl_control+0x2c8>
    d92a:	780c      	ldrb	r4, [r1, #0]
    d92c:	2c00      	cmp	r4, #0
    d92e:	f040 8133 	bne.w	db98 <am_hal_cachectrl_control+0x2d0>
    d932:	4c9f      	ldr	r4, [pc, #636]	; (dbb0 <am_hal_cachectrl_control+0x2e8>)
    d934:	7849      	ldrb	r1, [r1, #1]
    d936:	6122      	str	r2, [r4, #16]
    d938:	6163      	str	r3, [r4, #20]
    d93a:	6823      	ldr	r3, [r4, #0]
    d93c:	f361 0382 	bfi	r3, r1, #2, #1
    d940:	6023      	str	r3, [r4, #0]
    d942:	e7df      	b.n	d904 <am_hal_cachectrl_control+0x3c>
    d944:	4b9a      	ldr	r3, [pc, #616]	; (dbb0 <am_hal_cachectrl_control+0x2e8>)
    d946:	681b      	ldr	r3, [r3, #0]
    d948:	01db      	lsls	r3, r3, #7
    d94a:	f140 811f 	bpl.w	db8c <am_hal_cachectrl_control+0x2c4>
    d94e:	2302      	movs	r3, #2
    d950:	e7d5      	b.n	d8fe <am_hal_cachectrl_control+0x36>
    d952:	f44f 6388 	mov.w	r3, #1088	; 0x440
    d956:	e7d2      	b.n	d8fe <am_hal_cachectrl_control+0x36>
    d958:	f44f 7308 	mov.w	r3, #544	; 0x220
    d95c:	e7cf      	b.n	d8fe <am_hal_cachectrl_control+0x36>
    d95e:	2340      	movs	r3, #64	; 0x40
    d960:	e7cd      	b.n	d8fe <am_hal_cachectrl_control+0x36>
    d962:	2320      	movs	r3, #32
    d964:	e7cb      	b.n	d8fe <am_hal_cachectrl_control+0x36>
    d966:	f000 fcad 	bl	e2c4 <am_hal_interrupt_master_disable>
    d96a:	4a91      	ldr	r2, [pc, #580]	; (dbb0 <am_hal_cachectrl_control+0x2e8>)
    d96c:	9000      	str	r0, [sp, #0]
    d96e:	6813      	ldr	r3, [r2, #0]
    d970:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    d974:	6013      	str	r3, [r2, #0]
    d976:	9800      	ldr	r0, [sp, #0]
    d978:	f000 fca8 	bl	e2cc <am_hal_interrupt_master_set>
    d97c:	2000      	movs	r0, #0
    d97e:	e7c1      	b.n	d904 <am_hal_cachectrl_control+0x3c>
    d980:	f000 fca0 	bl	e2c4 <am_hal_interrupt_master_disable>
    d984:	4a8a      	ldr	r2, [pc, #552]	; (dbb0 <am_hal_cachectrl_control+0x2e8>)
    d986:	9001      	str	r0, [sp, #4]
    d988:	6813      	ldr	r3, [r2, #0]
    d98a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    d98e:	6013      	str	r3, [r2, #0]
    d990:	9801      	ldr	r0, [sp, #4]
    d992:	f000 fc9b 	bl	e2cc <am_hal_interrupt_master_set>
    d996:	2000      	movs	r0, #0
    d998:	e7b4      	b.n	d904 <am_hal_cachectrl_control+0x3c>
    d99a:	f000 fc93 	bl	e2c4 <am_hal_interrupt_master_disable>
    d99e:	4603      	mov	r3, r0
    d9a0:	4885      	ldr	r0, [pc, #532]	; (dbb8 <am_hal_cachectrl_control+0x2f0>)
    d9a2:	9302      	str	r3, [sp, #8]
    d9a4:	f000 fb06 	bl	dfb4 <am_hal_flash_load_ui32>
    d9a8:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    d9ac:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    d9b0:	4881      	ldr	r0, [pc, #516]	; (dbb8 <am_hal_cachectrl_control+0x2f0>)
    d9b2:	f000 fb03 	bl	dfbc <am_hal_flash_store_ui32>
    d9b6:	9802      	ldr	r0, [sp, #8]
    d9b8:	f000 fc88 	bl	e2cc <am_hal_interrupt_master_set>
    d9bc:	f000 fc82 	bl	e2c4 <am_hal_interrupt_master_disable>
    d9c0:	4603      	mov	r3, r0
    d9c2:	487d      	ldr	r0, [pc, #500]	; (dbb8 <am_hal_cachectrl_control+0x2f0>)
    d9c4:	9303      	str	r3, [sp, #12]
    d9c6:	f000 faf5 	bl	dfb4 <am_hal_flash_load_ui32>
    d9ca:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    d9ce:	f440 61ee 	orr.w	r1, r0, #1904	; 0x770
    d9d2:	4879      	ldr	r0, [pc, #484]	; (dbb8 <am_hal_cachectrl_control+0x2f0>)
    d9d4:	f000 faf2 	bl	dfbc <am_hal_flash_store_ui32>
    d9d8:	9803      	ldr	r0, [sp, #12]
    d9da:	f000 fc77 	bl	e2cc <am_hal_interrupt_master_set>
    d9de:	f000 fc71 	bl	e2c4 <am_hal_interrupt_master_disable>
    d9e2:	4603      	mov	r3, r0
    d9e4:	4874      	ldr	r0, [pc, #464]	; (dbb8 <am_hal_cachectrl_control+0x2f0>)
    d9e6:	9304      	str	r3, [sp, #16]
    d9e8:	f000 fae4 	bl	dfb4 <am_hal_flash_load_ui32>
    d9ec:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    d9f0:	f020 000f 	bic.w	r0, r0, #15
    d9f4:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    d9f8:	f041 0103 	orr.w	r1, r1, #3
    d9fc:	486e      	ldr	r0, [pc, #440]	; (dbb8 <am_hal_cachectrl_control+0x2f0>)
    d9fe:	f000 fadd 	bl	dfbc <am_hal_flash_store_ui32>
    da02:	9804      	ldr	r0, [sp, #16]
    da04:	f000 fc62 	bl	e2cc <am_hal_interrupt_master_set>
    da08:	2000      	movs	r0, #0
    da0a:	e77b      	b.n	d904 <am_hal_cachectrl_control+0x3c>
    da0c:	f000 fc5a 	bl	e2c4 <am_hal_interrupt_master_disable>
    da10:	4603      	mov	r3, r0
    da12:	4869      	ldr	r0, [pc, #420]	; (dbb8 <am_hal_cachectrl_control+0x2f0>)
    da14:	9305      	str	r3, [sp, #20]
    da16:	f000 facd 	bl	dfb4 <am_hal_flash_load_ui32>
    da1a:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    da1e:	f440 51b8 	orr.w	r1, r0, #5888	; 0x1700
    da22:	4865      	ldr	r0, [pc, #404]	; (dbb8 <am_hal_cachectrl_control+0x2f0>)
    da24:	f000 faca 	bl	dfbc <am_hal_flash_store_ui32>
    da28:	9805      	ldr	r0, [sp, #20]
    da2a:	f000 fc4f 	bl	e2cc <am_hal_interrupt_master_set>
    da2e:	f000 fc49 	bl	e2c4 <am_hal_interrupt_master_disable>
    da32:	4603      	mov	r3, r0
    da34:	4860      	ldr	r0, [pc, #384]	; (dbb8 <am_hal_cachectrl_control+0x2f0>)
    da36:	9306      	str	r3, [sp, #24]
    da38:	f000 fabc 	bl	dfb4 <am_hal_flash_load_ui32>
    da3c:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    da40:	f440 61ea 	orr.w	r1, r0, #1872	; 0x750
    da44:	485c      	ldr	r0, [pc, #368]	; (dbb8 <am_hal_cachectrl_control+0x2f0>)
    da46:	f000 fab9 	bl	dfbc <am_hal_flash_store_ui32>
    da4a:	9806      	ldr	r0, [sp, #24]
    da4c:	f000 fc3e 	bl	e2cc <am_hal_interrupt_master_set>
    da50:	f000 fc38 	bl	e2c4 <am_hal_interrupt_master_disable>
    da54:	4603      	mov	r3, r0
    da56:	4858      	ldr	r0, [pc, #352]	; (dbb8 <am_hal_cachectrl_control+0x2f0>)
    da58:	9307      	str	r3, [sp, #28]
    da5a:	f000 faab 	bl	dfb4 <am_hal_flash_load_ui32>
    da5e:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    da62:	f020 000f 	bic.w	r0, r0, #15
    da66:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    da6a:	f041 0101 	orr.w	r1, r1, #1
    da6e:	4852      	ldr	r0, [pc, #328]	; (dbb8 <am_hal_cachectrl_control+0x2f0>)
    da70:	f000 faa4 	bl	dfbc <am_hal_flash_store_ui32>
    da74:	9807      	ldr	r0, [sp, #28]
    da76:	f000 fc29 	bl	e2cc <am_hal_interrupt_master_set>
    da7a:	2000      	movs	r0, #0
    da7c:	e742      	b.n	d904 <am_hal_cachectrl_control+0x3c>
    da7e:	f000 fc21 	bl	e2c4 <am_hal_interrupt_master_disable>
    da82:	4603      	mov	r3, r0
    da84:	484c      	ldr	r0, [pc, #304]	; (dbb8 <am_hal_cachectrl_control+0x2f0>)
    da86:	9308      	str	r3, [sp, #32]
    da88:	f000 fa94 	bl	dfb4 <am_hal_flash_load_ui32>
    da8c:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    da90:	f440 51b8 	orr.w	r1, r0, #5888	; 0x1700
    da94:	4848      	ldr	r0, [pc, #288]	; (dbb8 <am_hal_cachectrl_control+0x2f0>)
    da96:	f000 fa91 	bl	dfbc <am_hal_flash_store_ui32>
    da9a:	9808      	ldr	r0, [sp, #32]
    da9c:	f000 fc16 	bl	e2cc <am_hal_interrupt_master_set>
    daa0:	f000 fc10 	bl	e2c4 <am_hal_interrupt_master_disable>
    daa4:	4603      	mov	r3, r0
    daa6:	4844      	ldr	r0, [pc, #272]	; (dbb8 <am_hal_cachectrl_control+0x2f0>)
    daa8:	9309      	str	r3, [sp, #36]	; 0x24
    daaa:	f000 fa83 	bl	dfb4 <am_hal_flash_load_ui32>
    daae:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    dab2:	f440 61ec 	orr.w	r1, r0, #1888	; 0x760
    dab6:	4840      	ldr	r0, [pc, #256]	; (dbb8 <am_hal_cachectrl_control+0x2f0>)
    dab8:	f000 fa80 	bl	dfbc <am_hal_flash_store_ui32>
    dabc:	9809      	ldr	r0, [sp, #36]	; 0x24
    dabe:	f000 fc05 	bl	e2cc <am_hal_interrupt_master_set>
    dac2:	f000 fbff 	bl	e2c4 <am_hal_interrupt_master_disable>
    dac6:	4603      	mov	r3, r0
    dac8:	483b      	ldr	r0, [pc, #236]	; (dbb8 <am_hal_cachectrl_control+0x2f0>)
    daca:	930a      	str	r3, [sp, #40]	; 0x28
    dacc:	f000 fa72 	bl	dfb4 <am_hal_flash_load_ui32>
    dad0:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    dad4:	f020 000f 	bic.w	r0, r0, #15
    dad8:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    dadc:	f041 0101 	orr.w	r1, r1, #1
    dae0:	4835      	ldr	r0, [pc, #212]	; (dbb8 <am_hal_cachectrl_control+0x2f0>)
    dae2:	f000 fa6b 	bl	dfbc <am_hal_flash_store_ui32>
    dae6:	980a      	ldr	r0, [sp, #40]	; 0x28
    dae8:	f000 fbf0 	bl	e2cc <am_hal_interrupt_master_set>
    daec:	2000      	movs	r0, #0
    daee:	e709      	b.n	d904 <am_hal_cachectrl_control+0x3c>
    daf0:	2900      	cmp	r1, #0
    daf2:	d04d      	beq.n	db90 <am_hal_cachectrl_control+0x2c8>
    daf4:	680c      	ldr	r4, [r1, #0]
    daf6:	2c03      	cmp	r4, #3
    daf8:	d84c      	bhi.n	db94 <am_hal_cachectrl_control+0x2cc>
    dafa:	f000 fbe3 	bl	e2c4 <am_hal_interrupt_master_disable>
    dafe:	4603      	mov	r3, r0
    db00:	482d      	ldr	r0, [pc, #180]	; (dbb8 <am_hal_cachectrl_control+0x2f0>)
    db02:	930b      	str	r3, [sp, #44]	; 0x2c
    db04:	f000 fa56 	bl	dfb4 <am_hal_flash_load_ui32>
    db08:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    db0c:	ea40 3104 	orr.w	r1, r0, r4, lsl #12
    db10:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    db14:	4828      	ldr	r0, [pc, #160]	; (dbb8 <am_hal_cachectrl_control+0x2f0>)
    db16:	f000 fa51 	bl	dfbc <am_hal_flash_store_ui32>
    db1a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    db1c:	f000 fbd6 	bl	e2cc <am_hal_interrupt_master_set>
    db20:	2000      	movs	r0, #0
    db22:	e6ef      	b.n	d904 <am_hal_cachectrl_control+0x3c>
    db24:	b3a1      	cbz	r1, db90 <am_hal_cachectrl_control+0x2c8>
    db26:	680c      	ldr	r4, [r1, #0]
    db28:	2c07      	cmp	r4, #7
    db2a:	d833      	bhi.n	db94 <am_hal_cachectrl_control+0x2cc>
    db2c:	f000 fbca 	bl	e2c4 <am_hal_interrupt_master_disable>
    db30:	4603      	mov	r3, r0
    db32:	4821      	ldr	r0, [pc, #132]	; (dbb8 <am_hal_cachectrl_control+0x2f0>)
    db34:	930c      	str	r3, [sp, #48]	; 0x30
    db36:	f000 fa3d 	bl	dfb4 <am_hal_flash_load_ui32>
    db3a:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    db3e:	ea40 1104 	orr.w	r1, r0, r4, lsl #4
    db42:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    db46:	481c      	ldr	r0, [pc, #112]	; (dbb8 <am_hal_cachectrl_control+0x2f0>)
    db48:	f000 fa38 	bl	dfbc <am_hal_flash_store_ui32>
    db4c:	980c      	ldr	r0, [sp, #48]	; 0x30
    db4e:	f000 fbbd 	bl	e2cc <am_hal_interrupt_master_set>
    db52:	2000      	movs	r0, #0
    db54:	e6d6      	b.n	d904 <am_hal_cachectrl_control+0x3c>
    db56:	b1d9      	cbz	r1, db90 <am_hal_cachectrl_control+0x2c8>
    db58:	680c      	ldr	r4, [r1, #0]
    db5a:	2c0f      	cmp	r4, #15
    db5c:	d81a      	bhi.n	db94 <am_hal_cachectrl_control+0x2cc>
    db5e:	f000 fbb1 	bl	e2c4 <am_hal_interrupt_master_disable>
    db62:	4603      	mov	r3, r0
    db64:	4814      	ldr	r0, [pc, #80]	; (dbb8 <am_hal_cachectrl_control+0x2f0>)
    db66:	930d      	str	r3, [sp, #52]	; 0x34
    db68:	f000 fa24 	bl	dfb4 <am_hal_flash_load_ui32>
    db6c:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    db70:	f020 000f 	bic.w	r0, r0, #15
    db74:	ea40 0104 	orr.w	r1, r0, r4
    db78:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    db7c:	480e      	ldr	r0, [pc, #56]	; (dbb8 <am_hal_cachectrl_control+0x2f0>)
    db7e:	f000 fa1d 	bl	dfbc <am_hal_flash_store_ui32>
    db82:	980d      	ldr	r0, [sp, #52]	; 0x34
    db84:	f000 fba2 	bl	e2cc <am_hal_interrupt_master_set>
    db88:	2000      	movs	r0, #0
    db8a:	e6bb      	b.n	d904 <am_hal_cachectrl_control+0x3c>
    db8c:	2007      	movs	r0, #7
    db8e:	e6b9      	b.n	d904 <am_hal_cachectrl_control+0x3c>
    db90:	2006      	movs	r0, #6
    db92:	e6b7      	b.n	d904 <am_hal_cachectrl_control+0x3c>
    db94:	2001      	movs	r0, #1
    db96:	e6b5      	b.n	d904 <am_hal_cachectrl_control+0x3c>
    db98:	2c01      	cmp	r4, #1
    db9a:	d1f9      	bne.n	db90 <am_hal_cachectrl_control+0x2c8>
    db9c:	4c04      	ldr	r4, [pc, #16]	; (dbb0 <am_hal_cachectrl_control+0x2e8>)
    db9e:	7849      	ldrb	r1, [r1, #1]
    dba0:	61a2      	str	r2, [r4, #24]
    dba2:	61e3      	str	r3, [r4, #28]
    dba4:	6823      	ldr	r3, [r4, #0]
    dba6:	f361 03c3 	bfi	r3, r1, #3, #1
    dbaa:	6023      	str	r3, [r4, #0]
    dbac:	e6aa      	b.n	d904 <am_hal_cachectrl_control+0x3c>
    dbae:	bf00      	nop
    dbb0:	40018000 	.word	0x40018000
    dbb4:	f800000f 	.word	0xf800000f
    dbb8:	40018004 	.word	0x40018004

0000dbbc <am_hal_clkgen_control>:
    dbbc:	4b49      	ldr	r3, [pc, #292]	; (dce4 <am_hal_clkgen_control+0x128>)
    dbbe:	681a      	ldr	r2, [r3, #0]
    dbc0:	b912      	cbnz	r2, dbc8 <am_hal_clkgen_control+0xc>
    dbc2:	4a49      	ldr	r2, [pc, #292]	; (dce8 <am_hal_clkgen_control+0x12c>)
    dbc4:	6812      	ldr	r2, [r2, #0]
    dbc6:	601a      	str	r2, [r3, #0]
    dbc8:	2809      	cmp	r0, #9
    dbca:	f200 8089 	bhi.w	dce0 <am_hal_clkgen_control+0x124>
    dbce:	e8df f000 	tbb	[pc, r0]
    dbd2:	160d      	.short	0x160d
    dbd4:	423a261e 	.word	0x423a261e
    dbd8:	055c544c 	.word	0x055c544c
    dbdc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    dbe0:	2000      	movs	r0, #0
    dbe2:	6a1a      	ldr	r2, [r3, #32]
    dbe4:	f36f 0200 	bfc	r2, #0, #1
    dbe8:	621a      	str	r2, [r3, #32]
    dbea:	4770      	bx	lr
    dbec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    dbf0:	2200      	movs	r2, #0
    dbf2:	2147      	movs	r1, #71	; 0x47
    dbf4:	6159      	str	r1, [r3, #20]
    dbf6:	4610      	mov	r0, r2
    dbf8:	619a      	str	r2, [r3, #24]
    dbfa:	615a      	str	r2, [r3, #20]
    dbfc:	4770      	bx	lr
    dbfe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    dc02:	2000      	movs	r0, #0
    dc04:	899a      	ldrh	r2, [r3, #12]
    dc06:	f36f 0200 	bfc	r2, #0, #1
    dc0a:	819a      	strh	r2, [r3, #12]
    dc0c:	4770      	bx	lr
    dc0e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    dc12:	2000      	movs	r0, #0
    dc14:	899a      	ldrh	r2, [r3, #12]
    dc16:	f36f 0241 	bfc	r2, #1, #1
    dc1a:	819a      	strh	r2, [r3, #12]
    dc1c:	4770      	bx	lr
    dc1e:	4a33      	ldr	r2, [pc, #204]	; (dcec <am_hal_clkgen_control+0x130>)
    dc20:	68d3      	ldr	r3, [r2, #12]
    dc22:	b2db      	uxtb	r3, r3
    dc24:	2b21      	cmp	r3, #33	; 0x21
    dc26:	d106      	bne.n	dc36 <am_hal_clkgen_control+0x7a>
    dc28:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    dc2c:	2101      	movs	r1, #1
    dc2e:	f361 2309 	bfi	r3, r1, #8, #2
    dc32:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    dc36:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    dc3a:	2000      	movs	r0, #0
    dc3c:	8993      	ldrh	r3, [r2, #12]
    dc3e:	f043 0301 	orr.w	r3, r3, #1
    dc42:	8193      	strh	r3, [r2, #12]
    dc44:	4770      	bx	lr
    dc46:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    dc4a:	2000      	movs	r0, #0
    dc4c:	8993      	ldrh	r3, [r2, #12]
    dc4e:	f043 0302 	orr.w	r3, r3, #2
    dc52:	8193      	strh	r3, [r2, #12]
    dc54:	4770      	bx	lr
    dc56:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    dc5a:	2200      	movs	r2, #0
    dc5c:	2047      	movs	r0, #71	; 0x47
    dc5e:	2101      	movs	r1, #1
    dc60:	6158      	str	r0, [r3, #20]
    dc62:	6199      	str	r1, [r3, #24]
    dc64:	4610      	mov	r0, r2
    dc66:	615a      	str	r2, [r3, #20]
    dc68:	4770      	bx	lr
    dc6a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    dc6e:	2000      	movs	r0, #0
    dc70:	899a      	ldrh	r2, [r3, #12]
    dc72:	f36f 12c7 	bfc	r2, #7, #1
    dc76:	819a      	strh	r2, [r3, #12]
    dc78:	4770      	bx	lr
    dc7a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    dc7e:	2000      	movs	r0, #0
    dc80:	8993      	ldrh	r3, [r2, #12]
    dc82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    dc86:	8193      	strh	r3, [r2, #12]
    dc88:	4770      	bx	lr
    dc8a:	4a18      	ldr	r2, [pc, #96]	; (dcec <am_hal_clkgen_control+0x130>)
    dc8c:	68d3      	ldr	r3, [r2, #12]
    dc8e:	b2db      	uxtb	r3, r3
    dc90:	2b21      	cmp	r3, #33	; 0x21
    dc92:	d00a      	beq.n	dcaa <am_hal_clkgen_control+0xee>
    dc94:	b139      	cbz	r1, dca6 <am_hal_clkgen_control+0xea>
    dc96:	680b      	ldr	r3, [r1, #0]
    dc98:	f043 0301 	orr.w	r3, r3, #1
    dc9c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    dca0:	2000      	movs	r0, #0
    dca2:	6213      	str	r3, [r2, #32]
    dca4:	4770      	bx	lr
    dca6:	4b12      	ldr	r3, [pc, #72]	; (dcf0 <am_hal_clkgen_control+0x134>)
    dca8:	e7f8      	b.n	dc9c <am_hal_clkgen_control+0xe0>
    dcaa:	b500      	push	{lr}
    dcac:	b083      	sub	sp, #12
    dcae:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
    dcb2:	9101      	str	r1, [sp, #4]
    dcb4:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    dcb8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    dcbc:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    dcc0:	f000 f932 	bl	df28 <am_hal_flash_delay>
    dcc4:	9901      	ldr	r1, [sp, #4]
    dcc6:	b149      	cbz	r1, dcdc <am_hal_clkgen_control+0x120>
    dcc8:	680b      	ldr	r3, [r1, #0]
    dcca:	f043 0301 	orr.w	r3, r3, #1
    dcce:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    dcd2:	2000      	movs	r0, #0
    dcd4:	6213      	str	r3, [r2, #32]
    dcd6:	b003      	add	sp, #12
    dcd8:	f85d fb04 	ldr.w	pc, [sp], #4
    dcdc:	4b04      	ldr	r3, [pc, #16]	; (dcf0 <am_hal_clkgen_control+0x134>)
    dcde:	e7f6      	b.n	dcce <am_hal_clkgen_control+0x112>
    dce0:	2006      	movs	r0, #6
    dce2:	4770      	bx	lr
    dce4:	100011a4 	.word	0x100011a4
    dce8:	4ffff000 	.word	0x4ffff000
    dcec:	40020000 	.word	0x40020000
    dcf0:	0025b801 	.word	0x0025b801

0000dcf4 <am_hal_clkgen_status_get>:
    dcf4:	b1b0      	cbz	r0, dd24 <am_hal_clkgen_status_get+0x30>
    dcf6:	b410      	push	{r4}
    dcf8:	f04f 2140 	mov.w	r1, #1073758208	; 0x40004000
    dcfc:	4603      	mov	r3, r0
    dcfe:	698c      	ldr	r4, [r1, #24]
    dd00:	4809      	ldr	r0, [pc, #36]	; (dd28 <am_hal_clkgen_status_get+0x34>)
    dd02:	4a0a      	ldr	r2, [pc, #40]	; (dd2c <am_hal_clkgen_status_get+0x38>)
    dd04:	f014 0f01 	tst.w	r4, #1
    dd08:	bf08      	it	eq
    dd0a:	4602      	moveq	r2, r0
    dd0c:	601a      	str	r2, [r3, #0]
    dd0e:	69ca      	ldr	r2, [r1, #28]
    dd10:	f85d 4b04 	ldr.w	r4, [sp], #4
    dd14:	f002 0101 	and.w	r1, r2, #1
    dd18:	f3c2 0240 	ubfx	r2, r2, #1, #1
    dd1c:	2000      	movs	r0, #0
    dd1e:	6059      	str	r1, [r3, #4]
    dd20:	721a      	strb	r2, [r3, #8]
    dd22:	4770      	bx	lr
    dd24:	2006      	movs	r0, #6
    dd26:	4770      	bx	lr
    dd28:	02dc6c00 	.word	0x02dc6c00
    dd2c:	016e3600 	.word	0x016e3600

0000dd30 <am_hal_ctimer_config_single>:
    dd30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dd34:	b082      	sub	sp, #8
    dd36:	460e      	mov	r6, r1
    dd38:	4605      	mov	r5, r0
    dd3a:	4614      	mov	r4, r2
    dd3c:	f000 fac2 	bl	e2c4 <am_hal_interrupt_master_disable>
    dd40:	4f20      	ldr	r7, [pc, #128]	; (ddc4 <am_hal_ctimer_config_single+0x94>)
    dd42:	9001      	str	r0, [sp, #4]
    dd44:	ea4f 1845 	mov.w	r8, r5, lsl #5
    dd48:	f006 2308 	and.w	r3, r6, #134219776	; 0x8000800
    dd4c:	f858 2007 	ldr.w	r2, [r8, r7]
    dd50:	4313      	orrs	r3, r2
    dd52:	f848 3007 	str.w	r3, [r8, r7]
    dd56:	9801      	ldr	r0, [sp, #4]
    dd58:	f000 fab8 	bl	e2cc <am_hal_interrupt_master_set>
    dd5c:	f000 fab2 	bl	e2c4 <am_hal_interrupt_master_disable>
    dd60:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
    dd64:	9000      	str	r0, [sp, #0]
    dd66:	f858 3007 	ldr.w	r3, [r8, r7]
    dd6a:	d021      	beq.n	ddb0 <am_hal_ctimer_config_single+0x80>
    dd6c:	ea23 0306 	bic.w	r3, r3, r6
    dd70:	1c72      	adds	r2, r6, #1
    dd72:	ea43 0304 	orr.w	r3, r3, r4
    dd76:	d110      	bne.n	dd9a <am_hal_ctimer_config_single+0x6a>
    dd78:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    dd7c:	f848 3007 	str.w	r3, [r8, r7]
    dd80:	9800      	ldr	r0, [sp, #0]
    dd82:	f000 faa3 	bl	e2cc <am_hal_interrupt_master_set>
    dd86:	2300      	movs	r3, #0
    dd88:	480f      	ldr	r0, [pc, #60]	; (ddc8 <am_hal_ctimer_config_single+0x98>)
    dd8a:	eb00 0545 	add.w	r5, r0, r5, lsl #1
    dd8e:	f3c4 0444 	ubfx	r4, r4, #1, #5
    dd92:	54ec      	strb	r4, [r5, r3]
    dd94:	b002      	add	sp, #8
    dd96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dd9a:	f848 3007 	str.w	r3, [r8, r7]
    dd9e:	9800      	ldr	r0, [sp, #0]
    dda0:	f000 fa94 	bl	e2cc <am_hal_interrupt_master_set>
    dda4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    dda8:	429e      	cmp	r6, r3
    ddaa:	d1f3      	bne.n	dd94 <am_hal_ctimer_config_single+0x64>
    ddac:	2300      	movs	r3, #0
    ddae:	e7eb      	b.n	dd88 <am_hal_ctimer_config_single+0x58>
    ddb0:	b29b      	uxth	r3, r3
    ddb2:	0424      	lsls	r4, r4, #16
    ddb4:	4323      	orrs	r3, r4
    ddb6:	f848 3007 	str.w	r3, [r8, r7]
    ddba:	9800      	ldr	r0, [sp, #0]
    ddbc:	f000 fa86 	bl	e2cc <am_hal_interrupt_master_set>
    ddc0:	2301      	movs	r3, #1
    ddc2:	e7e1      	b.n	dd88 <am_hal_ctimer_config_single+0x58>
    ddc4:	4000800c 	.word	0x4000800c
    ddc8:	10001000 	.word	0x10001000

0000ddcc <am_hal_ctimer_start>:
    ddcc:	b530      	push	{r4, r5, lr}
    ddce:	b083      	sub	sp, #12
    ddd0:	460c      	mov	r4, r1
    ddd2:	4605      	mov	r5, r0
    ddd4:	f000 fa76 	bl	e2c4 <am_hal_interrupt_master_disable>
    ddd8:	ea4f 1c45 	mov.w	ip, r5, lsl #5
    dddc:	4910      	ldr	r1, [pc, #64]	; (de20 <am_hal_ctimer_start+0x54>)
    ddde:	9001      	str	r0, [sp, #4]
    dde0:	f85c 3001 	ldr.w	r3, [ip, r1]
    dde4:	f004 2208 	and.w	r2, r4, #134219776	; 0x8000800
    dde8:	ea23 0202 	bic.w	r2, r3, r2
    ddec:	f004 1301 	and.w	r3, r4, #65537	; 0x10001
    ddf0:	4313      	orrs	r3, r2
    ddf2:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
    ddf6:	f84c 3001 	str.w	r3, [ip, r1]
    ddfa:	bf0c      	ite	eq
    ddfc:	f3c3 4444 	ubfxeq	r4, r3, #17, #5
    de00:	f3c3 0444 	ubfxne	r4, r3, #1, #5
    de04:	4b07      	ldr	r3, [pc, #28]	; (de24 <am_hal_ctimer_start+0x58>)
    de06:	9801      	ldr	r0, [sp, #4]
    de08:	bf0c      	ite	eq
    de0a:	2201      	moveq	r2, #1
    de0c:	2200      	movne	r2, #0
    de0e:	eb03 0545 	add.w	r5, r3, r5, lsl #1
    de12:	54ac      	strb	r4, [r5, r2]
    de14:	b003      	add	sp, #12
    de16:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    de1a:	f000 ba57 	b.w	e2cc <am_hal_interrupt_master_set>
    de1e:	bf00      	nop
    de20:	4000800c 	.word	0x4000800c
    de24:	10001000 	.word	0x10001000

0000de28 <am_hal_ctimer_period_set>:
    de28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    de2c:	b082      	sub	sp, #8
    de2e:	0145      	lsls	r5, r0, #5
    de30:	460e      	mov	r6, r1
    de32:	4614      	mov	r4, r2
    de34:	461f      	mov	r7, r3
    de36:	f000 fa45 	bl	e2c4 <am_hal_interrupt_master_disable>
    de3a:	f8df 809c 	ldr.w	r8, [pc, #156]	; ded8 <am_hal_ctimer_period_set+0xb0>
    de3e:	9001      	str	r0, [sp, #4]
    de40:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
    de44:	f855 2008 	ldr.w	r2, [r5, r8]
    de48:	4821      	ldr	r0, [pc, #132]	; (ded0 <am_hal_ctimer_period_set+0xa8>)
    de4a:	d02f      	beq.n	deac <am_hal_ctimer_period_set+0x84>
    de4c:	f402 72c0 	and.w	r2, r2, #384	; 0x180
    de50:	2a80      	cmp	r2, #128	; 0x80
    de52:	d019      	beq.n	de88 <am_hal_ctimer_period_set+0x60>
    de54:	f64f 72ff 	movw	r2, #65535	; 0xffff
    de58:	2100      	movs	r1, #0
    de5a:	4296      	cmp	r6, r2
    de5c:	460b      	mov	r3, r1
    de5e:	d01c      	beq.n	de9a <am_hal_ctimer_period_set+0x72>
    de60:	4a1c      	ldr	r2, [pc, #112]	; (ded4 <am_hal_ctimer_period_set+0xac>)
    de62:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
    de66:	eb05 0702 	add.w	r7, r5, r2
    de6a:	d027      	beq.n	debc <am_hal_ctimer_period_set+0x94>
    de6c:	0c1b      	lsrs	r3, r3, #16
    de6e:	041b      	lsls	r3, r3, #16
    de70:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
    de74:	b2a4      	uxth	r4, r4
    de76:	4321      	orrs	r1, r4
    de78:	5029      	str	r1, [r5, r0]
    de7a:	50ab      	str	r3, [r5, r2]
    de7c:	9801      	ldr	r0, [sp, #4]
    de7e:	b002      	add	sp, #8
    de80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    de84:	f000 ba22 	b.w	e2cc <am_hal_interrupt_master_set>
    de88:	f64f 72ff 	movw	r2, #65535	; 0xffff
    de8c:	4296      	cmp	r6, r2
    de8e:	ea4f 4104 	mov.w	r1, r4, lsl #16
    de92:	4623      	mov	r3, r4
    de94:	eba4 0407 	sub.w	r4, r4, r7
    de98:	d1e2      	bne.n	de60 <am_hal_ctimer_period_set+0x38>
    de9a:	b2a4      	uxth	r4, r4
    de9c:	4321      	orrs	r1, r4
    de9e:	5029      	str	r1, [r5, r0]
    dea0:	9801      	ldr	r0, [sp, #4]
    dea2:	b002      	add	sp, #8
    dea4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    dea8:	f000 ba10 	b.w	e2cc <am_hal_interrupt_master_set>
    deac:	0c12      	lsrs	r2, r2, #16
    deae:	f402 72c0 	and.w	r2, r2, #384	; 0x180
    deb2:	2a80      	cmp	r2, #128	; 0x80
    deb4:	d0e8      	beq.n	de88 <am_hal_ctimer_period_set+0x60>
    deb6:	4f07      	ldr	r7, [pc, #28]	; (ded4 <am_hal_ctimer_period_set+0xac>)
    deb8:	2100      	movs	r1, #0
    deba:	442f      	add	r7, r5
    debc:	b2a4      	uxth	r4, r4
    debe:	4321      	orrs	r1, r4
    dec0:	6039      	str	r1, [r7, #0]
    dec2:	9801      	ldr	r0, [sp, #4]
    dec4:	b002      	add	sp, #8
    dec6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    deca:	f000 b9ff 	b.w	e2cc <am_hal_interrupt_master_set>
    dece:	bf00      	nop
    ded0:	40008004 	.word	0x40008004
    ded4:	40008008 	.word	0x40008008
    ded8:	4000800c 	.word	0x4000800c

0000dedc <am_hal_ctimer_int_enable>:
    dedc:	b510      	push	{r4, lr}
    dede:	b082      	sub	sp, #8
    dee0:	4604      	mov	r4, r0
    dee2:	f000 f9ef 	bl	e2c4 <am_hal_interrupt_master_disable>
    dee6:	4a06      	ldr	r2, [pc, #24]	; (df00 <am_hal_ctimer_int_enable+0x24>)
    dee8:	9001      	str	r0, [sp, #4]
    deea:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    deee:	4323      	orrs	r3, r4
    def0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    def4:	9801      	ldr	r0, [sp, #4]
    def6:	b002      	add	sp, #8
    def8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    defc:	f000 b9e6 	b.w	e2cc <am_hal_interrupt_master_set>
    df00:	40008000 	.word	0x40008000

0000df04 <am_hal_ctimer_int_clear>:
    df04:	b510      	push	{r4, lr}
    df06:	b082      	sub	sp, #8
    df08:	4604      	mov	r4, r0
    df0a:	f000 f9db 	bl	e2c4 <am_hal_interrupt_master_disable>
    df0e:	4b05      	ldr	r3, [pc, #20]	; (df24 <am_hal_ctimer_int_clear+0x20>)
    df10:	9001      	str	r0, [sp, #4]
    df12:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208
    df16:	9801      	ldr	r0, [sp, #4]
    df18:	b002      	add	sp, #8
    df1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    df1e:	f000 b9d5 	b.w	e2cc <am_hal_interrupt_master_set>
    df22:	bf00      	nop
    df24:	40008000 	.word	0x40008000

0000df28 <am_hal_flash_delay>:
    df28:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    df2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    df2e:	075b      	lsls	r3, r3, #29
    df30:	bf46      	itte	mi
    df32:	0040      	lslmi	r0, r0, #1
    df34:	230e      	movmi	r3, #14
    df36:	230b      	movpl	r3, #11
    df38:	4298      	cmp	r0, r3
    df3a:	d902      	bls.n	df42 <am_hal_flash_delay+0x1a>
    df3c:	4a01      	ldr	r2, [pc, #4]	; (df44 <am_hal_flash_delay+0x1c>)
    df3e:	1ac0      	subs	r0, r0, r3
    df40:	4710      	bx	r2
    df42:	4770      	bx	lr
    df44:	0800009d 	.word	0x0800009d

0000df48 <am_hal_flash_delay_status_check>:
    df48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    df4c:	f89d c020 	ldrb.w	ip, [sp, #32]
    df50:	f8df 805c 	ldr.w	r8, [pc, #92]	; dfb0 <am_hal_flash_delay_status_check+0x68>
    df54:	4604      	mov	r4, r0
    df56:	460d      	mov	r5, r1
    df58:	4616      	mov	r6, r2
    df5a:	461f      	mov	r7, r3
    df5c:	f04f 2940 	mov.w	r9, #1073758208	; 0x40004000
    df60:	f1bc 0f00 	cmp.w	ip, #0
    df64:	d00a      	beq.n	df7c <am_hal_flash_delay_status_check+0x34>
    df66:	e01a      	b.n	df9e <am_hal_flash_delay_status_check+0x56>
    df68:	b1f4      	cbz	r4, dfa8 <am_hal_flash_delay_status_check+0x60>
    df6a:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    df6e:	f013 0f04 	tst.w	r3, #4
    df72:	bf0c      	ite	eq
    df74:	2005      	moveq	r0, #5
    df76:	2012      	movne	r0, #18
    df78:	3c01      	subs	r4, #1
    df7a:	47c0      	blx	r8
    df7c:	6828      	ldr	r0, [r5, #0]
    df7e:	4030      	ands	r0, r6
    df80:	42b8      	cmp	r0, r7
    df82:	d0f1      	beq.n	df68 <am_hal_flash_delay_status_check+0x20>
    df84:	2000      	movs	r0, #0
    df86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    df8a:	b16c      	cbz	r4, dfa8 <am_hal_flash_delay_status_check+0x60>
    df8c:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    df90:	f013 0f04 	tst.w	r3, #4
    df94:	bf0c      	ite	eq
    df96:	2005      	moveq	r0, #5
    df98:	2012      	movne	r0, #18
    df9a:	3c01      	subs	r4, #1
    df9c:	47c0      	blx	r8
    df9e:	6828      	ldr	r0, [r5, #0]
    dfa0:	4030      	ands	r0, r6
    dfa2:	42b8      	cmp	r0, r7
    dfa4:	d1f1      	bne.n	df8a <am_hal_flash_delay_status_check+0x42>
    dfa6:	e7ed      	b.n	df84 <am_hal_flash_delay_status_check+0x3c>
    dfa8:	2004      	movs	r0, #4
    dfaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    dfae:	bf00      	nop
    dfb0:	0800009d 	.word	0x0800009d

0000dfb4 <am_hal_flash_load_ui32>:
    dfb4:	4b00      	ldr	r3, [pc, #0]	; (dfb8 <am_hal_flash_load_ui32+0x4>)
    dfb6:	4718      	bx	r3
    dfb8:	08000075 	.word	0x08000075

0000dfbc <am_hal_flash_store_ui32>:
    dfbc:	4b01      	ldr	r3, [pc, #4]	; (dfc4 <am_hal_flash_store_ui32+0x8>)
    dfbe:	f043 0301 	orr.w	r3, r3, #1
    dfc2:	4718      	bx	r3
    dfc4:	10001010 	.word	0x10001010

0000dfc8 <am_hal_gpio_pinconfig>:
    dfc8:	2831      	cmp	r0, #49	; 0x31
    dfca:	f200 80c3 	bhi.w	e154 <am_hal_gpio_pinconfig+0x18c>
    dfce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dfd2:	4604      	mov	r4, r0
    dfd4:	f011 07e0 	ands.w	r7, r1, #224	; 0xe0
    dfd8:	f001 0007 	and.w	r0, r1, #7
    dfdc:	b085      	sub	sp, #20
    dfde:	f3c1 03c1 	ubfx	r3, r1, #3, #2
    dfe2:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    dfe6:	d00f      	beq.n	e008 <am_hal_gpio_pinconfig+0x40>
    dfe8:	f3c1 1642 	ubfx	r6, r1, #5, #3
    dfec:	1db5      	adds	r5, r6, #6
    dfee:	f005 0507 	and.w	r5, r5, #7
    dff2:	2d03      	cmp	r5, #3
    dff4:	f042 0201 	orr.w	r2, r2, #1
    dff8:	f240 80ae 	bls.w	e158 <am_hal_gpio_pinconfig+0x190>
    dffc:	2fc0      	cmp	r7, #192	; 0xc0
    dffe:	f000 80e1 	beq.w	e1c4 <am_hal_gpio_pinconfig+0x1fc>
    e002:	2f20      	cmp	r7, #32
    e004:	f000 80e3 	beq.w	e1ce <am_hal_gpio_pinconfig+0x206>
    e008:	b163      	cbz	r3, e024 <am_hal_gpio_pinconfig+0x5c>
    e00a:	2b01      	cmp	r3, #1
    e00c:	f000 80d3 	beq.w	e1b6 <am_hal_gpio_pinconfig+0x1ee>
    e010:	2b02      	cmp	r3, #2
    e012:	f040 80c9 	bne.w	e1a8 <am_hal_gpio_pinconfig+0x1e0>
    e016:	4b79      	ldr	r3, [pc, #484]	; (e1fc <am_hal_gpio_pinconfig+0x234>)
    e018:	5d1b      	ldrb	r3, [r3, r4]
    e01a:	075b      	lsls	r3, r3, #29
    e01c:	f140 80c4 	bpl.w	e1a8 <am_hal_gpio_pinconfig+0x1e0>
    e020:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    e024:	4b76      	ldr	r3, [pc, #472]	; (e200 <am_hal_gpio_pinconfig+0x238>)
    e026:	5d1b      	ldrb	r3, [r3, r4]
    e028:	4103      	asrs	r3, r0
    e02a:	005b      	lsls	r3, r3, #1
    e02c:	f003 0302 	and.w	r3, r3, #2
    e030:	4313      	orrs	r3, r2
    e032:	4a74      	ldr	r2, [pc, #464]	; (e204 <am_hal_gpio_pinconfig+0x23c>)
    e034:	5d12      	ldrb	r2, [r2, r4]
    e036:	4282      	cmp	r2, r0
    e038:	f000 8099 	beq.w	e16e <am_hal_gpio_pinconfig+0x1a6>
    e03c:	f3c1 3000 	ubfx	r0, r1, #12, #1
    e040:	f3c1 2581 	ubfx	r5, r1, #10, #2
    e044:	f3c1 3280 	ubfx	r2, r1, #14, #1
    e048:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
    e04c:	0a88      	lsrs	r0, r1, #10
    e04e:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    e052:	f000 0008 	and.w	r0, r0, #8
    e056:	4302      	orrs	r2, r0
    e058:	f3c1 2007 	ubfx	r0, r1, #8, #8
    e05c:	f000 050c 	and.w	r5, r0, #12
    e060:	2d04      	cmp	r5, #4
    e062:	f000 80a5 	beq.w	e1b0 <am_hal_gpio_pinconfig+0x1e8>
    e066:	4d68      	ldr	r5, [pc, #416]	; (e208 <am_hal_gpio_pinconfig+0x240>)
    e068:	682d      	ldr	r5, [r5, #0]
    e06a:	eba1 0805 	sub.w	r8, r1, r5
    e06e:	fab8 f888 	clz	r8, r8
    e072:	ea4f 1858 	mov.w	r8, r8, lsr #5
    e076:	f010 0f60 	tst.w	r0, #96	; 0x60
    e07a:	bf04      	itt	eq
    e07c:	f3c1 30c0 	ubfxeq	r0, r1, #15, #1
    e080:	f360 0200 	bfieq	r2, r0, #0, #1
    e084:	00a0      	lsls	r0, r4, #2
    e086:	f3c1 2101 	ubfx	r1, r1, #8, #2
    e08a:	2902      	cmp	r1, #2
    e08c:	d05c      	beq.n	e148 <am_hal_gpio_pinconfig+0x180>
    e08e:	2903      	cmp	r1, #3
    e090:	d058      	beq.n	e144 <am_hal_gpio_pinconfig+0x17c>
    e092:	2901      	cmp	r1, #1
    e094:	ea4f 01c4 	mov.w	r1, r4, lsl #3
    e098:	bf08      	it	eq
    e09a:	f043 0304 	orreq.w	r3, r3, #4
    e09e:	f001 0118 	and.w	r1, r1, #24
    e0a2:	2700      	movs	r7, #0
    e0a4:	f000 001c 	and.w	r0, r0, #28
    e0a8:	fa02 f600 	lsl.w	r6, r2, r0
    e0ac:	220f      	movs	r2, #15
    e0ae:	4082      	lsls	r2, r0
    e0b0:	43d2      	mvns	r2, r2
    e0b2:	f04f 09ff 	mov.w	r9, #255	; 0xff
    e0b6:	fa03 f501 	lsl.w	r5, r3, r1
    e0ba:	fa09 f901 	lsl.w	r9, r9, r1
    e0be:	9201      	str	r2, [sp, #4]
    e0c0:	f000 f900 	bl	e2c4 <am_hal_interrupt_master_disable>
    e0c4:	f024 0a03 	bic.w	sl, r4, #3
    e0c8:	ea4f 0b54 	mov.w	fp, r4, lsr #1
    e0cc:	f10a 4c80 	add.w	ip, sl, #1073741824	; 0x40000000
    e0d0:	4b4e      	ldr	r3, [pc, #312]	; (e20c <am_hal_gpio_pinconfig+0x244>)
    e0d2:	494f      	ldr	r1, [pc, #316]	; (e210 <am_hal_gpio_pinconfig+0x248>)
    e0d4:	9a01      	ldr	r2, [sp, #4]
    e0d6:	9003      	str	r0, [sp, #12]
    e0d8:	ea6f 0909 	mvn.w	r9, r9
    e0dc:	f02b 0b03 	bic.w	fp, fp, #3
    e0e0:	f50c 3c80 	add.w	ip, ip, #65536	; 0x10000
    e0e4:	f1b8 0f00 	cmp.w	r8, #0
    e0e8:	d00b      	beq.n	e102 <am_hal_gpio_pinconfig+0x13a>
    e0ea:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
    e0ee:	f004 081f 	and.w	r8, r4, #31
    e0f2:	4848      	ldr	r0, [pc, #288]	; (e214 <am_hal_gpio_pinconfig+0x24c>)
    e0f4:	f00e 0e04 	and.w	lr, lr, #4
    e0f8:	2401      	movs	r4, #1
    e0fa:	fa04 f408 	lsl.w	r4, r4, r8
    e0fe:	f84e 4000 	str.w	r4, [lr, r0]
    e102:	4845      	ldr	r0, [pc, #276]	; (e218 <am_hal_gpio_pinconfig+0x250>)
    e104:	2473      	movs	r4, #115	; 0x73
    e106:	6604      	str	r4, [r0, #96]	; 0x60
    e108:	f8dc 4000 	ldr.w	r4, [ip]
    e10c:	ea04 0409 	and.w	r4, r4, r9
    e110:	4325      	orrs	r5, r4
    e112:	f8cc 5000 	str.w	r5, [ip]
    e116:	f85b 4003 	ldr.w	r4, [fp, r3]
    e11a:	4022      	ands	r2, r4
    e11c:	4332      	orrs	r2, r6
    e11e:	f84b 2003 	str.w	r2, [fp, r3]
    e122:	f85a 3001 	ldr.w	r3, [sl, r1]
    e126:	ea03 0909 	and.w	r9, r3, r9
    e12a:	2400      	movs	r4, #0
    e12c:	ea49 0707 	orr.w	r7, r9, r7
    e130:	f84a 7001 	str.w	r7, [sl, r1]
    e134:	6604      	str	r4, [r0, #96]	; 0x60
    e136:	9803      	ldr	r0, [sp, #12]
    e138:	f000 f8c8 	bl	e2cc <am_hal_interrupt_master_set>
    e13c:	4620      	mov	r0, r4
    e13e:	b005      	add	sp, #20
    e140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e144:	f043 0304 	orr.w	r3, r3, #4
    e148:	00e1      	lsls	r1, r4, #3
    e14a:	f001 0118 	and.w	r1, r1, #24
    e14e:	2701      	movs	r7, #1
    e150:	408f      	lsls	r7, r1
    e152:	e7a7      	b.n	e0a4 <am_hal_gpio_pinconfig+0xdc>
    e154:	2006      	movs	r0, #6
    e156:	4770      	bx	lr
    e158:	4d28      	ldr	r5, [pc, #160]	; (e1fc <am_hal_gpio_pinconfig+0x234>)
    e15a:	5d2d      	ldrb	r5, [r5, r4]
    e15c:	3e02      	subs	r6, #2
    e15e:	ea42 1286 	orr.w	r2, r2, r6, lsl #6
    e162:	07ee      	lsls	r6, r5, #31
    e164:	d536      	bpl.n	e1d4 <am_hal_gpio_pinconfig+0x20c>
    e166:	2b00      	cmp	r3, #0
    e168:	f43f af5c 	beq.w	e024 <am_hal_gpio_pinconfig+0x5c>
    e16c:	e74d      	b.n	e00a <am_hal_gpio_pinconfig+0x42>
    e16e:	f3c1 4202 	ubfx	r2, r1, #16, #3
    e172:	2a07      	cmp	r2, #7
    e174:	d030      	beq.n	e1d8 <am_hal_gpio_pinconfig+0x210>
    e176:	4d29      	ldr	r5, [pc, #164]	; (e21c <am_hal_gpio_pinconfig+0x254>)
    e178:	f3c1 40c1 	ubfx	r0, r1, #19, #2
    e17c:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
    e180:	f815 0024 	ldrb.w	r0, [r5, r4, lsl #2]
    e184:	4290      	cmp	r0, r2
    e186:	d029      	beq.n	e1dc <am_hal_gpio_pinconfig+0x214>
    e188:	eb05 0584 	add.w	r5, r5, r4, lsl #2
    e18c:	00a0      	lsls	r0, r4, #2
    e18e:	786e      	ldrb	r6, [r5, #1]
    e190:	4296      	cmp	r6, r2
    e192:	d02d      	beq.n	e1f0 <am_hal_gpio_pinconfig+0x228>
    e194:	78ae      	ldrb	r6, [r5, #2]
    e196:	4296      	cmp	r6, r2
    e198:	d02c      	beq.n	e1f4 <am_hal_gpio_pinconfig+0x22c>
    e19a:	78ed      	ldrb	r5, [r5, #3]
    e19c:	4295      	cmp	r5, r2
    e19e:	d02b      	beq.n	e1f8 <am_hal_gpio_pinconfig+0x230>
    e1a0:	481f      	ldr	r0, [pc, #124]	; (e220 <am_hal_gpio_pinconfig+0x258>)
    e1a2:	b005      	add	sp, #20
    e1a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e1a8:	481e      	ldr	r0, [pc, #120]	; (e224 <am_hal_gpio_pinconfig+0x25c>)
    e1aa:	b005      	add	sp, #20
    e1ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e1b0:	f04f 0801 	mov.w	r8, #1
    e1b4:	e75f      	b.n	e076 <am_hal_gpio_pinconfig+0xae>
    e1b6:	4b11      	ldr	r3, [pc, #68]	; (e1fc <am_hal_gpio_pinconfig+0x234>)
    e1b8:	5d1b      	ldrb	r3, [r3, r4]
    e1ba:	079d      	lsls	r5, r3, #30
    e1bc:	d5f4      	bpl.n	e1a8 <am_hal_gpio_pinconfig+0x1e0>
    e1be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    e1c2:	e72f      	b.n	e024 <am_hal_gpio_pinconfig+0x5c>
    e1c4:	2c14      	cmp	r4, #20
    e1c6:	f43f af1f 	beq.w	e008 <am_hal_gpio_pinconfig+0x40>
    e1ca:	4817      	ldr	r0, [pc, #92]	; (e228 <am_hal_gpio_pinconfig+0x260>)
    e1cc:	e7b7      	b.n	e13e <am_hal_gpio_pinconfig+0x176>
    e1ce:	2c14      	cmp	r4, #20
    e1d0:	f47f af1a 	bne.w	e008 <am_hal_gpio_pinconfig+0x40>
    e1d4:	4815      	ldr	r0, [pc, #84]	; (e22c <am_hal_gpio_pinconfig+0x264>)
    e1d6:	e7b2      	b.n	e13e <am_hal_gpio_pinconfig+0x176>
    e1d8:	4815      	ldr	r0, [pc, #84]	; (e230 <am_hal_gpio_pinconfig+0x268>)
    e1da:	e7b0      	b.n	e13e <am_hal_gpio_pinconfig+0x176>
    e1dc:	2200      	movs	r2, #0
    e1de:	00a0      	lsls	r0, r4, #2
    e1e0:	0052      	lsls	r2, r2, #1
    e1e2:	f3c1 5540 	ubfx	r5, r1, #21, #1
    e1e6:	ea42 02c5 	orr.w	r2, r2, r5, lsl #3
    e1ea:	f04f 0800 	mov.w	r8, #0
    e1ee:	e74a      	b.n	e086 <am_hal_gpio_pinconfig+0xbe>
    e1f0:	2201      	movs	r2, #1
    e1f2:	e7f5      	b.n	e1e0 <am_hal_gpio_pinconfig+0x218>
    e1f4:	2202      	movs	r2, #2
    e1f6:	e7f3      	b.n	e1e0 <am_hal_gpio_pinconfig+0x218>
    e1f8:	2203      	movs	r2, #3
    e1fa:	e7f1      	b.n	e1e0 <am_hal_gpio_pinconfig+0x218>
    e1fc:	0000ec40 	.word	0x0000ec40
    e200:	0000ec74 	.word	0x0000ec74
    e204:	0000ed70 	.word	0x0000ed70
    e208:	0000ec38 	.word	0x0000ec38
    e20c:	40010040 	.word	0x40010040
    e210:	400100e0 	.word	0x400100e0
    e214:	400100b4 	.word	0x400100b4
    e218:	40010000 	.word	0x40010000
    e21c:	0000eca8 	.word	0x0000eca8
    e220:	08000104 	.word	0x08000104
    e224:	08000102 	.word	0x08000102
    e228:	08000101 	.word	0x08000101
    e22c:	08000100 	.word	0x08000100
    e230:	08000103 	.word	0x08000103

0000e234 <am_hal_gpio_state_write>:
    e234:	2831      	cmp	r0, #49	; 0x31
    e236:	d81a      	bhi.n	e26e <am_hal_gpio_state_write+0x3a>
    e238:	b570      	push	{r4, r5, r6, lr}
    e23a:	2905      	cmp	r1, #5
    e23c:	b082      	sub	sp, #8
    e23e:	460d      	mov	r5, r1
    e240:	d812      	bhi.n	e268 <am_hal_gpio_state_write+0x34>
    e242:	f000 031f 	and.w	r3, r0, #31
    e246:	2201      	movs	r2, #1
    e248:	08c0      	lsrs	r0, r0, #3
    e24a:	fa02 f603 	lsl.w	r6, r2, r3
    e24e:	f000 0404 	and.w	r4, r0, #4
    e252:	f000 f837 	bl	e2c4 <am_hal_interrupt_master_disable>
    e256:	3d01      	subs	r5, #1
    e258:	9001      	str	r0, [sp, #4]
    e25a:	2d04      	cmp	r5, #4
    e25c:	d821      	bhi.n	e2a2 <am_hal_gpio_state_write+0x6e>
    e25e:	e8df f005 	tbb	[pc, r5]
    e262:	1512      	.short	0x1512
    e264:	1d1a      	.short	0x1d1a
    e266:	08          	.byte	0x08
    e267:	00          	.byte	0x00
    e268:	2006      	movs	r0, #6
    e26a:	b002      	add	sp, #8
    e26c:	bd70      	pop	{r4, r5, r6, pc}
    e26e:	2005      	movs	r0, #5
    e270:	4770      	bx	lr
    e272:	4a0d      	ldr	r2, [pc, #52]	; (e2a8 <am_hal_gpio_state_write+0x74>)
    e274:	58a3      	ldr	r3, [r4, r2]
    e276:	4073      	eors	r3, r6
    e278:	50a3      	str	r3, [r4, r2]
    e27a:	9801      	ldr	r0, [sp, #4]
    e27c:	f000 f826 	bl	e2cc <am_hal_interrupt_master_set>
    e280:	2000      	movs	r0, #0
    e282:	b002      	add	sp, #8
    e284:	bd70      	pop	{r4, r5, r6, pc}
    e286:	4b09      	ldr	r3, [pc, #36]	; (e2ac <am_hal_gpio_state_write+0x78>)
    e288:	50e6      	str	r6, [r4, r3]
    e28a:	e7f6      	b.n	e27a <am_hal_gpio_state_write+0x46>
    e28c:	4a08      	ldr	r2, [pc, #32]	; (e2b0 <am_hal_gpio_state_write+0x7c>)
    e28e:	58a3      	ldr	r3, [r4, r2]
    e290:	4073      	eors	r3, r6
    e292:	50a3      	str	r3, [r4, r2]
    e294:	e7f1      	b.n	e27a <am_hal_gpio_state_write+0x46>
    e296:	4b04      	ldr	r3, [pc, #16]	; (e2a8 <am_hal_gpio_state_write+0x74>)
    e298:	50e6      	str	r6, [r4, r3]
    e29a:	e7ee      	b.n	e27a <am_hal_gpio_state_write+0x46>
    e29c:	4b05      	ldr	r3, [pc, #20]	; (e2b4 <am_hal_gpio_state_write+0x80>)
    e29e:	50e6      	str	r6, [r4, r3]
    e2a0:	e7eb      	b.n	e27a <am_hal_gpio_state_write+0x46>
    e2a2:	4b05      	ldr	r3, [pc, #20]	; (e2b8 <am_hal_gpio_state_write+0x84>)
    e2a4:	50e6      	str	r6, [r4, r3]
    e2a6:	e7e8      	b.n	e27a <am_hal_gpio_state_write+0x46>
    e2a8:	400100b4 	.word	0x400100b4
    e2ac:	40010090 	.word	0x40010090
    e2b0:	40010088 	.word	0x40010088
    e2b4:	400100a8 	.word	0x400100a8
    e2b8:	40010098 	.word	0x40010098

0000e2bc <am_hal_interrupt_master_enable>:
    e2bc:	f3ef 8010 	mrs	r0, PRIMASK
    e2c0:	b662      	cpsie	i
    e2c2:	4770      	bx	lr

0000e2c4 <am_hal_interrupt_master_disable>:
    e2c4:	f3ef 8010 	mrs	r0, PRIMASK
    e2c8:	b672      	cpsid	i
    e2ca:	4770      	bx	lr

0000e2cc <am_hal_interrupt_master_set>:
    e2cc:	f380 8810 	msr	PRIMASK, r0
    e2d0:	4770      	bx	lr
    e2d2:	bf00      	nop

0000e2d4 <am_hal_mcuctrl_info_get>:
    e2d4:	2900      	cmp	r1, #0
    e2d6:	f000 808f 	beq.w	e3f8 <am_hal_mcuctrl_info_get+0x124>
    e2da:	2801      	cmp	r0, #1
    e2dc:	b430      	push	{r4, r5}
    e2de:	d006      	beq.n	e2ee <am_hal_mcuctrl_info_get+0x1a>
    e2e0:	2802      	cmp	r0, #2
    e2e2:	d06d      	beq.n	e3c0 <am_hal_mcuctrl_info_get+0xec>
    e2e4:	2800      	cmp	r0, #0
    e2e6:	d055      	beq.n	e394 <am_hal_mcuctrl_info_get+0xc0>
    e2e8:	2006      	movs	r0, #6
    e2ea:	bc30      	pop	{r4, r5}
    e2ec:	4770      	bx	lr
    e2ee:	4a43      	ldr	r2, [pc, #268]	; (e3fc <am_hal_mcuctrl_info_get+0x128>)
    e2f0:	4843      	ldr	r0, [pc, #268]	; (e400 <am_hal_mcuctrl_info_get+0x12c>)
    e2f2:	6813      	ldr	r3, [r2, #0]
    e2f4:	600b      	str	r3, [r1, #0]
    e2f6:	6854      	ldr	r4, [r2, #4]
    e2f8:	604c      	str	r4, [r1, #4]
    e2fa:	6894      	ldr	r4, [r2, #8]
    e2fc:	608c      	str	r4, [r1, #8]
    e2fe:	68d4      	ldr	r4, [r2, #12]
    e300:	60cc      	str	r4, [r1, #12]
    e302:	f3c3 5503 	ubfx	r5, r3, #20, #4
    e306:	6914      	ldr	r4, [r2, #16]
    e308:	610c      	str	r4, [r1, #16]
    e30a:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
    e30e:	4c3d      	ldr	r4, [pc, #244]	; (e404 <am_hal_mcuctrl_info_get+0x130>)
    e310:	6950      	ldr	r0, [r2, #20]
    e312:	6148      	str	r0, [r1, #20]
    e314:	f003 0201 	and.w	r2, r3, #1
    e318:	f3c3 4303 	ubfx	r3, r3, #16, #4
    e31c:	e9c1 2506 	strd	r2, r5, [r1, #24]
    e320:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    e324:	4a38      	ldr	r2, [pc, #224]	; (e408 <am_hal_mcuctrl_info_get+0x134>)
    e326:	620b      	str	r3, [r1, #32]
    e328:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
    e32c:	f8d2 00e4 	ldr.w	r0, [r2, #228]	; 0xe4
    e330:	b2db      	uxtb	r3, r3
    e332:	f000 000f 	and.w	r0, r0, #15
    e336:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    e33a:	624b      	str	r3, [r1, #36]	; 0x24
    e33c:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    e340:	f8d2 00e8 	ldr.w	r0, [r2, #232]	; 0xe8
    e344:	f3c3 1303 	ubfx	r3, r3, #4, #4
    e348:	f000 000f 	and.w	r0, r0, #15
    e34c:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
    e350:	628b      	str	r3, [r1, #40]	; 0x28
    e352:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
    e356:	f8d2 00ec 	ldr.w	r0, [r2, #236]	; 0xec
    e35a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    e35e:	f3c0 1003 	ubfx	r0, r0, #4, #4
    e362:	4303      	orrs	r3, r0
    e364:	62cb      	str	r3, [r1, #44]	; 0x2c
    e366:	f8d2 40fc 	ldr.w	r4, [r2, #252]	; 0xfc
    e36a:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    e36e:	f8d2 00f4 	ldr.w	r0, [r2, #244]	; 0xf4
    e372:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
    e376:	b2db      	uxtb	r3, r3
    e378:	041b      	lsls	r3, r3, #16
    e37a:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
    e37e:	fa5f fc82 	uxtb.w	ip, r2
    e382:	ea43 030c 	orr.w	r3, r3, ip
    e386:	b2c2      	uxtb	r2, r0
    e388:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    e38c:	630b      	str	r3, [r1, #48]	; 0x30
    e38e:	2000      	movs	r0, #0
    e390:	bc30      	pop	{r4, r5}
    e392:	4770      	bx	lr
    e394:	4a19      	ldr	r2, [pc, #100]	; (e3fc <am_hal_mcuctrl_info_get+0x128>)
    e396:	6993      	ldr	r3, [r2, #24]
    e398:	f3c3 1480 	ubfx	r4, r3, #6, #1
    e39c:	700c      	strb	r4, [r1, #0]
    e39e:	f8d2 41a0 	ldr.w	r4, [r2, #416]	; 0x1a0
    e3a2:	f3c3 0380 	ubfx	r3, r3, #2, #1
    e3a6:	704b      	strb	r3, [r1, #1]
    e3a8:	f3c4 6381 	ubfx	r3, r4, #26, #2
    e3ac:	710b      	strb	r3, [r1, #4]
    e3ae:	6953      	ldr	r3, [r2, #20]
    e3b0:	f3c3 0240 	ubfx	r2, r3, #1, #1
    e3b4:	f003 0301 	and.w	r3, r3, #1
    e3b8:	bc30      	pop	{r4, r5}
    e3ba:	708a      	strb	r2, [r1, #2]
    e3bc:	70cb      	strb	r3, [r1, #3]
    e3be:	4770      	bx	lr
    e3c0:	4a0e      	ldr	r2, [pc, #56]	; (e3fc <am_hal_mcuctrl_info_get+0x128>)
    e3c2:	6848      	ldr	r0, [r1, #4]
    e3c4:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
    e3c8:	f003 0401 	and.w	r4, r3, #1
    e3cc:	700c      	strb	r4, [r1, #0]
    e3ce:	f3c3 0440 	ubfx	r4, r3, #1, #1
    e3d2:	720c      	strb	r4, [r1, #8]
    e3d4:	f8d2 41c4 	ldr.w	r4, [r2, #452]	; 0x1c4
    e3d8:	60cc      	str	r4, [r1, #12]
    e3da:	f8d2 41c0 	ldr.w	r4, [r2, #448]	; 0x1c0
    e3de:	4320      	orrs	r0, r4
    e3e0:	f3c3 0380 	ubfx	r3, r3, #2, #1
    e3e4:	6048      	str	r0, [r1, #4]
    e3e6:	f8d2 21c8 	ldr.w	r2, [r2, #456]	; 0x1c8
    e3ea:	740b      	strb	r3, [r1, #16]
    e3ec:	694b      	ldr	r3, [r1, #20]
    e3ee:	4313      	orrs	r3, r2
    e3f0:	2000      	movs	r0, #0
    e3f2:	bc30      	pop	{r4, r5}
    e3f4:	614b      	str	r3, [r1, #20]
    e3f6:	4770      	bx	lr
    e3f8:	2006      	movs	r0, #6
    e3fa:	4770      	bx	lr
    e3fc:	40020000 	.word	0x40020000
    e400:	0000eda4 	.word	0x0000eda4
    e404:	0000ede4 	.word	0x0000ede4
    e408:	f0000f00 	.word	0xf0000f00

0000e40c <am_hal_pwrctrl_periph_enable>:
    e40c:	b570      	push	{r4, r5, r6, lr}
    e40e:	b082      	sub	sp, #8
    e410:	4604      	mov	r4, r0
    e412:	f7ff ff57 	bl	e2c4 <am_hal_interrupt_master_disable>
    e416:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    e41a:	4e0f      	ldr	r6, [pc, #60]	; (e458 <am_hal_pwrctrl_periph_enable+0x4c>)
    e41c:	4d0f      	ldr	r5, [pc, #60]	; (e45c <am_hal_pwrctrl_periph_enable+0x50>)
    e41e:	9001      	str	r0, [sp, #4]
    e420:	00a4      	lsls	r4, r4, #2
    e422:	68b3      	ldr	r3, [r6, #8]
    e424:	592a      	ldr	r2, [r5, r4]
    e426:	4313      	orrs	r3, r2
    e428:	60b3      	str	r3, [r6, #8]
    e42a:	9801      	ldr	r0, [sp, #4]
    e42c:	442c      	add	r4, r5
    e42e:	f7ff ff4d 	bl	e2cc <am_hal_interrupt_master_set>
    e432:	20a0      	movs	r0, #160	; 0xa0
    e434:	f7ff fd78 	bl	df28 <am_hal_flash_delay>
    e438:	69b3      	ldr	r3, [r6, #24]
    e43a:	6864      	ldr	r4, [r4, #4]
    e43c:	4223      	tst	r3, r4
    e43e:	d103      	bne.n	e448 <am_hal_pwrctrl_periph_enable+0x3c>
    e440:	20a0      	movs	r0, #160	; 0xa0
    e442:	f7ff fd71 	bl	df28 <am_hal_flash_delay>
    e446:	69b3      	ldr	r3, [r6, #24]
    e448:	4b03      	ldr	r3, [pc, #12]	; (e458 <am_hal_pwrctrl_periph_enable+0x4c>)
    e44a:	699b      	ldr	r3, [r3, #24]
    e44c:	4223      	tst	r3, r4
    e44e:	bf0c      	ite	eq
    e450:	2001      	moveq	r0, #1
    e452:	2000      	movne	r0, #0
    e454:	b002      	add	sp, #8
    e456:	bd70      	pop	{r4, r5, r6, pc}
    e458:	40021000 	.word	0x40021000
    e45c:	0000efd4 	.word	0x0000efd4

0000e460 <am_hal_pwrctrl_periph_disable>:
    e460:	b570      	push	{r4, r5, r6, lr}
    e462:	b082      	sub	sp, #8
    e464:	4604      	mov	r4, r0
    e466:	f7ff ff2d 	bl	e2c4 <am_hal_interrupt_master_disable>
    e46a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    e46e:	4e10      	ldr	r6, [pc, #64]	; (e4b0 <am_hal_pwrctrl_periph_disable+0x50>)
    e470:	4d10      	ldr	r5, [pc, #64]	; (e4b4 <am_hal_pwrctrl_periph_disable+0x54>)
    e472:	9001      	str	r0, [sp, #4]
    e474:	00a4      	lsls	r4, r4, #2
    e476:	68b3      	ldr	r3, [r6, #8]
    e478:	592a      	ldr	r2, [r5, r4]
    e47a:	ea23 0302 	bic.w	r3, r3, r2
    e47e:	60b3      	str	r3, [r6, #8]
    e480:	9801      	ldr	r0, [sp, #4]
    e482:	442c      	add	r4, r5
    e484:	f7ff ff22 	bl	e2cc <am_hal_interrupt_master_set>
    e488:	20a0      	movs	r0, #160	; 0xa0
    e48a:	f7ff fd4d 	bl	df28 <am_hal_flash_delay>
    e48e:	69b3      	ldr	r3, [r6, #24]
    e490:	6864      	ldr	r4, [r4, #4]
    e492:	4223      	tst	r3, r4
    e494:	d003      	beq.n	e49e <am_hal_pwrctrl_periph_disable+0x3e>
    e496:	20a0      	movs	r0, #160	; 0xa0
    e498:	f7ff fd46 	bl	df28 <am_hal_flash_delay>
    e49c:	69b3      	ldr	r3, [r6, #24]
    e49e:	4b04      	ldr	r3, [pc, #16]	; (e4b0 <am_hal_pwrctrl_periph_disable+0x50>)
    e4a0:	699b      	ldr	r3, [r3, #24]
    e4a2:	4223      	tst	r3, r4
    e4a4:	bf14      	ite	ne
    e4a6:	2001      	movne	r0, #1
    e4a8:	2000      	moveq	r0, #0
    e4aa:	b002      	add	sp, #8
    e4ac:	bd70      	pop	{r4, r5, r6, pc}
    e4ae:	bf00      	nop
    e4b0:	40021000 	.word	0x40021000
    e4b4:	0000efd4 	.word	0x0000efd4

0000e4b8 <am_hal_pwrctrl_memory_enable>:
    e4b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e4bc:	4d22      	ldr	r5, [pc, #136]	; (e548 <am_hal_pwrctrl_memory_enable+0x90>)
    e4be:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    e4c2:	eb05 09c3 	add.w	r9, r5, r3, lsl #3
    e4c6:	f855 8033 	ldr.w	r8, [r5, r3, lsl #3]
    e4ca:	f8d9 6010 	ldr.w	r6, [r9, #16]
    e4ce:	f1b8 3fff 	cmp.w	r8, #4294967295
    e4d2:	4604      	mov	r4, r0
    e4d4:	ea4f 0740 	mov.w	r7, r0, lsl #1
    e4d8:	d120      	bne.n	e51c <am_hal_pwrctrl_memory_enable+0x64>
    e4da:	f8df 9070 	ldr.w	r9, [pc, #112]	; e54c <am_hal_pwrctrl_memory_enable+0x94>
    e4de:	f8d9 3010 	ldr.w	r3, [r9, #16]
    e4e2:	443c      	add	r4, r7
    e4e4:	ea43 0308 	orr.w	r3, r3, r8
    e4e8:	f8c9 3010 	str.w	r3, [r9, #16]
    e4ec:	20a0      	movs	r0, #160	; 0xa0
    e4ee:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
    e4f2:	f7ff fd19 	bl	df28 <am_hal_flash_delay>
    e4f6:	f8d9 3014 	ldr.w	r3, [r9, #20]
    e4fa:	686c      	ldr	r4, [r5, #4]
    e4fc:	4033      	ands	r3, r6
    e4fe:	42a3      	cmp	r3, r4
    e500:	d004      	beq.n	e50c <am_hal_pwrctrl_memory_enable+0x54>
    e502:	20a0      	movs	r0, #160	; 0xa0
    e504:	f7ff fd10 	bl	df28 <am_hal_flash_delay>
    e508:	f8d9 3014 	ldr.w	r3, [r9, #20]
    e50c:	4b0f      	ldr	r3, [pc, #60]	; (e54c <am_hal_pwrctrl_memory_enable+0x94>)
    e50e:	6958      	ldr	r0, [r3, #20]
    e510:	4030      	ands	r0, r6
    e512:	1b00      	subs	r0, r0, r4
    e514:	bf18      	it	ne
    e516:	2001      	movne	r0, #1
    e518:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    e51c:	f8d9 300c 	ldr.w	r3, [r9, #12]
    e520:	4a0a      	ldr	r2, [pc, #40]	; (e54c <am_hal_pwrctrl_memory_enable+0x94>)
    e522:	ea68 0303 	orn	r3, r8, r3
    e526:	6911      	ldr	r1, [r2, #16]
    e528:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    e52c:	f043 0301 	orr.w	r3, r3, #1
    e530:	400b      	ands	r3, r1
    e532:	2010      	movs	r0, #16
    e534:	6113      	str	r3, [r2, #16]
    e536:	f7ff fcf7 	bl	df28 <am_hal_flash_delay>
    e53a:	f1b8 0f00 	cmp.w	r8, #0
    e53e:	d1cc      	bne.n	e4da <am_hal_pwrctrl_memory_enable+0x22>
    e540:	f8d9 4004 	ldr.w	r4, [r9, #4]
    e544:	e7e2      	b.n	e50c <am_hal_pwrctrl_memory_enable+0x54>
    e546:	bf00      	nop
    e548:	0000ee24 	.word	0x0000ee24
    e54c:	40021000 	.word	0x40021000

0000e550 <am_hal_pwrctrl_low_power_init>:
    e550:	b530      	push	{r4, r5, lr}
    e552:	4b69      	ldr	r3, [pc, #420]	; (e6f8 <am_hal_pwrctrl_low_power_init+0x1a8>)
    e554:	681a      	ldr	r2, [r3, #0]
    e556:	b085      	sub	sp, #20
    e558:	b912      	cbnz	r2, e560 <am_hal_pwrctrl_low_power_init+0x10>
    e55a:	4a68      	ldr	r2, [pc, #416]	; (e6fc <am_hal_pwrctrl_low_power_init+0x1ac>)
    e55c:	6812      	ldr	r2, [r2, #0]
    e55e:	601a      	str	r2, [r3, #0]
    e560:	4b67      	ldr	r3, [pc, #412]	; (e700 <am_hal_pwrctrl_low_power_init+0x1b0>)
    e562:	68db      	ldr	r3, [r3, #12]
    e564:	b2db      	uxtb	r3, r3
    e566:	2b12      	cmp	r3, #18
    e568:	d104      	bne.n	e574 <am_hal_pwrctrl_low_power_init+0x24>
    e56a:	4c66      	ldr	r4, [pc, #408]	; (e704 <am_hal_pwrctrl_low_power_init+0x1b4>)
    e56c:	6863      	ldr	r3, [r4, #4]
    e56e:	07d8      	lsls	r0, r3, #31
    e570:	f100 8088 	bmi.w	e684 <am_hal_pwrctrl_low_power_init+0x134>
    e574:	4b62      	ldr	r3, [pc, #392]	; (e700 <am_hal_pwrctrl_low_power_init+0x1b0>)
    e576:	68da      	ldr	r2, [r3, #12]
    e578:	b2d2      	uxtb	r2, r2
    e57a:	2a20      	cmp	r2, #32
    e57c:	d934      	bls.n	e5e8 <am_hal_pwrctrl_low_power_init+0x98>
    e57e:	f8d3 2354 	ldr.w	r2, [r3, #852]	; 0x354
    e582:	2002      	movs	r0, #2
    e584:	f360 4213 	bfi	r2, r0, #16, #4
    e588:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    e58c:	f8d3 1354 	ldr.w	r1, [r3, #852]	; 0x354
    e590:	2203      	movs	r2, #3
    e592:	f362 5117 	bfi	r1, r2, #20, #4
    e596:	f8c3 1354 	str.w	r1, [r3, #852]	; 0x354
    e59a:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    e59e:	2405      	movs	r4, #5
    e5a0:	f364 0103 	bfi	r1, r4, #0, #4
    e5a4:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    e5a8:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    e5ac:	f360 1107 	bfi	r1, r0, #4, #4
    e5b0:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    e5b4:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    e5b8:	2406      	movs	r4, #6
    e5ba:	f364 210b 	bfi	r1, r4, #8, #4
    e5be:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    e5c2:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    e5c6:	2001      	movs	r0, #1
    e5c8:	f360 310f 	bfi	r1, r0, #12, #4
    e5cc:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    e5d0:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    e5d4:	f362 61de 	bfi	r1, r2, #27, #4
    e5d8:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    e5dc:	f8d3 135c 	ldr.w	r1, [r3, #860]	; 0x35c
    e5e0:	f362 0103 	bfi	r1, r2, #0, #4
    e5e4:	f8c3 135c 	str.w	r1, [r3, #860]	; 0x35c
    e5e8:	4a45      	ldr	r2, [pc, #276]	; (e700 <am_hal_pwrctrl_low_power_init+0x1b0>)
    e5ea:	68d3      	ldr	r3, [r2, #12]
    e5ec:	b2db      	uxtb	r3, r3
    e5ee:	2b11      	cmp	r3, #17
    e5f0:	d905      	bls.n	e5fe <am_hal_pwrctrl_low_power_init+0xae>
    e5f2:	f8d2 335c 	ldr.w	r3, [r2, #860]	; 0x35c
    e5f6:	f36f 6318 	bfc	r3, #24, #1
    e5fa:	f8c2 335c 	str.w	r3, [r2, #860]	; 0x35c
    e5fe:	2100      	movs	r1, #0
    e600:	200c      	movs	r0, #12
    e602:	f7ff f961 	bl	d8c8 <am_hal_cachectrl_control>
    e606:	4b3f      	ldr	r3, [pc, #252]	; (e704 <am_hal_pwrctrl_low_power_init+0x1b4>)
    e608:	699b      	ldr	r3, [r3, #24]
    e60a:	f3c3 2500 	ubfx	r5, r3, #8, #1
    e60e:	05db      	lsls	r3, r3, #23
    e610:	d420      	bmi.n	e654 <am_hal_pwrctrl_low_power_init+0x104>
    e612:	4c3b      	ldr	r4, [pc, #236]	; (e700 <am_hal_pwrctrl_low_power_init+0x1b0>)
    e614:	68e3      	ldr	r3, [r4, #12]
    e616:	b2db      	uxtb	r3, r3
    e618:	2b11      	cmp	r3, #17
    e61a:	d84e      	bhi.n	e6ba <am_hal_pwrctrl_low_power_init+0x16a>
    e61c:	4c38      	ldr	r4, [pc, #224]	; (e700 <am_hal_pwrctrl_low_power_init+0x1b0>)
    e61e:	493a      	ldr	r1, [pc, #232]	; (e708 <am_hal_pwrctrl_low_power_init+0x1b8>)
    e620:	7e22      	ldrb	r2, [r4, #24]
    e622:	2001      	movs	r0, #1
    e624:	4302      	orrs	r2, r0
    e626:	2307      	movs	r3, #7
    e628:	7622      	strb	r2, [r4, #24]
    e62a:	9000      	str	r0, [sp, #0]
    e62c:	461a      	mov	r2, r3
    e62e:	f242 7010 	movw	r0, #10000	; 0x2710
    e632:	f7ff fc89 	bl	df48 <am_hal_flash_delay_status_check>
    e636:	2800      	cmp	r0, #0
    e638:	d15a      	bne.n	e6f0 <am_hal_pwrctrl_low_power_init+0x1a0>
    e63a:	4b32      	ldr	r3, [pc, #200]	; (e704 <am_hal_pwrctrl_low_power_init+0x1b4>)
    e63c:	681a      	ldr	r2, [r3, #0]
    e63e:	f042 0201 	orr.w	r2, r2, #1
    e642:	601a      	str	r2, [r3, #0]
    e644:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    e646:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    e64a:	625a      	str	r2, [r3, #36]	; 0x24
    e64c:	68e3      	ldr	r3, [r4, #12]
    e64e:	b2db      	uxtb	r3, r3
    e650:	2b11      	cmp	r3, #17
    e652:	d002      	beq.n	e65a <am_hal_pwrctrl_low_power_init+0x10a>
    e654:	2000      	movs	r0, #0
    e656:	b005      	add	sp, #20
    e658:	bd30      	pop	{r4, r5, pc}
    e65a:	f8d4 335c 	ldr.w	r3, [r4, #860]	; 0x35c
    e65e:	f360 5356 	bfi	r3, r0, #21, #2
    e662:	f8c4 335c 	str.w	r3, [r4, #860]	; 0x35c
    e666:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    e66a:	220f      	movs	r2, #15
    e66c:	f362 138b 	bfi	r3, r2, #6, #6
    e670:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    e674:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    e678:	f362 0305 	bfi	r3, r2, #0, #6
    e67c:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    e680:	b005      	add	sp, #20
    e682:	bd30      	pop	{r4, r5, pc}
    e684:	f7ff fe1e 	bl	e2c4 <am_hal_interrupt_master_disable>
    e688:	9002      	str	r0, [sp, #8]
    e68a:	68a3      	ldr	r3, [r4, #8]
    e68c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    e690:	60a3      	str	r3, [r4, #8]
    e692:	9802      	ldr	r0, [sp, #8]
    e694:	f7ff fe1a 	bl	e2cc <am_hal_interrupt_master_set>
    e698:	20a0      	movs	r0, #160	; 0xa0
    e69a:	f7ff fc45 	bl	df28 <am_hal_flash_delay>
    e69e:	69a3      	ldr	r3, [r4, #24]
    e6a0:	0619      	lsls	r1, r3, #24
    e6a2:	d403      	bmi.n	e6ac <am_hal_pwrctrl_low_power_init+0x15c>
    e6a4:	20a0      	movs	r0, #160	; 0xa0
    e6a6:	f7ff fc3f 	bl	df28 <am_hal_flash_delay>
    e6aa:	69a3      	ldr	r3, [r4, #24]
    e6ac:	4b15      	ldr	r3, [pc, #84]	; (e704 <am_hal_pwrctrl_low_power_init+0x1b4>)
    e6ae:	699b      	ldr	r3, [r3, #24]
    e6b0:	061a      	lsls	r2, r3, #24
    e6b2:	f53f af5f 	bmi.w	e574 <am_hal_pwrctrl_low_power_init+0x24>
    e6b6:	2001      	movs	r0, #1
    e6b8:	e7cd      	b.n	e656 <am_hal_pwrctrl_low_power_init+0x106>
    e6ba:	f7ff fe03 	bl	e2c4 <am_hal_interrupt_master_disable>
    e6be:	9003      	str	r0, [sp, #12]
    e6c0:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    e6c4:	2219      	movs	r2, #25
    e6c6:	f362 138b 	bfi	r3, r2, #6, #6
    e6ca:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    e6ce:	f8d4 2368 	ldr.w	r2, [r4, #872]	; 0x368
    e6d2:	210c      	movs	r1, #12
    e6d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e6d8:	f361 0205 	bfi	r2, r1, #0, #6
    e6dc:	f8c4 2368 	str.w	r2, [r4, #872]	; 0x368
    e6e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    e6e2:	f365 5296 	bfi	r2, r5, #22, #1
    e6e6:	63da      	str	r2, [r3, #60]	; 0x3c
    e6e8:	9803      	ldr	r0, [sp, #12]
    e6ea:	f7ff fdef 	bl	e2cc <am_hal_interrupt_master_set>
    e6ee:	e795      	b.n	e61c <am_hal_pwrctrl_low_power_init+0xcc>
    e6f0:	2004      	movs	r0, #4
    e6f2:	b005      	add	sp, #20
    e6f4:	bd30      	pop	{r4, r5, pc}
    e6f6:	bf00      	nop
    e6f8:	100011a4 	.word	0x100011a4
    e6fc:	4ffff000 	.word	0x4ffff000
    e700:	40020000 	.word	0x40020000
    e704:	40021000 	.word	0x40021000
    e708:	40020018 	.word	0x40020018

0000e70c <am_hal_sysctrl_sleep>:
    e70c:	b510      	push	{r4, lr}
    e70e:	b082      	sub	sp, #8
    e710:	4604      	mov	r4, r0
    e712:	f7ff fdd7 	bl	e2c4 <am_hal_interrupt_master_disable>
    e716:	9001      	str	r0, [sp, #4]
    e718:	b124      	cbz	r4, e724 <am_hal_sysctrl_sleep+0x18>
    e71a:	4b12      	ldr	r3, [pc, #72]	; (e764 <am_hal_sysctrl_sleep+0x58>)
    e71c:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
    e720:	07db      	lsls	r3, r3, #31
    e722:	d513      	bpl.n	e74c <am_hal_sysctrl_sleep+0x40>
    e724:	4a10      	ldr	r2, [pc, #64]	; (e768 <am_hal_sysctrl_sleep+0x5c>)
    e726:	6913      	ldr	r3, [r2, #16]
    e728:	f023 0304 	bic.w	r3, r3, #4
    e72c:	6113      	str	r3, [r2, #16]
    e72e:	f3bf 8f4f 	dsb	sy
    e732:	4a0e      	ldr	r2, [pc, #56]	; (e76c <am_hal_sysctrl_sleep+0x60>)
    e734:	4b0e      	ldr	r3, [pc, #56]	; (e770 <am_hal_sysctrl_sleep+0x64>)
    e736:	6812      	ldr	r2, [r2, #0]
    e738:	601a      	str	r2, [r3, #0]
    e73a:	bf30      	wfi
    e73c:	f3bf 8f6f 	isb	sy
    e740:	9801      	ldr	r0, [sp, #4]
    e742:	b002      	add	sp, #8
    e744:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e748:	f7ff bdc0 	b.w	e2cc <am_hal_interrupt_master_set>
    e74c:	4b09      	ldr	r3, [pc, #36]	; (e774 <am_hal_sysctrl_sleep+0x68>)
    e74e:	681a      	ldr	r2, [r3, #0]
    e750:	b912      	cbnz	r2, e758 <am_hal_sysctrl_sleep+0x4c>
    e752:	4a09      	ldr	r2, [pc, #36]	; (e778 <am_hal_sysctrl_sleep+0x6c>)
    e754:	6812      	ldr	r2, [r2, #0]
    e756:	601a      	str	r2, [r3, #0]
    e758:	4a03      	ldr	r2, [pc, #12]	; (e768 <am_hal_sysctrl_sleep+0x5c>)
    e75a:	6913      	ldr	r3, [r2, #16]
    e75c:	f043 0304 	orr.w	r3, r3, #4
    e760:	6113      	str	r3, [r2, #16]
    e762:	e7e4      	b.n	e72e <am_hal_sysctrl_sleep+0x22>
    e764:	40020000 	.word	0x40020000
    e768:	e000ed00 	.word	0xe000ed00
    e76c:	5fff0000 	.word	0x5fff0000
    e770:	100011a8 	.word	0x100011a8
    e774:	100011a4 	.word	0x100011a4
    e778:	4ffff000 	.word	0x4ffff000

0000e77c <am_bsp_low_power_init>:
    e77c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e77e:	f7ff fee7 	bl	e550 <am_hal_pwrctrl_low_power_init>
    e782:	f000 f877 	bl	e874 <am_hal_rtc_osc_disable>
    e786:	4b0b      	ldr	r3, [pc, #44]	; (e7b4 <am_bsp_low_power_init+0x38>)
    e788:	4f0b      	ldr	r7, [pc, #44]	; (e7b8 <am_bsp_low_power_init+0x3c>)
    e78a:	681e      	ldr	r6, [r3, #0]
    e78c:	2400      	movs	r4, #0
    e78e:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
    e792:	4631      	mov	r1, r6
    e794:	4628      	mov	r0, r5
    e796:	f7ff fc17 	bl	dfc8 <am_hal_gpio_pinconfig>
    e79a:	2103      	movs	r1, #3
    e79c:	4628      	mov	r0, r5
    e79e:	f7ff fd49 	bl	e234 <am_hal_gpio_state_write>
    e7a2:	3401      	adds	r4, #1
    e7a4:	2100      	movs	r1, #0
    e7a6:	4628      	mov	r0, r5
    e7a8:	f7ff fd44 	bl	e234 <am_hal_gpio_state_write>
    e7ac:	2c05      	cmp	r4, #5
    e7ae:	d1ee      	bne.n	e78e <am_bsp_low_power_init+0x12>
    e7b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e7b2:	bf00      	nop
    e7b4:	0000ec3c 	.word	0x0000ec3c
    e7b8:	1000101c 	.word	0x1000101c

0000e7bc <am_bsp_itm_printf_enable>:
    e7bc:	b500      	push	{lr}
    e7be:	4b0b      	ldr	r3, [pc, #44]	; (e7ec <am_bsp_itm_printf_enable+0x30>)
    e7c0:	b087      	sub	sp, #28
    e7c2:	2201      	movs	r2, #1
    e7c4:	601a      	str	r2, [r3, #0]
    e7c6:	f000 f819 	bl	e7fc <am_hal_itm_enable>
    e7ca:	4b09      	ldr	r3, [pc, #36]	; (e7f0 <am_bsp_itm_printf_enable+0x34>)
    e7cc:	9301      	str	r3, [sp, #4]
    e7ce:	a801      	add	r0, sp, #4
    e7d0:	f000 f85a 	bl	e888 <am_hal_tpiu_enable>
    e7d4:	4b07      	ldr	r3, [pc, #28]	; (e7f4 <am_bsp_itm_printf_enable+0x38>)
    e7d6:	2029      	movs	r0, #41	; 0x29
    e7d8:	6819      	ldr	r1, [r3, #0]
    e7da:	f7ff fbf5 	bl	dfc8 <am_hal_gpio_pinconfig>
    e7de:	4806      	ldr	r0, [pc, #24]	; (e7f8 <am_bsp_itm_printf_enable+0x3c>)
    e7e0:	f7fd ff1c 	bl	c61c <am_util_stdio_printf_init>
    e7e4:	b007      	add	sp, #28
    e7e6:	f85d fb04 	ldr.w	pc, [sp], #4
    e7ea:	bf00      	nop
    e7ec:	100011ac 	.word	0x100011ac
    e7f0:	000f4240 	.word	0x000f4240
    e7f4:	0000f088 	.word	0x0000f088
    e7f8:	0000e845 	.word	0x0000e845

0000e7fc <am_hal_itm_enable>:
    e7fc:	4a0e      	ldr	r2, [pc, #56]	; (e838 <am_hal_itm_enable+0x3c>)
    e7fe:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    e802:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    e806:	b410      	push	{r4}
    e808:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    e80c:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    e810:	01db      	lsls	r3, r3, #7
    e812:	d5fb      	bpl.n	e80c <am_hal_itm_enable+0x10>
    e814:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
    e818:	4c08      	ldr	r4, [pc, #32]	; (e83c <am_hal_itm_enable+0x40>)
    e81a:	4a09      	ldr	r2, [pc, #36]	; (e840 <am_hal_itm_enable+0x44>)
    e81c:	f8c3 4fb0 	str.w	r4, [r3, #4016]	; 0xfb0
    e820:	200f      	movs	r0, #15
    e822:	f04f 31ff 	mov.w	r1, #4294967295
    e826:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
    e82a:	f85d 4b04 	ldr.w	r4, [sp], #4
    e82e:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
    e832:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
    e836:	4770      	bx	lr
    e838:	e000ed00 	.word	0xe000ed00
    e83c:	c5acce55 	.word	0xc5acce55
    e840:	00150511 	.word	0x00150511

0000e844 <am_hal_itm_print>:
    e844:	7803      	ldrb	r3, [r0, #0]
    e846:	b1a3      	cbz	r3, e872 <am_hal_itm_print+0x2e>
    e848:	4603      	mov	r3, r0
    e84a:	f1c0 0c01 	rsb	ip, r0, #1
    e84e:	eb0c 0103 	add.w	r1, ip, r3
    e852:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    e856:	2a00      	cmp	r2, #0
    e858:	d1f9      	bne.n	e84e <am_hal_itm_print+0xa>
    e85a:	4401      	add	r1, r0
    e85c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    e860:	f810 cb01 	ldrb.w	ip, [r0], #1
    e864:	6813      	ldr	r3, [r2, #0]
    e866:	2b00      	cmp	r3, #0
    e868:	d0fc      	beq.n	e864 <am_hal_itm_print+0x20>
    e86a:	4288      	cmp	r0, r1
    e86c:	f882 c000 	strb.w	ip, [r2]
    e870:	d1f6      	bne.n	e860 <am_hal_itm_print+0x1c>
    e872:	4770      	bx	lr

0000e874 <am_hal_rtc_osc_disable>:
    e874:	4a03      	ldr	r2, [pc, #12]	; (e884 <am_hal_rtc_osc_disable+0x10>)
    e876:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    e87a:	f043 0310 	orr.w	r3, r3, #16
    e87e:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
    e882:	4770      	bx	lr
    e884:	40004200 	.word	0x40004200

0000e888 <am_hal_tpiu_enable>:
    e888:	b510      	push	{r4, lr}
    e88a:	4b23      	ldr	r3, [pc, #140]	; (e918 <am_hal_tpiu_enable+0x90>)
    e88c:	6804      	ldr	r4, [r0, #0]
    e88e:	2200      	movs	r2, #0
    e890:	b084      	sub	sp, #16
    e892:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    e896:	b334      	cbz	r4, e8e6 <am_hal_tpiu_enable+0x5e>
    e898:	4a20      	ldr	r2, [pc, #128]	; (e91c <am_hal_tpiu_enable+0x94>)
    e89a:	4921      	ldr	r1, [pc, #132]	; (e920 <am_hal_tpiu_enable+0x98>)
    e89c:	2001      	movs	r0, #1
    e89e:	6058      	str	r0, [r3, #4]
    e8a0:	f5a4 4361 	sub.w	r3, r4, #57600	; 0xe100
    e8a4:	a801      	add	r0, sp, #4
    e8a6:	428b      	cmp	r3, r1
    e8a8:	bf88      	it	hi
    e8aa:	4614      	movhi	r4, r2
    e8ac:	f7ff fa22 	bl	dcf4 <am_hal_clkgen_status_get>
    e8b0:	9b01      	ldr	r3, [sp, #4]
    e8b2:	1c5a      	adds	r2, r3, #1
    e8b4:	d02d      	beq.n	e912 <am_hal_tpiu_enable+0x8a>
    e8b6:	08db      	lsrs	r3, r3, #3
    e8b8:	fbb3 f4f4 	udiv	r4, r3, r4
    e8bc:	3c01      	subs	r4, #1
    e8be:	b2a4      	uxth	r4, r4
    e8c0:	4b15      	ldr	r3, [pc, #84]	; (e918 <am_hal_tpiu_enable+0x90>)
    e8c2:	4a18      	ldr	r2, [pc, #96]	; (e924 <am_hal_tpiu_enable+0x9c>)
    e8c4:	611c      	str	r4, [r3, #16]
    e8c6:	2102      	movs	r1, #2
    e8c8:	f8c3 10f0 	str.w	r1, [r3, #240]	; 0xf0
    e8cc:	2000      	movs	r0, #0
    e8ce:	f240 2101 	movw	r1, #513	; 0x201
    e8d2:	f8c3 0f00 	str.w	r0, [r3, #3840]	; 0xf00
    e8d6:	f8c2 1250 	str.w	r1, [r2, #592]	; 0x250
    e8da:	f44f 7048 	mov.w	r0, #800	; 0x320
    e8de:	f7ff fb23 	bl	df28 <am_hal_flash_delay>
    e8e2:	b004      	add	sp, #16
    e8e4:	bd10      	pop	{r4, pc}
    e8e6:	6902      	ldr	r2, [r0, #16]
    e8e8:	611a      	str	r2, [r3, #16]
    e8ea:	6882      	ldr	r2, [r0, #8]
    e8ec:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
    e8f0:	68c1      	ldr	r1, [r0, #12]
    e8f2:	2201      	movs	r2, #1
    e8f4:	3901      	subs	r1, #1
    e8f6:	408a      	lsls	r2, r1
    e8f8:	605a      	str	r2, [r3, #4]
    e8fa:	f8c3 4f00 	str.w	r4, [r3, #3840]	; 0xf00
    e8fe:	4a09      	ldr	r2, [pc, #36]	; (e924 <am_hal_tpiu_enable+0x9c>)
    e900:	6843      	ldr	r3, [r0, #4]
    e902:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
    e906:	f44f 7048 	mov.w	r0, #800	; 0x320
    e90a:	f7ff fb0d 	bl	df28 <am_hal_flash_delay>
    e90e:	b004      	add	sp, #16
    e910:	bd10      	pop	{r4, pc}
    e912:	2405      	movs	r4, #5
    e914:	e7d4      	b.n	e8c0 <am_hal_tpiu_enable+0x38>
    e916:	bf00      	nop
    e918:	e0040000 	.word	0xe0040000
    e91c:	000f4240 	.word	0x000f4240
    e920:	001da380 	.word	0x001da380
    e924:	40020000 	.word	0x40020000
    e928:	6f727245 	.word	0x6f727245
    e92c:	65722072 	.word	0x65722072
    e930:	6e696461 	.word	0x6e696461
    e934:	44412067 	.word	0x44412067
    e938:	6e692043 	.word	0x6e692043
    e93c:	72726574 	.word	0x72726574
    e940:	20747075 	.word	0x20747075
    e944:	74617473 	.word	0x74617473
    e948:	000a7375 	.word	0x000a7375
    e94c:	6f727245 	.word	0x6f727245
    e950:	6c632072 	.word	0x6c632072
    e954:	69726165 	.word	0x69726165
    e958:	4120676e 	.word	0x4120676e
    e95c:	69204344 	.word	0x69204344
    e960:	7265746e 	.word	0x7265746e
    e964:	74707572 	.word	0x74707572
    e968:	61747320 	.word	0x61747320
    e96c:	0a737574 	.word	0x0a737574
    e970:	00000000 	.word	0x00000000
    e974:	6f727245 	.word	0x6f727245
    e978:	202d2072 	.word	0x202d2072
    e97c:	20434441 	.word	0x20434441
    e980:	706d6173 	.word	0x706d6173
    e984:	7220656c 	.word	0x7220656c
    e988:	20646165 	.word	0x20646165
    e98c:	6d6f7266 	.word	0x6d6f7266
    e990:	46494620 	.word	0x46494620
    e994:	6166204f 	.word	0x6166204f
    e998:	64656c69 	.word	0x64656c69
    e99c:	00000a2e 	.word	0x00000a2e
    e9a0:	20434441 	.word	0x20434441
    e9a4:	746f6c53 	.word	0x746f6c53
    e9a8:	20203d20 	.word	0x20203d20
    e9ac:	000a6425 	.word	0x000a6425
    e9b0:	20434441 	.word	0x20434441
    e9b4:	756c6156 	.word	0x756c6156
    e9b8:	203d2065 	.word	0x203d2065
    e9bc:	382e3825 	.word	0x382e3825
    e9c0:	00000a58 	.word	0x00000a58
    e9c4:	6f727245 	.word	0x6f727245
    e9c8:	202d2072 	.word	0x202d2072
    e9cc:	65736572 	.word	0x65736572
    e9d0:	74617672 	.word	0x74617672
    e9d4:	206e6f69 	.word	0x206e6f69
    e9d8:	7420666f 	.word	0x7420666f
    e9dc:	41206568 	.word	0x41206568
    e9e0:	69204344 	.word	0x69204344
    e9e4:	6174736e 	.word	0x6174736e
    e9e8:	2065636e 	.word	0x2065636e
    e9ec:	6c696166 	.word	0x6c696166
    e9f0:	0a2e6465 	.word	0x0a2e6465
    e9f4:	00000000 	.word	0x00000000
    e9f8:	6f727245 	.word	0x6f727245
    e9fc:	202d2072 	.word	0x202d2072
    ea00:	20434441 	.word	0x20434441
    ea04:	65776f70 	.word	0x65776f70
    ea08:	6e6f2072 	.word	0x6e6f2072
    ea0c:	69616620 	.word	0x69616620
    ea10:	2e64656c 	.word	0x2e64656c
    ea14:	0000000a 	.word	0x0000000a
    ea18:	6f727245 	.word	0x6f727245
    ea1c:	202d2072 	.word	0x202d2072
    ea20:	666e6f63 	.word	0x666e6f63
    ea24:	72756769 	.word	0x72756769
    ea28:	20676e69 	.word	0x20676e69
    ea2c:	20434441 	.word	0x20434441
    ea30:	6c696166 	.word	0x6c696166
    ea34:	0a2e6465 	.word	0x0a2e6465
    ea38:	00000000 	.word	0x00000000
    ea3c:	6f727245 	.word	0x6f727245
    ea40:	202d2072 	.word	0x202d2072
    ea44:	666e6f63 	.word	0x666e6f63
    ea48:	72756769 	.word	0x72756769
    ea4c:	20676e69 	.word	0x20676e69
    ea50:	20434441 	.word	0x20434441
    ea54:	746f6c53 	.word	0x746f6c53
    ea58:	66203020 	.word	0x66203020
    ea5c:	656c6961 	.word	0x656c6961
    ea60:	000a2e64 	.word	0x000a2e64
    ea64:	6f727245 	.word	0x6f727245
    ea68:	202d2072 	.word	0x202d2072
    ea6c:	62616e65 	.word	0x62616e65
    ea70:	676e696c 	.word	0x676e696c
    ea74:	43444120 	.word	0x43444120
    ea78:	69616620 	.word	0x69616620
    ea7c:	2e64656c 	.word	0x2e64656c
    ea80:	0000000a 	.word	0x0000000a
    ea84:	6f727245 	.word	0x6f727245
    ea88:	202d2072 	.word	0x202d2072
    ea8c:	61736964 	.word	0x61736964
    ea90:	20656c62 	.word	0x20656c62
    ea94:	20434441 	.word	0x20434441
    ea98:	6c696166 	.word	0x6c696166
    ea9c:	0a2e6465 	.word	0x0a2e6465
    eaa0:	00000000 	.word	0x00000000
    eaa4:	6f727245 	.word	0x6f727245
    eaa8:	202d2072 	.word	0x202d2072
    eaac:	61736964 	.word	0x61736964
    eab0:	6e696c62 	.word	0x6e696c62
    eab4:	68742067 	.word	0x68742067
    eab8:	44412065 	.word	0x44412065
    eabc:	6f702043 	.word	0x6f702043
    eac0:	20726577 	.word	0x20726577
    eac4:	616d6f64 	.word	0x616d6f64
    eac8:	66206e69 	.word	0x66206e69
    eacc:	656c6961 	.word	0x656c6961
    ead0:	000a2e64 	.word	0x000a2e64
    ead4:	6f727245 	.word	0x6f727245
    ead8:	202d2072 	.word	0x202d2072
    eadc:	75746572 	.word	0x75746572
    eae0:	6f206e72 	.word	0x6f206e72
    eae4:	68742066 	.word	0x68742066
    eae8:	44412065 	.word	0x44412065
    eaec:	6e692043 	.word	0x6e692043
    eaf0:	6e617473 	.word	0x6e617473
    eaf4:	66206563 	.word	0x66206563
    eaf8:	656c6961 	.word	0x656c6961
    eafc:	000a2e64 	.word	0x000a2e64
    eb00:	6f727245 	.word	0x6f727245
    eb04:	202d2072 	.word	0x202d2072
    eb08:	666e6f63 	.word	0x666e6f63
    eb0c:	72756769 	.word	0x72756769
    eb10:	20676e69 	.word	0x20676e69
    eb14:	20656874 	.word	0x20656874
    eb18:	74737973 	.word	0x74737973
    eb1c:	63206d65 	.word	0x63206d65
    eb20:	6b636f6c 	.word	0x6b636f6c
    eb24:	69616620 	.word	0x69616620
    eb28:	2e64656c 	.word	0x2e64656c
    eb2c:	0000000a 	.word	0x0000000a
    eb30:	6f727245 	.word	0x6f727245
    eb34:	202d2072 	.word	0x202d2072
    eb38:	666e6f63 	.word	0x666e6f63
    eb3c:	72756769 	.word	0x72756769
    eb40:	20676e69 	.word	0x20676e69
    eb44:	20656874 	.word	0x20656874
    eb48:	74737973 	.word	0x74737973
    eb4c:	63206d65 	.word	0x63206d65
    eb50:	65686361 	.word	0x65686361
    eb54:	69616620 	.word	0x69616620
    eb58:	2e64656c 	.word	0x2e64656c
    eb5c:	0000000a 	.word	0x0000000a
    eb60:	6f727245 	.word	0x6f727245
    eb64:	202d2072 	.word	0x202d2072
    eb68:	62616e65 	.word	0x62616e65
    eb6c:	676e696c 	.word	0x676e696c
    eb70:	65687420 	.word	0x65687420
    eb74:	73797320 	.word	0x73797320
    eb78:	206d6574 	.word	0x206d6574
    eb7c:	68636163 	.word	0x68636163
    eb80:	61662065 	.word	0x61662065
    eb84:	64656c69 	.word	0x64656c69
    eb88:	00000a2e 	.word	0x00000a2e
    eb8c:	6f727245 	.word	0x6f727245
    eb90:	202d2072 	.word	0x202d2072
    eb94:	666e6f63 	.word	0x666e6f63
    eb98:	72756769 	.word	0x72756769
    eb9c:	20676e69 	.word	0x20676e69
    eba0:	20656874 	.word	0x20656874
    eba4:	73616c66 	.word	0x73616c66
    eba8:	656d2068 	.word	0x656d2068
    ebac:	79726f6d 	.word	0x79726f6d
    ebb0:	69616620 	.word	0x69616620
    ebb4:	2e64656c 	.word	0x2e64656c
    ebb8:	0000000a 	.word	0x0000000a
    ebbc:	6f727245 	.word	0x6f727245
    ebc0:	202d2072 	.word	0x202d2072
    ebc4:	666e6f63 	.word	0x666e6f63
    ebc8:	72756769 	.word	0x72756769
    ebcc:	20676e69 	.word	0x20676e69
    ebd0:	20656874 	.word	0x20656874
    ebd4:	4d415253 	.word	0x4d415253
    ebd8:	69616620 	.word	0x69616620
    ebdc:	2e64656c 	.word	0x2e64656c
    ebe0:	0000000a 	.word	0x0000000a
    ebe4:	20434441 	.word	0x20434441
    ebe8:	6d617845 	.word	0x6d617845
    ebec:	20656c70 	.word	0x20656c70
    ebf0:	31207461 	.word	0x31207461
    ebf4:	77207a48 	.word	0x77207a48
    ebf8:	20687469 	.word	0x20687469
    ebfc:	20434441 	.word	0x20434441
    ec00:	61736964 	.word	0x61736964
    ec04:	64656c62 	.word	0x64656c62
    ec08:	74656220 	.word	0x74656220
    ec0c:	6e656577 	.word	0x6e656577
    ec10:	6d617320 	.word	0x6d617320
    ec14:	73656c70 	.word	0x73656c70
    ec18:	0000000a 	.word	0x0000000a
    ec1c:	0a0a0a0a 	.word	0x0a0a0a0a
    ec20:	0a0a0a0a 	.word	0x0a0a0a0a
    ec24:	0a0a0a0a 	.word	0x0a0a0a0a
    ec28:	0a0a0a0a 	.word	0x0a0a0a0a
    ec2c:	00000a0a 	.word	0x00000a0a

0000ec30 <g_AM_PIN_16_ADCSE0>:
    ec30:	00000000                                ....

0000ec34 <am_hal_cachectrl_defaults>:
    ec34:	00000308                                ....

0000ec38 <g_AM_HAL_GPIO_DISABLE>:
    ec38:	00000003                                ....

0000ec3c <g_AM_HAL_GPIO_OUTPUT>:
    ec3c:	00000403                                ....

0000ec40 <g_ui8Bit76Capabilities>:
    ec40:	02800101 80010180 80800101 80808080     ................
    ec50:	80808080 80808008 01800180 80808080     ................
    ec60:	80808080 01800402 01010401 80808080     ................
    ec70:	00000101                                ....

0000ec74 <g_ui8Inpen>:
    ec74:	62272323 108703a1 e1005303 55418151     ##'b.....S..Q.AU
    ec84:	4080c405 4140b101 31a03114 1180f100     ...@..@A.1.1....
    ec94:	11c12191 304511e5 31300037 40007100     .!....E07.01.q.@
    eca4:	00003130                                01..

0000eca8 <g_ui8NCEtable>:
    eca8:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
    ecb8:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
    ecc8:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
    ecd8:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
    ece8:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
    ecf8:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
    ed08:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
    ed18:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
    ed28:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
    ed38:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
    ed48:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
    ed58:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
    ed68:	32221202 43231303                       .."2..#C

0000ed70 <g_ui8nCEpins>:
    ed70:	02070707 00080802 01020202 01010101     ................
    ed80:	01010101 01010101 01010101 01010101     ................
    ed90:	01010101 08010101 01010008 01010101     ................
    eda0:	00000101                                ....

0000eda4 <g_am_hal_mcuctrl_flash_size>:
    eda4:	00004000 00008000 00010000 00020000     .@..............
    edb4:	00040000 00080000 00100000 00200000     .............. .
    edc4:	00180000 00000000 00000000 00000000     ................
	...

0000ede4 <g_am_hal_mcuctrl_sram_size>:
    ede4:	00004000 00008000 00010000 00020000     .@..............
    edf4:	00040000 00080000 00100000 00060000     ................
    ee04:	000c0000 00000000 00000000 00000000     ................
	...

0000ee24 <am_hal_pwrctrl_memory_control>:
	...
    ee3c:	00000001 00000001 00000001 00001fff     ................
    ee4c:	00001fff 00000001 00000003 00000003     ................
    ee5c:	00000003 00001fff 00001fff 00000003     ................
    ee6c:	00000007 00000007 00000007 00001fff     ................
    ee7c:	00001fff 00000007 0000000f 0000000f     ................
    ee8c:	0000000f 00001fff 00001fff 0000000f     ................
    ee9c:	0000001f 0000001f 0000001f 00001fff     ................
    eeac:	00001fff 0000001f 0000003f 0000003f     ........?...?...
    eebc:	0000003f 00001fff 00001fff 0000003f     ?...........?...
    eecc:	0000007f 0000007f 0000007f 00001fff     ................
    eedc:	00001fff 0000007f 000000ff 000000ff     ................
    eeec:	000000ff 00001fff 00001fff 000000ff     ................
    eefc:	000001ff 000001ff 000001ff 00001fff     ................
    ef0c:	00001fff 000001ff 000003ff 000003ff     ................
    ef1c:	000003ff 00001fff 00001fff 000003ff     ................
    ef2c:	000007ff 000007ff 000007ff 00001fff     ................
    ef3c:	00001fff 000007ff 00000fff 00000fff     ................
    ef4c:	00000fff 00001fff 00001fff 00000fff     ................
    ef5c:	00001fff 00001fff 00001fff 00001fff     ................
    ef6c:	00001fff 00001fff 00002000 00002000     ......... ... ..
    ef7c:	00002000 00006000 00006000 00002000     . ...`...`... ..
    ef8c:	00006000 00006000 00006000 00006000     .`...`...`...`..
    ef9c:	00006000 00006000 c0000000 00000000     .`...`..........
    efac:	c0000000 c0000000 00000000 80000000     ................
    efbc:	c0007fff 00007fff c0007fff c0007fff     ................
    efcc:	00007fff 80007fff                       ........

0000efd4 <am_hal_pwrctrl_peripheral_control>:
	...
    efe0:	00000001 00000004 00000004 00000002     ................
    eff0:	00000008 00000008 00000004 00000008     ................
    f000:	00000008 00000008 00000008 00000008     ................
    f010:	00000010 00000010 00000010 00000020     ............ ...
    f020:	00000010 00000010 00000040 00000010     ........@.......
    f030:	00000010 00000080 00000004 00000004     ................
    f040:	00000100 00000004 00000004 00000200     ................
    f050:	00000020 00000020 00000400 00000004      ... ...........
    f060:	00000004 00000800 00000040 00000040     ........@...@...
    f070:	00001000 00000080 00000080 00002000     ............. ..
    f080:	00000100 00000100                       ........

0000f088 <g_AM_BSP_GPIO_ITM_SWO>:
    f088:	00000002                                ....
